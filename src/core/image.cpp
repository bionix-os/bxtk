#include "image.h"

void lucidware::core::bindImage(sol::state &lua) {
    lua.new_usertype<lucidware::core::Image>("Image",
        "new", sol::factories(
            []() { return new lucidware::core::Image(); }
        ),
        sol::base_classes, sol::bases<lucidware::core::BaseObject, lucidware::core::Resource>(),
        "adjustBcs", &lucidware::core::Image::adjustBcs,
        "blendRect", &lucidware::core::Image::blendRect,
        "blendRectMask", &lucidware::core::Image::blendRectMask,
        "blitRect", &lucidware::core::Image::blitRect,
        "blitRectMask", &lucidware::core::Image::blitRectMask,
        "crop", &lucidware::core::Image::crop,
        //"cropRect", &lucidware::core::Image::cropRect,
        "flipX", &lucidware::core::Image::flipX,
        "flipY", &lucidware::core::Image::flipY,
        "generateMipmaps", &lucidware::core::Image::generateMipmaps,
        "getData", &lucidware::core::Image::getData,
        "getDataSize", &lucidware::core::Image::getDataSize,
        "getFormat", &lucidware::core::Image::getFormat,
        "getHeight", &lucidware::core::Image::getHeight,
        "getMipmapCount", &lucidware::core::Image::getMipmapCount,
        "getMipmapOffset", &lucidware::core::Image::getMipmapOffset,
        "getPixel", &lucidware::core::Image::getPixel,
        "getPixelv", &lucidware::core::Image::getPixelv,
        "getRegion", &lucidware::core::Image::getRegion,
        "getSize", &lucidware::core::Image::getSize,
        "getUsedRect", &lucidware::core::Image::getUsedRect,
        "getWidth", &lucidware::core::Image::getWidth,
        "hasMipmaps", &lucidware::core::Image::hasMipmaps,
        "isCompressed", &lucidware::core::Image::isCompressed,
        "isEmpty", &lucidware::core::Image::isEmpty,
        "isInvisible", &lucidware::core::Image::isInvisible,
        "load", &lucidware::core::Image::load,
        "loadBmpFromBuffer", &lucidware::core::Image::loadBmpFromBuffer,
        "loadFromFile", &lucidware::core::Image::loadFromFile,
        "loadJpegFromBuffer", &lucidware::core::Image::loadJpegFromBuffer,
        "loadKtxFromBuffer", &lucidware::core::Image::loadKtxFromBuffer,
        "loadPngFromBuffer", &lucidware::core::Image::loadPngFromBuffer,
        "loadSvgFromBuffer", &lucidware::core::Image::loadSvgFromBuffer,
        "loadSvgFromString", &lucidware::core::Image::loadSvgFromString,
        "loadTgaFromBuffer", &lucidware::core::Image::loadTgaFromBuffer,
        "loadWebpFromBuffer", &lucidware::core::Image::loadWebpFromBuffer,
        "normalMapToXY", &lucidware::core::Image::normalMapToXY,
        "premultiplyAlpha", &lucidware::core::Image::premultiplyAlpha,
        "resize", &lucidware::core::Image::resize,
        "resizeToPo2", &lucidware::core::Image::resizeToPo2,
        "rotate90", &lucidware::core::Image::rotate90,
        "rotate180", &lucidware::core::Image::rotate180,
        "saveRxr", &lucidware::core::Image::saveRxr,
        "saveRxrToBuffer", &lucidware::core::Image::saveRxrToBuffer,
        "saveJpeg", &lucidware::core::Image::saveJpeg,
        "saveJpegToBuffer", &lucidware::core::Image::saveJpegToBuffer,
        "savePng", &lucidware::core::Image::savePng,
        "savePngToBuffer", &lucidware::core::Image::savePngToBuffer,
        "saveWebp", &lucidware::core::Image::saveWebp,
        "saveWebpToBuffer", &lucidware::core::Image::saveWebpToBuffer,
        //"setData", &lucidware::core::Image::setData,
        "setPixel", &lucidware::core::Image::setPixel,
        "setPixelv", &lucidware::core::Image::setPixelv,
        "shrinkX2", &lucidware::core::Image::shrinkX2,
        "srgbToLinear", &lucidware::core::Image::srgbToLinear,
        "cast", [](Resource* instance) {
            return new Image(godot::Object::cast_to<GodotImage>(instance->getResource()));
        }
    );
}