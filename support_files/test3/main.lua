-- Generated by Haxe 4.3.3
local _hx_hidden = {__id__=true, hx__closures=true, super=true, prototype=true, __fields__=true, __ifields__=true, __class__=true, __properties__=true, __fields__=true, __name__=true}

_hx_array_mt = {
    __newindex = function(t,k,v)
        local len = t.length
        t.length =  k >= len and (k + 1) or len
        rawset(t,k,v)
    end
}

function _hx_is_array(o)
    return type(o) == "table"
        and o.__enum__ == nil
        and getmetatable(o) == _hx_array_mt
end



function _hx_tab_array(tab, length)
    tab.length = length
    return setmetatable(tab, _hx_array_mt)
end



function _hx_print_class(obj, depth)
    local first = true
    local result = ''
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            if first then
                first = false
            else
                result = result .. ', '
            end
            if _hx_hidden[k] == nil then
                result = result .. k .. ':' .. _hx_tostring(v, depth+1)
            end
        end
    end
    return '{ ' .. result .. ' }'
end

function _hx_print_enum(o, depth)
    if o.length == 2 then
        return o[0]
    else
        local str = o[0] .. "("
        for i = 2, (o.length-1) do
            if i ~= 2 then
                str = str .. "," .. _hx_tostring(o[i], depth+1)
            else
                str = str .. _hx_tostring(o[i], depth+1)
            end
        end
        return str .. ")"
    end
end

function _hx_tostring(obj, depth)
    if depth == nil then
        depth = 0
    elseif depth > 5 then
        return "<...>"
    end

    local tstr = _G.type(obj)
    if tstr == "string" then return obj
    elseif tstr == "nil" then return "null"
    elseif tstr == "number" then
        if obj == _G.math.POSITIVE_INFINITY then return "Infinity"
        elseif obj == _G.math.NEGATIVE_INFINITY then return "-Infinity"
        elseif obj == 0 then return "0"
        elseif obj ~= obj then return "NaN"
        else return _G.tostring(obj)
        end
    elseif tstr == "boolean" then return _G.tostring(obj)
    elseif tstr == "userdata" then
        local mt = _G.getmetatable(obj)
        if mt ~= nil and mt.__tostring ~= nil then
            return _G.tostring(obj)
        else
            return "<userdata>"
        end
    elseif tstr == "function" then return "<function>"
    elseif tstr == "thread" then return "<thread>"
    elseif tstr == "table" then
        if obj.__enum__ ~= nil then
            return _hx_print_enum(obj, depth)
        elseif obj.toString ~= nil and not _hx_is_array(obj) then return obj:toString()
        elseif _hx_is_array(obj) then
            if obj.length > 5 then
                return "[...]"
            else
                local str = ""
                for i=0, (obj.length-1) do
                    if i == 0 then
                        str = str .. _hx_tostring(obj[i], depth+1)
                    else
                        str = str .. "," .. _hx_tostring(obj[i], depth+1)
                    end
                end
                return "[" .. str .. "]"
            end
        elseif obj.__class__ ~= nil then
            return _hx_print_class(obj, depth)
        else
            local buffer = {}
            local ref = obj
            if obj.__fields__ ~= nil then
                ref = obj.__fields__
            end
            for k,v in pairs(ref) do
                if _hx_hidden[k] == nil then
                    _G.table.insert(buffer, _hx_tostring(k, depth+1) .. ' : ' .. _hx_tostring(obj[k], depth+1))
                end
            end

            return "{ " .. table.concat(buffer, ", ") .. " }"
        end
    else
        _G.error("Unknown Lua type", 0)
        return ""
    end
end

local function _hx_obj_newindex(t,k,v)
    t.__fields__[k] = true
    rawset(t,k,v)
end

local _hx_obj_mt = {__newindex=_hx_obj_newindex, __tostring=_hx_tostring}

local function _hx_a(...)
  local __fields__ = {};
  local ret = {__fields__ = __fields__};
  local max = select('#',...);
  local tab = {...};
  local cur = 1;
  while cur < max do
    local v = tab[cur];
    __fields__[v] = true;
    ret[v] = tab[cur+1];
    cur = cur + 2
  end
  return setmetatable(ret, _hx_obj_mt)
end

local function _hx_e()
  return setmetatable({__fields__ = {}}, _hx_obj_mt)
end

local function _hx_o(obj)
  return setmetatable(obj, _hx_obj_mt)
end

local function _hx_new(prototype)
  return setmetatable({__fields__ = {}}, {__newindex=_hx_obj_newindex, __index=prototype, __tostring=_hx_tostring})
end

function _hx_field_arr(obj)
    local res = {}
    local idx = 0
    if obj.__fields__ ~= nil then
        obj = obj.__fields__
    end
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            res[idx] = k
            idx = idx + 1
        end
    end
    return _hx_tab_array(res, idx)
end

local _hxClasses = {}
local Int = _hx_e();
local Dynamic = _hx_e();
local Float = _hx_e();
local Bool = _hx_e();
local Class = _hx_e();
local Enum = _hx_e();

local Array = _hx_e()
local Main = _hx_e()
local Math = _hx_e()
local Reflect = _hx_e()
local String = _hx_e()
local Std = _hx_e()
local Type = _hx_e()
__haxe_Exception = _hx_e()
__haxe_Log = _hx_e()
__haxe_NativeStackTrace = _hx_e()
__haxe_ValueException = _hx_e()
__haxe_exceptions_PosException = _hx_e()
__haxe_exceptions_NotImplementedException = _hx_e()
__haxe_iterators_ArrayIterator = _hx_e()
__haxe_iterators_ArrayKeyValueIterator = _hx_e()
__lua_Boot = _hx_e()
__lua_UserData = _hx_e()
__lua_PairTools = _hx_e()
__lua_Thread = _hx_e()
__sunaba_core_BaseObject = _hx_e()
__sunaba_core__BaseObject_BaseObjectAbstract_Impl_ = _hx_e()
__sunaba_core__Basis_Basis_Impl_ = _hx_e()
__sunaba_core_Component = _hx_e()
__sunaba_core__Component_ComponentAbstract_Impl_ = _hx_e()
__sunaba_core_Entity = _hx_e()
__sunaba_core__Entity_EntityAbstract_Impl_ = _hx_e()
__sunaba_core_GlobalObjectStack = _hx_e()
__sunaba_core_ObjectUtils = _hx_e()
__sunaba_core__Quaternion_Quaternion_Impl_ = _hx_e()
__sunaba_core_Scene = _hx_e()
__sunaba_core__Scene_SceneAbstract_Impl_ = _hx_e()
__sunaba_core_StackHandle = _hx_e()
__sunaba_core__Vector2_Vector2_Impl_ = _hx_e()
__sunaba_core__Vector3_Vector3_Impl_ = _hx_e()
local IGeometryInstance = _hx_e()
__sunaba_spatial_Camera = _hx_e()
__sunaba_spatial__Camera_CameraAbstract_Impl_ = _hx_e()
__sunaba_spatial_IVisualInstance = _hx_e()
__sunaba_spatial_IGeometryInstance = _hx_e()
__sunaba_spatial__IGeometryInstance_IGeometryInstanceAbstract_Impl_ = _hx_e()
__sunaba_spatial__IVisualInstance_IVisualInstanceAbstract_Impl_ = _hx_e()
__sunaba_spatial_SpatialTransform = _hx_e()
__sunaba_spatial__SpatialTransform_SpatialTransformAbstract_Impl_ = _hx_e()
__sunaba_spatial_mesh_Box = _hx_e()
__sunaba_spatial_mesh__Box_BoxAbstract_Impl_ = _hx_e()
__sunaba_spatial_mesh_MeshRenderer = _hx_e()
__sunaba_spatial_mesh__MeshRenderer_MeshRendererAbstract_Impl_ = _hx_e()
__support_files_test3_src_RotateComponent = _hx_e()

local _hx_bind, _hx_bit, _hx_staticToInstance, _hx_funcToField, _hx_maxn, _hx_print, _hx_apply_self, _hx_box_mr, _hx_bit_clamp, _hx_table, _hx_bit_raw
local _hx_pcall_default = {};
local _hx_pcall_break = {};

Array.new = function() 
  local self = _hx_new(Array.prototype)
  Array.super(self)
  return self
end
Array.super = function(self) 
  _hx_tab_array(self, 0);
end
Array.__name__ = "Array"
Array.prototype = _hx_e();
Array.prototype.concat = function(self,a) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  local ret = _g;
  local _g = 0;
  while (_g < a.length) do _hx_do_first_1 = false;
    
    local i = a[_g];
    _g = _g + 1;
    ret:push(i);
  end;
  do return ret end
end
Array.prototype.join = function(self,sep) 
  local tbl = ({});
  local _g_current = 0;
  local _g_array = self;
  while (_g_current < _g_array.length) do _hx_do_first_1 = false;
    
    _g_current = _g_current + 1;
    local i = _g_array[_g_current - 1];
    _G.table.insert(tbl, Std.string(i));
  end;
  do return _G.table.concat(tbl, sep) end
end
Array.prototype.pop = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[self.length - 1];
  self[self.length - 1] = nil;
  self.length = self.length - 1;
  do return ret end
end
Array.prototype.push = function(self,x) 
  self[self.length] = x;
  do return self.length end
end
Array.prototype.reverse = function(self) 
  local tmp;
  local i = 0;
  while (i < Std.int(self.length / 2)) do _hx_do_first_1 = false;
    
    tmp = self[i];
    self[i] = self[(self.length - i) - 1];
    self[(self.length - i) - 1] = tmp;
    i = i + 1;
  end;
end
Array.prototype.shift = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[0];
  if (self.length == 1) then 
    self[0] = nil;
  else
    if (self.length > 1) then 
      self[0] = self[1];
      _G.table.remove(self, 1);
    end;
  end;
  local tmp = self;
  tmp.length = tmp.length - 1;
  do return ret end
end
Array.prototype.slice = function(self,pos,_end) 
  if ((_end == nil) or (_end > self.length)) then 
    _end = self.length;
  else
    if (_end < 0) then 
      _end = _G.math.fmod((self.length - (_G.math.fmod(-_end, self.length))), self.length);
    end;
  end;
  if (pos < 0) then 
    pos = _G.math.fmod((self.length - (_G.math.fmod(-pos, self.length))), self.length);
  end;
  if ((pos > _end) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  end;
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = _end;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
  end;
  do return ret end
end
Array.prototype.sort = function(self,f) 
  local i = 0;
  local l = self.length;
  while (i < l) do _hx_do_first_1 = false;
    
    local swap = false;
    local j = 0;
    local max = (l - i) - 1;
    while (j < max) do _hx_do_first_2 = false;
      
      if (f(self[j], self[j + 1]) > 0) then 
        local tmp = self[j + 1];
        self[j + 1] = self[j];
        self[j] = tmp;
        swap = true;
      end;
      j = j + 1;
    end;
    if (not swap) then 
      break;
    end;
    i = i + 1;
  end;
end
Array.prototype.splice = function(self,pos,len) 
  if ((len < 0) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  else
    if (pos < 0) then 
      pos = self.length - (_G.math.fmod(-pos, self.length));
    end;
  end;
  len = Math.min(len, self.length - pos);
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = pos + len;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
    self[i] = self[i + len];
  end;
  local _g = pos + len;
  local _g1 = self.length;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    self[i] = self[i + len];
  end;
  local tmp = self;
  tmp.length = tmp.length - len;
  do return ret end
end
Array.prototype.toString = function(self) 
  local tbl = ({});
  _G.table.insert(tbl, "[");
  _G.table.insert(tbl, self:join(","));
  _G.table.insert(tbl, "]");
  do return _G.table.concat(tbl, "") end
end
Array.prototype.unshift = function(self,x) 
  local len = self.length;
  local _g = 0;
  local _g1 = len;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    self[len - i] = self[(len - i) - 1];
  end;
  self[0] = x;
end
Array.prototype.insert = function(self,pos,x) 
  if (pos > self.length) then 
    pos = self.length;
  end;
  if (pos < 0) then 
    pos = self.length + pos;
    if (pos < 0) then 
      pos = 0;
    end;
  end;
  local cur_len = self.length;
  while (cur_len > pos) do _hx_do_first_1 = false;
    
    self[cur_len] = self[cur_len - 1];
    cur_len = cur_len - 1;
  end;
  self[pos] = x;
end
Array.prototype.remove = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      local _g = i;
      local _g1 = self.length - 1;
      while (_g < _g1) do _hx_do_first_2 = false;
        
        _g = _g + 1;
        local j = _g - 1;
        self[j] = self[j + 1];
      end;
      self[self.length - 1] = nil;
      self.length = self.length - 1;
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.contains = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.indexOf = function(self,x,fromIndex) 
  local _end = self.length;
  if (fromIndex == nil) then 
    fromIndex = 0;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        fromIndex = 0;
      end;
    end;
  end;
  local _g = fromIndex;
  local _g1 = _end;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    if (x == self[i]) then 
      do return i end;
    end;
  end;
  do return -1 end
end
Array.prototype.lastIndexOf = function(self,x,fromIndex) 
  if ((fromIndex == nil) or (fromIndex >= self.length)) then 
    fromIndex = self.length - 1;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        do return -1 end;
      end;
    end;
  end;
  local i = fromIndex;
  while (i >= 0) do _hx_do_first_1 = false;
    
    if (self[i] == x) then 
      do return i end;
    else
      i = i - 1;
    end;
  end;
  do return -1 end
end
Array.prototype.copy = function(self) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.map = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(f(i));
  end;
  do return _g end
end
Array.prototype.filter = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if (f(i)) then 
      _g:push(i);
    end;
  end;
  do return _g end
end
Array.prototype.iterator = function(self) 
  do return __haxe_iterators_ArrayIterator.new(self) end
end
Array.prototype.keyValueIterator = function(self) 
  do return __haxe_iterators_ArrayKeyValueIterator.new(self) end
end
Array.prototype.resize = function(self,len) 
  if (self.length < len) then 
    self.length = len;
  else
    if (self.length > len) then 
      local _g = len;
      local _g1 = self.length;
      while (_g < _g1) do _hx_do_first_1 = false;
        
        _g = _g + 1;
        local i = _g - 1;
        self[i] = nil;
      end;
      self.length = len;
    end;
  end;
end

Array.prototype.__class__ =  Array

Main.new = {}
Main.__name__ = "Main"
Main.main = function() 
  __sunaba_core_GlobalObjectStack.initSingleton();
  local scene = __sunaba_core_Scene.new();
  local entity1 = __sunaba_core_Entity.new();
  entity1:set_name("Entity1");
  local e1transform = __sunaba_spatial_SpatialTransform.new();
  entity1:addComponent(e1transform, __sunaba_spatial_SpatialTransform.__name__);
  scene:addEntity(entity1);
  e1transform:set_position(__sunaba_core__Vector3_Vector3_Impl_._new(1, 2, 3));
  local child1 = __sunaba_core_Entity.new();
  child1:set_name("Child1");
  local c1transform = __sunaba_spatial_SpatialTransform.new();
  child1:addComponent(c1transform, __sunaba_spatial_SpatialTransform.__name__);
  entity1:addChild(child1);
  c1transform:set_position(__sunaba_core__Vector3_Vector3_Impl_._new(4, 5, 6));
  local entity2 = __sunaba_core_Entity.new();
  entity2:set_name("Entity2");
  local e2transform = __sunaba_spatial_SpatialTransform.new();
  entity2:addComponent(e2transform, __sunaba_spatial_SpatialTransform.__name__);
  scene:addEntity(entity2);
  e2transform:set_position(__sunaba_core__Vector3_Vector3_Impl_._new(7, 8, 9));
  local entity3 = __sunaba_core_Entity.new();
  entity3:set_name("Camera");
  local e3transform = __sunaba_spatial_SpatialTransform.new();
  entity3:addComponent(e3transform, __sunaba_spatial_SpatialTransform.__name__);
  local camera = __sunaba_spatial_Camera.new();
  entity3:addComponent(camera, __sunaba_spatial_Camera.__name__);
  scene:addEntity(entity3);
  e3transform:set_position(__sunaba_core__Vector3_Vector3_Impl_._new(0, 0, 1));
  local entity4 = __sunaba_core_Entity.new();
  entity4:set_name("Box");
  local e4transform = __sunaba_spatial_SpatialTransform.new();
  entity4:addComponent(e4transform, __sunaba_spatial_SpatialTransform.__name__);
  local e4mesh = __sunaba_spatial_mesh_MeshRenderer.new();
  entity4:addComponent(e4mesh, __sunaba_spatial_mesh_MeshRenderer.__name__);
  local e4box = __sunaba_spatial_mesh_Box.new();
  entity4:addComponent(e4box, __sunaba_spatial_mesh_Box.__name__);
  e4box:set_size(__sunaba_core__Vector3_Vector3_Impl_._new(1, 1, 1));
  local rotateComponent = __support_files_test3_src_RotateComponent.new();
  entity4:addComponent(rotateComponent, "RotateComponent");
  scene:addEntity(entity4);
  e4transform:set_position(__sunaba_core__Vector3_Vector3_Impl_._new(0, 0, -1));
  local _hx_status, _hx_result = pcall(function() 
  
      Main.printScene(scene);
    return _hx_pcall_default
  end)
  if not _hx_status and _hx_result == "_hx_pcall_break" then
  elseif not _hx_status then 
    local _g = _hx_result;
    local e = __haxe_Exception.caught(_g):unwrap();
    _G.print(Std.string(Std.string(Std.string(Std.string("Error: ") .. Std.string(Std.string(e))) .. Std.string(" : ")) .. Std.string(Std.string(e.stack))));
    _G.error(__haxe_Exception.thrown(e),0);
  elseif _hx_result ~= _hx_pcall_default then
    return _hx_result
  end;
end
Main.printEntity = function(entity,indent) 
  if (indent == nil) then 
    indent = "    ";
  end;
  _G.print(Std.string(Std.string(Std.string(indent) .. Std.string("Entity: ")) .. Std.string(entity:get_name())));
  local spatialTransform = entity:getComponent(__sunaba_spatial_SpatialTransform);
  if (spatialTransform ~= nil) then 
    local position = spatialTransform.position;
    local rotation = spatialTransform.rotation;
    local scale = spatialTransform.scale;
    local global = spatialTransform.global;
    _G.print(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(indent) .. Std.string("    Transform: ")) .. Std.string(_hx_wrap_if_string_field(position,'toString')(position))) .. Std.string(", ")) .. Std.string(_hx_wrap_if_string_field(rotation,'toString')(rotation))) .. Std.string(", ")) .. Std.string(_hx_wrap_if_string_field(scale,'toString')(scale))));
    _G.print(Std.string(Std.string(Std.string(indent) .. Std.string("    GlobalTransform: ")) .. Std.string(_hx_wrap_if_string_field(global,'toString')(global))));
  end;
  local _g = 0;
  local _g1 = entity:getChildCount();
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local child = _g - 1;
    local childEntity = entity:getChild(child);
    Main.printEntity(childEntity, Std.string(indent) .. Std.string("    "));
  end;
end
Main.printScene = function(scene) 
  _G.print(Std.string(Std.string("Scene: ") .. Std.string(Std.string(scene))));
  local _g = 0;
  local _g1 = scene:getEntityCount();
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local entity = _g - 1;
    local entity = scene:getEntity(entity);
    Main.printEntity(entity);
  end;
end

Math.new = {}
Math.__name__ = "Math"
Math.isNaN = function(f) 
  do return f ~= f end;
end
Math.isFinite = function(f) 
  if (f > -_G.math.huge) then 
    do return f < _G.math.huge end;
  else
    do return false end;
  end;
end
Math.min = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.min(a, b) end;
  end;
end

Reflect.new = {}
Reflect.__name__ = "Reflect"
Reflect.field = function(o,field) 
  if (_G.type(o) == "string") then 
    if (field == "length") then 
      do return _hx_wrap_if_string_field(o,'length') end;
    else
      do return String.prototype[field] end;
    end;
  else
    local _hx_status, _hx_result = pcall(function() 
    
        do return o[field] end;
      return _hx_pcall_default
    end)
    if not _hx_status and _hx_result == "_hx_pcall_break" then
    elseif not _hx_status then 
      local _g = _hx_result;
      do return nil end;
    elseif _hx_result ~= _hx_pcall_default then
      return _hx_result
    end;
  end;
end

String.new = function(string) 
  local self = _hx_new(String.prototype)
  String.super(self,string)
  self = string
  return self
end
String.super = function(self,string) 
end
String.__name__ = "String"
String.__index = function(s,k) 
  if (k == "length") then 
    do return _G.string.len(s) end;
  else
    local o = String.prototype;
    local field = k;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "function") and not ((function() 
        local _hx_2
        if (_G.type(o) ~= "table") then 
        _hx_2 = false; else 
        _hx_2 = o.__name__; end
        return _hx_2
      end )() or (function() 
        local _hx_3
        if (_G.type(o) ~= "table") then 
        _hx_3 = false; else 
        _hx_3 = o.__ename__; end
        return _hx_3
      end )())) then 
      _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[field] ~= nil) or (field == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[field] ~= nil; else 
      _hx_1 = o[field] ~= nil; end
      return _hx_1
    end )()) then 
      do return String.prototype[k] end;
    else
      if (String.__oldindex ~= nil) then 
        if (_G.type(String.__oldindex) == "function") then 
          do return String.__oldindex(s, k) end;
        else
          if (_G.type(String.__oldindex) == "table") then 
            do return String.__oldindex[k] end;
          end;
        end;
        do return nil end;
      else
        do return nil end;
      end;
    end;
  end;
end
String.indexOfEmpty = function(s,startIndex) 
  local length = _G.string.len(s);
  if (startIndex < 0) then 
    startIndex = length + startIndex;
    if (startIndex < 0) then 
      startIndex = 0;
    end;
  end;
  if (startIndex > length) then 
    do return length end;
  else
    do return startIndex end;
  end;
end
String.fromCharCode = function(code) 
  do return _G.string.char(code) end;
end
String.prototype = _hx_e();
String.prototype.toUpperCase = function(self) 
  do return _G.string.upper(self) end
end
String.prototype.toLowerCase = function(self) 
  do return _G.string.lower(self) end
end
String.prototype.indexOf = function(self,str,startIndex) 
  if (startIndex == nil) then 
    startIndex = 1;
  else
    startIndex = startIndex + 1;
  end;
  if (str == "") then 
    do return String.indexOfEmpty(self, startIndex - 1) end;
  end;
  local r = _G.string.find(self, str, startIndex, true);
  if ((r ~= nil) and (r > 0)) then 
    do return r - 1 end;
  else
    do return -1 end;
  end;
end
String.prototype.lastIndexOf = function(self,str,startIndex) 
  local ret = -1;
  if (startIndex == nil) then 
    startIndex = #self;
  end;
  while (true) do _hx_do_first_1 = false;
    
    local p = String.prototype.indexOf(self, str, ret + 1);
    if (((p == -1) or (p > startIndex)) or (p == ret)) then 
      break;
    end;
    ret = p;
  end;
  do return ret end
end
String.prototype.split = function(self,delimiter) 
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  while (idx ~= nil) do _hx_do_first_1 = false;
    
    local newidx = 0;
    if (#delimiter > 0) then 
      newidx = _G.string.find(self, delimiter, idx, true);
    else
      if (idx >= #self) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      local match = _G.string.sub(self, idx, newidx - 1);
      ret:push(match);
      idx = newidx + #delimiter;
    else
      ret:push(_G.string.sub(self, idx, #self));
      idx = nil;
    end;
  end;
  do return ret end
end
String.prototype.toString = function(self) 
  do return self end
end
String.prototype.substring = function(self,startIndex,endIndex) 
  if (endIndex == nil) then 
    endIndex = #self;
  end;
  if (endIndex < 0) then 
    endIndex = 0;
  end;
  if (startIndex < 0) then 
    startIndex = 0;
  end;
  if (endIndex < startIndex) then 
    do return _G.string.sub(self, endIndex + 1, startIndex) end;
  else
    do return _G.string.sub(self, startIndex + 1, endIndex) end;
  end;
end
String.prototype.charAt = function(self,index) 
  do return _G.string.sub(self, index + 1, index + 1) end
end
String.prototype.charCodeAt = function(self,index) 
  do return _G.string.byte(self, index + 1) end
end
String.prototype.substr = function(self,pos,len) 
  if ((len == nil) or (len > (pos + #self))) then 
    len = #self;
  else
    if (len < 0) then 
      len = #self + len;
    end;
  end;
  if (pos < 0) then 
    pos = #self + pos;
  end;
  if (pos < 0) then 
    pos = 0;
  end;
  do return _G.string.sub(self, pos + 1, pos + len) end
end

String.prototype.__class__ =  String

Std.new = {}
Std.__name__ = "Std"
Std.string = function(s) 
  do return _hx_tostring(s, 0) end;
end
Std.int = function(x) 
  if (not Math.isFinite(x) or Math.isNaN(x)) then 
    do return 0 end;
  else
    do return _hx_bit_clamp(x) end;
  end;
end

Type.new = {}
Type.__name__ = "Type"
Type.getClass = function(o) 
  if (o == nil) then 
    do return nil end;
  end;
  local o = o;
  if (__lua_Boot.__instanceof(o, Array)) then 
    do return Array end;
  else
    if (__lua_Boot.__instanceof(o, String)) then 
      do return String end;
    else
      local cl = o.__class__;
      if (cl ~= nil) then 
        do return cl end;
      else
        do return nil end;
      end;
    end;
  end;
end
Type.getSuperClass = function(c) 
  do return c.__super__ end;
end
Type.createInstance = function(cl,args) 
  do return cl.new(_hx_table.unpack(args, 0)) end;
end

__haxe_Exception.new = function(message,previous,native) 
  local self = _hx_new(__haxe_Exception.prototype)
  __haxe_Exception.super(self,message,previous,native)
  return self
end
__haxe_Exception.super = function(self,message,previous,native) 
  self.__skipStack = 0;
  self.__exceptionMessage = message;
  self.__previousException = previous;
  if (native ~= nil) then 
    self.__nativeException = native;
    self.__nativeStack = __haxe_NativeStackTrace.exceptionStack();
  else
    self.__nativeException = self;
    self.__nativeStack = __haxe_NativeStackTrace.callStack();
    self.__skipStack = 1;
  end;
end
__haxe_Exception.__name__ = "haxe.Exception"
__haxe_Exception.caught = function(value) 
  if (__lua_Boot.__instanceof(value, __haxe_Exception)) then 
    do return value end;
  else
    do return __haxe_ValueException.new(value, nil, value) end;
  end;
end
__haxe_Exception.thrown = function(value) 
  if (__lua_Boot.__instanceof(value, __haxe_Exception)) then 
    do return value:get_native() end;
  else
    local e = __haxe_ValueException.new(value);
    e.__skipStack = e.__skipStack + 1;
    do return e end;
  end;
end
__haxe_Exception.prototype = _hx_e();
__haxe_Exception.prototype.unwrap = function(self) 
  do return self.__nativeException end
end
__haxe_Exception.prototype.toString = function(self) 
  do return self:get_message() end
end
__haxe_Exception.prototype.get_message = function(self) 
  do return self.__exceptionMessage end
end
__haxe_Exception.prototype.get_native = function(self) 
  do return self.__nativeException end
end

__haxe_Exception.prototype.__class__ =  __haxe_Exception

__haxe_Log.new = {}
__haxe_Log.__name__ = "haxe.Log"
__haxe_Log.formatOutput = function(v,infos) 
  local str = Std.string(v);
  if (infos == nil) then 
    do return str end;
  end;
  local pstr = Std.string(Std.string(infos.fileName) .. Std.string(":")) .. Std.string(infos.lineNumber);
  if (infos.customParams ~= nil) then 
    local _g = 0;
    local _g1 = infos.customParams;
    while (_g < _g1.length) do _hx_do_first_1 = false;
      
      local v = _g1[_g];
      _g = _g + 1;
      str = Std.string(str) .. Std.string((Std.string(", ") .. Std.string(Std.string(v))));
    end;
  end;
  do return Std.string(Std.string(pstr) .. Std.string(": ")) .. Std.string(str) end;
end
__haxe_Log.trace = function(v,infos) 
  local str = __haxe_Log.formatOutput(v, infos);
  _hx_print(str);
end

__haxe_NativeStackTrace.new = {}
__haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace"
__haxe_NativeStackTrace.saveStack = function(exception) 
end
__haxe_NativeStackTrace.callStack = function() 
  local _g = debug.traceback();
  if (_g == nil) then 
    do return _hx_tab_array({}, 0) end;
  else
    local s = _g;
    do return String.prototype.split(s, "\n"):slice(3) end;
  end;
end
__haxe_NativeStackTrace.exceptionStack = function() 
  do return _hx_tab_array({}, 0) end;
end

__haxe_ValueException.new = function(value,previous,native) 
  local self = _hx_new(__haxe_ValueException.prototype)
  __haxe_ValueException.super(self,value,previous,native)
  return self
end
__haxe_ValueException.super = function(self,value,previous,native) 
  __haxe_Exception.super(self,(function() 
    local _hx_1
    if (value == nil) then 
    _hx_1 = "null"; else 
    _hx_1 = Std.string(value); end
    return _hx_1
  end )(),previous,native);
  self.value = value;
end
__haxe_ValueException.__name__ = "haxe.ValueException"
__haxe_ValueException.prototype = _hx_e();
__haxe_ValueException.prototype.unwrap = function(self) 
  do return self.value end
end

__haxe_ValueException.prototype.__class__ =  __haxe_ValueException
__haxe_ValueException.__super__ = __haxe_Exception
setmetatable(__haxe_ValueException.prototype,{__index=__haxe_Exception.prototype})

__haxe_exceptions_PosException.new = function(message,previous,pos) 
  local self = _hx_new(__haxe_exceptions_PosException.prototype)
  __haxe_exceptions_PosException.super(self,message,previous,pos)
  return self
end
__haxe_exceptions_PosException.super = function(self,message,previous,pos) 
  __haxe_Exception.super(self,message,previous);
  if (pos == nil) then 
    self.posInfos = _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="(unknown)",lineNumber=0,className="(unknown)",methodName="(unknown)"});
  else
    self.posInfos = pos;
  end;
end
__haxe_exceptions_PosException.__name__ = "haxe.exceptions.PosException"
__haxe_exceptions_PosException.prototype = _hx_e();
__haxe_exceptions_PosException.prototype.toString = function(self) 
  do return Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string("") .. Std.string(__haxe_Exception.prototype.toString(self))) .. Std.string(" in ")) .. Std.string(self.posInfos.className)) .. Std.string(".")) .. Std.string(self.posInfos.methodName)) .. Std.string(" at ")) .. Std.string(self.posInfos.fileName)) .. Std.string(":")) .. Std.string(self.posInfos.lineNumber) end
end

__haxe_exceptions_PosException.prototype.__class__ =  __haxe_exceptions_PosException
__haxe_exceptions_PosException.__super__ = __haxe_Exception
setmetatable(__haxe_exceptions_PosException.prototype,{__index=__haxe_Exception.prototype})

__haxe_exceptions_NotImplementedException.new = function(message,previous,pos) 
  local self = _hx_new(__haxe_exceptions_NotImplementedException.prototype)
  __haxe_exceptions_NotImplementedException.super(self,message,previous,pos)
  return self
end
__haxe_exceptions_NotImplementedException.super = function(self,message,previous,pos) 
  if (message == nil) then 
    message = "Not implemented";
  end;
  __haxe_exceptions_PosException.super(self,message,previous,pos);
end
__haxe_exceptions_NotImplementedException.__name__ = "haxe.exceptions.NotImplementedException"
__haxe_exceptions_NotImplementedException.prototype = _hx_e();

__haxe_exceptions_NotImplementedException.prototype.__class__ =  __haxe_exceptions_NotImplementedException
__haxe_exceptions_NotImplementedException.__super__ = __haxe_exceptions_PosException
setmetatable(__haxe_exceptions_NotImplementedException.prototype,{__index=__haxe_exceptions_PosException.prototype})

__haxe_iterators_ArrayIterator.new = function(array) 
  local self = _hx_new(__haxe_iterators_ArrayIterator.prototype)
  __haxe_iterators_ArrayIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayIterator.super = function(self,array) 
  self.current = 0;
  self.array = array;
end
__haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator"
__haxe_iterators_ArrayIterator.prototype = _hx_e();
__haxe_iterators_ArrayIterator.prototype.hasNext = function(self) 
  do return self.current < self.array.length end
end
__haxe_iterators_ArrayIterator.prototype.next = function(self) 
  do return self.array[(function() 
  local _hx_obj = self;
  local _hx_fld = 'current';
  local _ = _hx_obj[_hx_fld];
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _;
   end)()] end
end

__haxe_iterators_ArrayIterator.prototype.__class__ =  __haxe_iterators_ArrayIterator

__haxe_iterators_ArrayKeyValueIterator.new = function(array) 
  local self = _hx_new(__haxe_iterators_ArrayKeyValueIterator.prototype)
  __haxe_iterators_ArrayKeyValueIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayKeyValueIterator.super = function(self,array) 
  self.array = array;
end
__haxe_iterators_ArrayKeyValueIterator.__name__ = "haxe.iterators.ArrayKeyValueIterator"
__haxe_iterators_ArrayKeyValueIterator.prototype = _hx_e();

__haxe_iterators_ArrayKeyValueIterator.prototype.__class__ =  __haxe_iterators_ArrayKeyValueIterator

__lua_Boot.new = {}
__lua_Boot.__name__ = "lua.Boot"
__lua_Boot.__instanceof = function(o,cl) 
  if (cl == nil) then 
    do return false end;
  end;
  local cl1 = cl;
  if (cl1) == Array then 
    do return __lua_Boot.isArray(o) end;
  elseif (cl1) == Bool then 
    do return _G.type(o) == "boolean" end;
  elseif (cl1) == Dynamic then 
    do return o ~= nil end;
  elseif (cl1) == Float then 
    do return _G.type(o) == "number" end;
  elseif (cl1) == Int then 
    if (_G.type(o) == "number") then 
      do return _hx_bit_clamp(o) == o end;
    else
      do return false end;
    end;
  elseif (cl1) == String then 
    do return _G.type(o) == "string" end;
  elseif (cl1) == _G.table then 
    do return _G.type(o) == "table" end;
  elseif (cl1) == __lua_Thread then 
    do return _G.type(o) == "thread" end;
  elseif (cl1) == __lua_UserData then 
    do return _G.type(o) == "userdata" end;else
  if (((o ~= nil) and (_G.type(o) == "table")) and (_G.type(cl) == "table")) then 
    local tmp;
    if (__lua_Boot.__instanceof(o, Array)) then 
      tmp = Array;
    else
      if (__lua_Boot.__instanceof(o, String)) then 
        tmp = String;
      else
        local cl = o.__class__;
        tmp = (function() 
          local _hx_1
          if (cl ~= nil) then 
          _hx_1 = cl; else 
          _hx_1 = nil; end
          return _hx_1
        end )();
      end;
    end;
    if (__lua_Boot.extendsOrImplements(tmp, cl)) then 
      do return true end;
    end;
    if ((function() 
      local _hx_2
      if (cl == Class) then 
      _hx_2 = o.__name__ ~= nil; else 
      _hx_2 = false; end
      return _hx_2
    end )()) then 
      do return true end;
    end;
    if ((function() 
      local _hx_3
      if (cl == Enum) then 
      _hx_3 = o.__ename__ ~= nil; else 
      _hx_3 = false; end
      return _hx_3
    end )()) then 
      do return true end;
    end;
    do return o.__enum__ == cl end;
  else
    do return false end;
  end; end;
end
__lua_Boot.isArray = function(o) 
  if (_G.type(o) == "table") then 
    if ((o.__enum__ == nil) and (_G.getmetatable(o) ~= nil)) then 
      do return _G.getmetatable(o).__index == Array.prototype end;
    else
      do return false end;
    end;
  else
    do return false end;
  end;
end
__lua_Boot.extendsOrImplements = function(cl1,cl2) 
  if ((cl1 == nil) or (cl2 == nil)) then 
    do return false end;
  else
    if (cl1 == cl2) then 
      do return true end;
    else
      if (cl1.__interfaces__ ~= nil) then 
        local intf = cl1.__interfaces__;
        local _g = 1;
        local _g1 = _hx_table.maxn(intf) + 1;
        while (_g < _g1) do _hx_do_first_1 = false;
          
          _g = _g + 1;
          local i = _g - 1;
          if (__lua_Boot.extendsOrImplements(intf[i], cl2)) then 
            do return true end;
          end;
        end;
      end;
    end;
  end;
  do return __lua_Boot.extendsOrImplements(cl1.__super__, cl2) end;
end

__lua_UserData.new = {}
__lua_UserData.__name__ = "lua.UserData"

__lua_PairTools.new = {}
__lua_PairTools.__name__ = "lua.PairTools"
__lua_PairTools.copy = function(table1) 
  local ret = ({});
  for k,v in _G.pairs(table1) do ret[k] = v end;
  do return ret end;
end

__lua_Thread.new = {}
__lua_Thread.__name__ = "lua.Thread"

__sunaba_core_BaseObject.new = function() 
  local self = _hx_new(__sunaba_core_BaseObject.prototype)
  __sunaba_core_BaseObject.super(self)
  return self
end
__sunaba_core_BaseObject.super = function(self) 
  self.instance = BaseObject.new();
  if (self.instance == nil) then 
    _G.error(__haxe_Exception.thrown("BaseObject.new() returned null"),0);
  end;
  self:pushToStack();
end
__sunaba_core_BaseObject.__name__ = "sunaba.core.BaseObject"
__sunaba_core_BaseObject.fromInstance = function(instance) 
  if (instance == nil) then 
    _G.error(__haxe_Exception.thrown("BaseObject.fromInstance() received null instance"),0);
  end;
  local obj = __sunaba_core_BaseObject.new();
  obj.instance = instance;
  do return obj end;
end
__sunaba_core_BaseObject.prototype = _hx_e();
__sunaba_core_BaseObject.prototype.pushToStack = function(self) 
  local stack = __sunaba_core_GlobalObjectStack.getSingleton().stack;
  stack:push(__sunaba_core_StackHandle.new(self));
end
__sunaba_core_BaseObject.prototype.onFree = function(self) 
end
__sunaba_core_BaseObject.prototype.free = function(self) 
  self.instance:free();
end

__sunaba_core_BaseObject.prototype.__class__ =  __sunaba_core_BaseObject

__sunaba_core__BaseObject_BaseObjectAbstract_Impl_.new = {}
__sunaba_core__BaseObject_BaseObjectAbstract_Impl_.__name__ = "sunaba.core._BaseObject.BaseObjectAbstract_Impl_"
__sunaba_core__BaseObject_BaseObjectAbstract_Impl_.fromBaseObject = function(obj) 
  do return __sunaba_core_BaseObject.fromInstance(obj.instance) end;
end
__sunaba_core__BaseObject_BaseObjectAbstract_Impl_.fromInstance = function(instance) 
  do return __sunaba_core_BaseObject.fromInstance(instance) end;
end

__sunaba_core__Basis_Basis_Impl_.new = {}
__sunaba_core__Basis_Basis_Impl_.__name__ = "sunaba.core._Basis.Basis_Impl_"
__sunaba_core__Basis_Basis_Impl_._new = function(x,y,z) 
  do return Basis.new(x, y, z) end;
end
__sunaba_core__Basis_Basis_Impl_.fieldRead = function(this1,name) 
  if (name == "toString") then 
    do return function() 
      local v = this1;
      do return v.tostring() end;
    end end;
  else
    local o = this1;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "function") and not ((function() 
        local _hx_2
        if (_G.type(o) ~= "table") then 
        _hx_2 = false; else 
        _hx_2 = o.__name__; end
        return _hx_2
      end )() or (function() 
        local _hx_3
        if (_G.type(o) ~= "table") then 
        _hx_3 = false; else 
        _hx_3 = o.__ename__; end
        return _hx_3
      end )())) then 
      _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[name] ~= nil) or (name == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[name] ~= nil; else 
      _hx_1 = o[name] ~= nil; end
      return _hx_1
    end )()) then 
      do return Reflect.field(this1, name) end;
    else
      _G.error(__haxe_Exception.thrown("Invalid field"),0);
    end;
  end;
end
__sunaba_core__Basis_Basis_Impl_.fieldWrite = function(this1,name,value) 
  local o = this1;
  if ((function() 
    local _hx_1
    if ((_G.type(o) == "function") and not ((function() 
      local _hx_2
      if (_G.type(o) ~= "table") then 
      _hx_2 = false; else 
      _hx_2 = o.__name__; end
      return _hx_2
    end )() or (function() 
      local _hx_3
      if (_G.type(o) ~= "table") then 
      _hx_3 = false; else 
      _hx_3 = o.__ename__; end
      return _hx_3
    end )())) then 
    _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[name] ~= nil) or (name == "length"))) then 
    _hx_1 = true; elseif (o.__fields__ ~= nil) then 
    _hx_1 = o.__fields__[name] ~= nil; else 
    _hx_1 = o[name] ~= nil; end
    return _hx_1
  end )()) then 
    this1[name] = value;
  else
    _G.error(__haxe_Exception.thrown("Invalid field"),0);
  end;
end
__sunaba_core__Basis_Basis_Impl_.arrayRead = function(this1,n) 
  local rowsTable = this1.rows;
  if (n == 0) then 
    do return rowsTable[0] end;
  else
    if (n == 1) then 
      do return rowsTable[1] end;
    else
      if (n == 2) then 
        do return rowsTable[2] end;
      else
        if (n == "x") then 
          do return rowsTable[0] end;
        else
          if (n == "y") then 
            do return rowsTable[1] end;
          else
            if (n == "z") then 
              do return rowsTable[2] end;
            else
              _G.error(__haxe_Exception.thrown("Invalid index"),0);
            end;
          end;
        end;
      end;
    end;
  end;
end
__sunaba_core__Basis_Basis_Impl_.arrayWrite = function(this1,n,value) 
  local rowsTable = this1.rows;
  if (n == 0) then 
    rowsTable[0] = value;
  else
    if (n == 1) then 
      rowsTable[1] = value;
    else
      if (n == 2) then 
        rowsTable[2] = value;
      else
        if (n == "x") then 
          rowsTable[0] = value;
        else
          if (n == "y") then 
            rowsTable[1] = value;
          else
            if (n == "z") then 
              rowsTable[2] = value;
            else
              _G.error(__haxe_Exception.thrown("Invalid index"),0);
            end;
          end;
        end;
      end;
    end;
  end;
end
__sunaba_core__Basis_Basis_Impl_.add = function(this1,rhs) 
  local lhs = this1;
  do return lhs + rhs end;
end
__sunaba_core__Basis_Basis_Impl_.sub = function(this1,rhs) 
  local lhs = this1;
  do return lhs - rhs end;
end
__sunaba_core__Basis_Basis_Impl_.mul = function(this1,rhs) 
  local lhs = this1;
  do return lhs * rhs end;
end
__sunaba_core__Basis_Basis_Impl_.div = function(this1,rhs) 
  local lhs = this1;
  do return lhs / rhs end;
end
__sunaba_core__Basis_Basis_Impl_.mod = function(this1,rhs) 
  local lhs = this1;
  do return lhs % rhs end;
end
__sunaba_core__Basis_Basis_Impl_.eq = function(this1,rhs) 
  local lhs = this1;
  do return lhs == rhs end;
end
__sunaba_core__Basis_Basis_Impl_.neq = function(this1,rhs) 
  local lhs = this1;
  do return lhs ~= rhs end;
end
__sunaba_core__Basis_Basis_Impl_.lt = function(this1,rhs) 
  local lhs = this1;
  do return lhs < rhs end;
end
__sunaba_core__Basis_Basis_Impl_.lte = function(this1,rhs) 
  local lhs = this1;
  do return lhs <= rhs end;
end
__sunaba_core__Basis_Basis_Impl_.gt = function(this1,rhs) 
  local lhs = this1;
  do return lhs > rhs end;
end
__sunaba_core__Basis_Basis_Impl_.gte = function(this1,rhs) 
  local lhs = this1;
  do return lhs >= rhs end;
end
__sunaba_core__Basis_Basis_Impl_.toString = function(v) 
  do return v.tostring() end;
end

__sunaba_core_Component.new = function() 
  local self = _hx_new(__sunaba_core_Component.prototype)
  __sunaba_core_Component.super(self)
  return self
end
__sunaba_core_Component.super = function(self) 
  __sunaba_core_BaseObject.super(self);
  self.instance:free();
  self.instance = Component.new();
  if (self.instance == nil) then 
    _G.error(__haxe_Exception.thrown("Component.new() returned null"),0);
  end;
  local type = Type.getClass(self);
  if (type == nil) then 
    _G.error(__haxe_Exception.thrown("Behavior must be a class"),0);
  end;
  self:get_compInstance():setScriptType(type);
  self:get_compInstance():setScriptInstance(self);
  self:pushToStack();
end
__sunaba_core_Component.__name__ = "sunaba.core.Component"
__sunaba_core_Component.fromInstance = function(instance) 
  if (instance == nil) then 
    _G.error(__haxe_Exception.thrown("Component.fromInstance() received null instance"),0);
  end;
  local obj = __sunaba_core_Component.new();
  obj.instance = instance;
  do return obj end;
end
__sunaba_core_Component.prototype = _hx_e();
__sunaba_core_Component.prototype.getComponent_sunaba_spatial_SpatialTransform = function(self,type,entity) 
  if (entity == nil) then 
    entity = self:get_entity();
    __haxe_Log.trace("Entity is null, using this.component.entity", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="sunaba/core/Component.hx",lineNumber=91,className="sunaba.core.Component",methodName="getComponent"}));
  end;
  local behaviorType = type;
  if (__sunaba_core_ObjectUtils.typeInheritsFrom(type, __sunaba_core_Component)) then 
    local behavior = entity:getComponent(behaviorType);
    if (behavior ~= nil) then 
      local tBehavior = behavior;
      if (tBehavior ~= nil) then 
        do return tBehavior end;
      end;
    end;
  end;
  do return nil end
end
__sunaba_core_Component.prototype.get_compInstance = function(self) 
  do return self.instance end
end
__sunaba_core_Component.prototype.get_entity = function(self) 
  do return __sunaba_core_Entity.fromInstance(self:get_compInstance().entity) end
end
__sunaba_core_Component.prototype.get_scene = function(self) 
  do return __sunaba_core_Scene.fromInstance(self:get_compInstance().scene) end
end
__sunaba_core_Component.prototype.init = function(self) 
  self:onInit();
end
__sunaba_core_Component.prototype.ready = function(self) 
  self:onReady();
end
__sunaba_core_Component.prototype.update = function(self,deltaTime) 
  self:onUpdate(deltaTime);
end
__sunaba_core_Component.prototype.physicsUpdate = function(self,delatTime) 
  self:onPhysicsUpdate(delatTime);
end
__sunaba_core_Component.prototype.onInit = function(self) 
end
__sunaba_core_Component.prototype.onReady = function(self) 
end
__sunaba_core_Component.prototype.onUpdate = function(self,deltaTime) 
end
__sunaba_core_Component.prototype.onPhysicsUpdate = function(self,delatTime) 
end
__sunaba_core_Component.prototype.getComponentNG = function(self,type,entity) 
  if (entity == nil) then 
    entity = self:get_entity();
  end;
  local compType = type;
  if (compType ~= nil) then 
    local component = entity:getComponent(compType);
    if (component ~= nil) then 
      do return component end;
    end;
  end;
  do return nil end
end
__sunaba_core_Component.prototype.addComponentNG = function(self,type,entity) 
  if (entity == nil) then 
    entity = self:get_entity();
  end;
  local compType = type;
  if (compType ~= nil) then 
    local component = Type.createInstance(compType, _hx_tab_array({}, 0));
    entity:addComponent(component, compType.__name__);
    do return component end;
  end;
  _G.error(__haxe_Exception.thrown("Invalid Component"),0);
end
__sunaba_core_Component.prototype.removeComponent = function(self,type,entity) 
  if (entity == nil) then 
    entity = self:get_entity();
  end;
  local compType = type;
  if (compType ~= nil) then 
    local component = entity:getComponent(compType);
    if (component ~= nil) then 
      entity:removeComponent(component);
    end;
  end;
end

__sunaba_core_Component.prototype.__class__ =  __sunaba_core_Component
__sunaba_core_Component.__super__ = __sunaba_core_BaseObject
setmetatable(__sunaba_core_Component.prototype,{__index=__sunaba_core_BaseObject.prototype})

__sunaba_core__Component_ComponentAbstract_Impl_.new = {}
__sunaba_core__Component_ComponentAbstract_Impl_.__name__ = "sunaba.core._Component.ComponentAbstract_Impl_"
__sunaba_core__Component_ComponentAbstract_Impl_.fromBaseObject = function(obj) 
  do return __sunaba_core_Component.fromInstance(obj.instance) end;
end
__sunaba_core__Component_ComponentAbstract_Impl_.fromInstance = function(instance) 
  do return __sunaba_core_Component.fromInstance(instance) end;
end

__sunaba_core_Entity.new = function() 
  local self = _hx_new(__sunaba_core_Entity.prototype)
  __sunaba_core_Entity.super(self)
  return self
end
__sunaba_core_Entity.super = function(self) 
  __sunaba_core_BaseObject.super(self);
  self.instance:free();
  self.instance = Entity.new();
  if (self.instance == nil) then 
    _G.error(__haxe_Exception.thrown("Entity.new() returned null"),0);
  end;
  self:pushToStack();
  self.entInstance = self.instance;
end
__sunaba_core_Entity.__name__ = "sunaba.core.Entity"
__sunaba_core_Entity.fromInstance = function(instance) 
  if (instance == nil) then 
    _G.error(__haxe_Exception.thrown("Entity.fromInstance() received null instance"),0);
  end;
  local obj = __sunaba_core_Entity.new();
  obj.instance = instance;
  do return obj end;
end
__sunaba_core_Entity.prototype = _hx_e();
__sunaba_core_Entity.prototype.get_entInstance = function(self) 
  do return self.instance end
end
__sunaba_core_Entity.prototype.get_name = function(self) 
  do return self:get_entInstance().name end
end
__sunaba_core_Entity.prototype.set_name = function(self,value) 
  self:get_entInstance().name = value;
  do return value end
end
__sunaba_core_Entity.prototype.addComponent = function(self,comp,name) 
  self:get_entInstance():addComponent(comp:get_compInstance(), name);
end
__sunaba_core_Entity.prototype.hasComponent = function(self,comp) 
  do return self:get_entInstance():hasComponent(comp) end
end
__sunaba_core_Entity.prototype.hasComponentByName = function(self,name) 
  do return self:get_entInstance():hasComponentByName(name) end
end
__sunaba_core_Entity.prototype.removeComponent = function(self,comp) 
  self:get_entInstance():removeComponent(comp:get_compInstance());
end
__sunaba_core_Entity.prototype.getComponent = function(self,type) 
  do return self:get_entInstance():getUserComponent(type) end
end
__sunaba_core_Entity.prototype.getComponentByName = function(self,name) 
  do return self:get_entInstance():getComponentByName(name) end
end
__sunaba_core_Entity.prototype.getComponentsByType = function(self,type) 
  local result = self:get_entInstance():getUserComponentsByType(type);
  local length = nil;
  local tab = __lua_PairTools.copy(result);
  local length = length;
  if (length == nil) then 
    length = _hx_table.maxn(tab);
    if (length > 0) then 
      local head = tab[1];
      _G.table.remove(tab, 1);
      tab[0] = head;
      do return _hx_tab_array(tab, length) end;
    else
      do return _hx_tab_array({}, 0) end;
    end;
  else
    do return _hx_tab_array(tab, length) end;
  end;
end
__sunaba_core_Entity.prototype.addChild = function(self,child) 
  self:get_entInstance():addChild(child:get_entInstance());
end
__sunaba_core_Entity.prototype.removeChild = function(self,child) 
  self:get_entInstance():removeChild(child:get_entInstance());
end
__sunaba_core_Entity.prototype.hasChild = function(self,child) 
  do return self:get_entInstance():hasChild(child:get_entInstance()) end
end
__sunaba_core_Entity.prototype.find = function(self,path) 
  do return __sunaba_core_Entity.fromInstance(self:get_entInstance():find(path)) end
end
__sunaba_core_Entity.prototype.getChildCount = function(self) 
  do return self:get_entInstance():getChildCount() end
end
__sunaba_core_Entity.prototype.getChild = function(self,index) 
  do return __sunaba_core_Entity.fromInstance(self:get_entInstance():getChild(index)) end
end

__sunaba_core_Entity.prototype.__class__ =  __sunaba_core_Entity
__sunaba_core_Entity.__super__ = __sunaba_core_BaseObject
setmetatable(__sunaba_core_Entity.prototype,{__index=__sunaba_core_BaseObject.prototype})

__sunaba_core__Entity_EntityAbstract_Impl_.new = {}
__sunaba_core__Entity_EntityAbstract_Impl_.__name__ = "sunaba.core._Entity.EntityAbstract_Impl_"
__sunaba_core__Entity_EntityAbstract_Impl_.fromBaseObject = function(obj) 
  do return __sunaba_core_Entity.fromInstance(obj.instance) end;
end
__sunaba_core__Entity_EntityAbstract_Impl_.fromInstance = function(instance) 
  do return __sunaba_core_Entity.fromInstance(instance) end;
end

__sunaba_core_GlobalObjectStack.new = function() 
  local self = _hx_new(__sunaba_core_GlobalObjectStack.prototype)
  __sunaba_core_GlobalObjectStack.super(self)
  return self
end
__sunaba_core_GlobalObjectStack.super = function(self) 
  self.stack = _hx_tab_array({}, 0);
end
__sunaba_core_GlobalObjectStack.__name__ = "sunaba.core.GlobalObjectStack"
__sunaba_core_GlobalObjectStack.getSingleton = function() 
  local gos = _G.globalObjectStack;
  if (gos == nil) then 
    __sunaba_core_GlobalObjectStack.initSingleton();
    gos = _G.globalObjectStack;
    if (gos == nil) then 
      _G.error(__haxe_Exception.thrown("GlobalObjectStack is not initialized"),0);
    end;
  end;
  do return gos end;
end
__sunaba_core_GlobalObjectStack.initSingleton = function() 
  local singleton = __sunaba_core_GlobalObjectStack.new();
  _G.globalObjectStack = singleton;
end
__sunaba_core_GlobalObjectStack.prototype = _hx_e();

__sunaba_core_GlobalObjectStack.prototype.__class__ =  __sunaba_core_GlobalObjectStack

__sunaba_core_ObjectUtils.new = {}
__sunaba_core_ObjectUtils.__name__ = "sunaba.core.ObjectUtils"
__sunaba_core_ObjectUtils.getName = function(object) 
  do return object.__name end;
end
__sunaba_core_ObjectUtils.typeInheritsFrom = function(type1,type2) 
  local type1Name = type1.__name;
  if (type1Name == nil) then 
    type1Name = type1.__name__;
    if (type1Name == nil) then 
      do return false end;
    end;
  end;
  local type2Name = type2.__name;
  if (type2Name == nil) then 
    type2Name = type2.__name__;
    if (type2Name == nil) then 
      do return false end;
    end;
  end;
  if (type1Name == type2Name) then 
    do return true end;
  end;
  local type1Super = Type.getSuperClass(type1);
  while (type1Super ~= nil) do _hx_do_first_1 = false;
    
    if (type1Super == type2) then 
      do return true end;
    end;
    type1Super = Type.getSuperClass(type1Super);
    if (type1Super == nil) then 
      break;
    end;
  end;
  do return false end;
end

__sunaba_core__Quaternion_Quaternion_Impl_.new = {}
__sunaba_core__Quaternion_Quaternion_Impl_.__name__ = "sunaba.core._Quaternion.Quaternion_Impl_"
__sunaba_core__Quaternion_Quaternion_Impl_._new = function(x,y,z,w) 
  if (w == nil) then 
    w = 0;
  end;
  if (z == nil) then 
    z = 0;
  end;
  if (y == nil) then 
    y = 0;
  end;
  if (x == nil) then 
    x = 0;
  end;
  do return Quaternion.new(x, y, z, w) end;
end
__sunaba_core__Quaternion_Quaternion_Impl_.fieldRead = function(this1,name) 
  if (name == "toString") then 
    do return function() 
      local v = this1;
      do return v.tostring() end;
    end end;
  else
    local o = this1;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "function") and not ((function() 
        local _hx_2
        if (_G.type(o) ~= "table") then 
        _hx_2 = false; else 
        _hx_2 = o.__name__; end
        return _hx_2
      end )() or (function() 
        local _hx_3
        if (_G.type(o) ~= "table") then 
        _hx_3 = false; else 
        _hx_3 = o.__ename__; end
        return _hx_3
      end )())) then 
      _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[name] ~= nil) or (name == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[name] ~= nil; else 
      _hx_1 = o[name] ~= nil; end
      return _hx_1
    end )()) then 
      do return Reflect.field(this1, name) end;
    else
      _G.error(__haxe_Exception.thrown("Invalid field"),0);
    end;
  end;
end
__sunaba_core__Quaternion_Quaternion_Impl_.fieldWrite = function(this1,name,value) 
  local o = this1;
  if ((function() 
    local _hx_1
    if ((_G.type(o) == "function") and not ((function() 
      local _hx_2
      if (_G.type(o) ~= "table") then 
      _hx_2 = false; else 
      _hx_2 = o.__name__; end
      return _hx_2
    end )() or (function() 
      local _hx_3
      if (_G.type(o) ~= "table") then 
      _hx_3 = false; else 
      _hx_3 = o.__ename__; end
      return _hx_3
    end )())) then 
    _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[name] ~= nil) or (name == "length"))) then 
    _hx_1 = true; elseif (o.__fields__ ~= nil) then 
    _hx_1 = o.__fields__[name] ~= nil; else 
    _hx_1 = o[name] ~= nil; end
    return _hx_1
  end )()) then 
    this1[name] = value;
  else
    _G.error(__haxe_Exception.thrown("Invalid field"),0);
  end;
end
__sunaba_core__Quaternion_Quaternion_Impl_.arrayRead = function(this1,n) 
  if (n == 0) then 
    do return this1.x end;
  end;
  if (n == 1) then 
    do return this1.y end;
  end;
  if (n == 2) then 
    do return this1.z end;
  end;
  if (n == "x") then 
    do return this1.x end;
  end;
  if (n == "y") then 
    do return this1.y end;
  end;
  if (n == "z") then 
    do return this1.z end;
  end;
  if (n == "w") then 
    do return this1.w end;
  end;
  _G.error(__haxe_Exception.thrown("Invalid index"),0);
end
__sunaba_core__Quaternion_Quaternion_Impl_.arrayWrite = function(this1,n,value) 
  if (n == 0) then 
    this1.x = value;
  else
    if (n == 1) then 
      this1.y = value;
    else
      if (n == 2) then 
        this1.z = value;
      else
        if (n == "x") then 
          this1.x = value;
        else
          if (n == "y") then 
            this1.y = value;
          else
            if (n == "z") then 
              this1.z = value;
            else
              if (n == "w") then 
                this1.w = value;
              else
                _G.error(__haxe_Exception.thrown("Invalid index"),0);
              end;
            end;
          end;
        end;
      end;
    end;
  end;
end
__sunaba_core__Quaternion_Quaternion_Impl_.add = function(this1,rhs) 
  local lhs = this1;
  do return lhs + rhs end;
end
__sunaba_core__Quaternion_Quaternion_Impl_.sub = function(this1,rhs) 
  local lhs = this1;
  do return lhs - rhs end;
end
__sunaba_core__Quaternion_Quaternion_Impl_.mul = function(this1,rhs) 
  local lhs = this1;
  do return lhs * rhs end;
end
__sunaba_core__Quaternion_Quaternion_Impl_.div = function(this1,rhs) 
  local lhs = this1;
  do return lhs / rhs end;
end
__sunaba_core__Quaternion_Quaternion_Impl_.mod = function(this1,rhs) 
  local lhs = this1;
  do return lhs % rhs end;
end
__sunaba_core__Quaternion_Quaternion_Impl_.eq = function(this1,rhs) 
  local lhs = this1;
  do return lhs == rhs end;
end
__sunaba_core__Quaternion_Quaternion_Impl_.neq = function(this1,rhs) 
  local lhs = this1;
  do return lhs ~= rhs end;
end
__sunaba_core__Quaternion_Quaternion_Impl_.lt = function(this1,rhs) 
  local lhs = this1;
  do return lhs < rhs end;
end
__sunaba_core__Quaternion_Quaternion_Impl_.lte = function(this1,rhs) 
  local lhs = this1;
  do return lhs <= rhs end;
end
__sunaba_core__Quaternion_Quaternion_Impl_.gt = function(this1,rhs) 
  local lhs = this1;
  do return lhs > rhs end;
end
__sunaba_core__Quaternion_Quaternion_Impl_.gte = function(this1,rhs) 
  local lhs = this1;
  do return lhs >= rhs end;
end
__sunaba_core__Quaternion_Quaternion_Impl_.toString = function(v) 
  do return v.tostring() end;
end

__sunaba_core_Scene.new = function() 
  local self = _hx_new(__sunaba_core_Scene.prototype)
  __sunaba_core_Scene.super(self)
  return self
end
__sunaba_core_Scene.super = function(self) 
  __sunaba_core_BaseObject.super(self);
  self.instance:free();
  self.instance = createScene();
  if (self.instance == nil) then 
    _G.error(__haxe_Exception.thrown("Scene.new() returned null"),0);
  end;
  self:pushToStack();
end
__sunaba_core_Scene.__name__ = "sunaba.core.Scene"
__sunaba_core_Scene.fromInstance = function(instance) 
  if (instance == nil) then 
    _G.error(__haxe_Exception.thrown("Scene.fromInstance() received null instance"),0);
  end;
  local obj = __sunaba_core_Scene.new();
  obj.instance = instance;
  do return obj end;
end
__sunaba_core_Scene.prototype = _hx_e();
__sunaba_core_Scene.prototype.get_scnInstance = function(self) 
  do return self.instance end
end
__sunaba_core_Scene.prototype.addEntity = function(self,ent) 
  self:get_scnInstance():addEntity(ent:get_entInstance());
end
__sunaba_core_Scene.prototype.removeEntity = function(self,ent) 
  self:get_scnInstance():removeEntity(ent:get_entInstance());
end
__sunaba_core_Scene.prototype.hasEntity = function(self,ent) 
  do return self:get_scnInstance():hasEntity(ent:get_entInstance()) end
end
__sunaba_core_Scene.prototype.getEntityCount = function(self) 
  do return self:get_scnInstance():getEntityCount() end
end
__sunaba_core_Scene.prototype.find = function(self,path) 
  do return __sunaba_core_Entity.fromInstance(self:get_scnInstance():find(path)) end
end
__sunaba_core_Scene.prototype.getEntity = function(self,index) 
  do return __sunaba_core_Entity.fromInstance(self:get_scnInstance():getEntity(index)) end
end

__sunaba_core_Scene.prototype.__class__ =  __sunaba_core_Scene
__sunaba_core_Scene.__super__ = __sunaba_core_BaseObject
setmetatable(__sunaba_core_Scene.prototype,{__index=__sunaba_core_BaseObject.prototype})

__sunaba_core__Scene_SceneAbstract_Impl_.new = {}
__sunaba_core__Scene_SceneAbstract_Impl_.__name__ = "sunaba.core._Scene.SceneAbstract_Impl_"
__sunaba_core__Scene_SceneAbstract_Impl_.fromObj = function(scene) 
  do return __sunaba_core_Scene.fromInstance(scene.instance) end;
end
__sunaba_core__Scene_SceneAbstract_Impl_.fromInstance = function(instance) 
  do return __sunaba_core_Scene.fromInstance(instance) end;
end

__sunaba_core_StackHandle.new = function(object) 
  local self = _hx_new(__sunaba_core_StackHandle.prototype)
  __sunaba_core_StackHandle.super(self,object)
  return self
end
__sunaba_core_StackHandle.super = function(self,object) 
  self.object = object;
end
__sunaba_core_StackHandle.__name__ = "sunaba.core.StackHandle"
__sunaba_core_StackHandle.prototype = _hx_e();

__sunaba_core_StackHandle.prototype.__class__ =  __sunaba_core_StackHandle

__sunaba_core__Vector2_Vector2_Impl_.new = {}
__sunaba_core__Vector2_Vector2_Impl_.__name__ = "sunaba.core._Vector2.Vector2_Impl_"
__sunaba_core__Vector2_Vector2_Impl_._new = function(x,y) 
  if (y == nil) then 
    y = 0;
  end;
  if (x == nil) then 
    x = 0;
  end;
  do return Vector2.new(x, y) end;
end
__sunaba_core__Vector2_Vector2_Impl_.fieldRead = function(this1,name) 
  if (name == "toString") then 
    do return function() 
      local v = this1;
      do return Std.string(Std.string(Std.string(Std.string("(") .. Std.string(v.x)) .. Std.string(", ")) .. Std.string(v.y)) .. Std.string(")") end;
    end end;
  else
    local o = this1;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "function") and not ((function() 
        local _hx_2
        if (_G.type(o) ~= "table") then 
        _hx_2 = false; else 
        _hx_2 = o.__name__; end
        return _hx_2
      end )() or (function() 
        local _hx_3
        if (_G.type(o) ~= "table") then 
        _hx_3 = false; else 
        _hx_3 = o.__ename__; end
        return _hx_3
      end )())) then 
      _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[name] ~= nil) or (name == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[name] ~= nil; else 
      _hx_1 = o[name] ~= nil; end
      return _hx_1
    end )()) then 
      do return Reflect.field(this1, name) end;
    else
      _G.error(__haxe_Exception.thrown("Invalid field"),0);
    end;
  end;
end
__sunaba_core__Vector2_Vector2_Impl_.fieldWrite = function(this1,name,value) 
  local o = this1;
  if ((function() 
    local _hx_1
    if ((_G.type(o) == "function") and not ((function() 
      local _hx_2
      if (_G.type(o) ~= "table") then 
      _hx_2 = false; else 
      _hx_2 = o.__name__; end
      return _hx_2
    end )() or (function() 
      local _hx_3
      if (_G.type(o) ~= "table") then 
      _hx_3 = false; else 
      _hx_3 = o.__ename__; end
      return _hx_3
    end )())) then 
    _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[name] ~= nil) or (name == "length"))) then 
    _hx_1 = true; elseif (o.__fields__ ~= nil) then 
    _hx_1 = o.__fields__[name] ~= nil; else 
    _hx_1 = o[name] ~= nil; end
    return _hx_1
  end )()) then 
    this1[name] = value;
  else
    _G.error(__haxe_Exception.thrown("Invalid field"),0);
  end;
end
__sunaba_core__Vector2_Vector2_Impl_.arrayRead = function(this1,n) 
  if (n == 0) then 
    do return this1.x end;
  end;
  if (n == 1) then 
    do return this1.y end;
  end;
  if (n == "x") then 
    do return this1.x end;
  end;
  if (n == "y") then 
    do return this1.y end;
  end;
  _G.error(__haxe_Exception.thrown("Invalid index"),0);
end
__sunaba_core__Vector2_Vector2_Impl_.arrayWrite = function(this1,n,value) 
  if (n == 0) then 
    this1.x = value;
  else
    if (n == 1) then 
      this1.y = value;
    else
      if (n == "x") then 
        this1.x = value;
      else
        if (n == "y") then 
          this1.y = value;
        else
          _G.error(__haxe_Exception.thrown("Invalid index"),0);
        end;
      end;
    end;
  end;
end
__sunaba_core__Vector2_Vector2_Impl_.add = function(this1,rhs) 
  local lhs = this1;
  do return lhs + rhs end;
end
__sunaba_core__Vector2_Vector2_Impl_.sub = function(this1,rhs) 
  local lhs = this1;
  do return lhs - rhs end;
end
__sunaba_core__Vector2_Vector2_Impl_.mul = function(this1,rhs) 
  local lhs = this1;
  do return lhs * rhs end;
end
__sunaba_core__Vector2_Vector2_Impl_.div = function(this1,rhs) 
  local lhs = this1;
  do return lhs / rhs end;
end
__sunaba_core__Vector2_Vector2_Impl_.mod = function(this1,rhs) 
  local lhs = this1;
  do return lhs % rhs end;
end
__sunaba_core__Vector2_Vector2_Impl_.eq = function(this1,rhs) 
  local lhs = this1;
  do return lhs == rhs end;
end
__sunaba_core__Vector2_Vector2_Impl_.neq = function(this1,rhs) 
  local lhs = this1;
  do return lhs ~= rhs end;
end
__sunaba_core__Vector2_Vector2_Impl_.lt = function(this1,rhs) 
  local lhs = this1;
  do return lhs < rhs end;
end
__sunaba_core__Vector2_Vector2_Impl_.lte = function(this1,rhs) 
  local lhs = this1;
  do return lhs <= rhs end;
end
__sunaba_core__Vector2_Vector2_Impl_.gt = function(this1,rhs) 
  local lhs = this1;
  do return lhs > rhs end;
end
__sunaba_core__Vector2_Vector2_Impl_.gte = function(this1,rhs) 
  local lhs = this1;
  do return lhs >= rhs end;
end
__sunaba_core__Vector2_Vector2_Impl_.toString = function(v) 
  do return v.tostring() end;
end

__sunaba_core__Vector3_Vector3_Impl_.new = {}
__sunaba_core__Vector3_Vector3_Impl_.__name__ = "sunaba.core._Vector3.Vector3_Impl_"
__sunaba_core__Vector3_Vector3_Impl_._new = function(x,y,z) 
  if (z == nil) then 
    z = 0;
  end;
  if (y == nil) then 
    y = 0;
  end;
  if (x == nil) then 
    x = 0;
  end;
  do return Vector3.new(x, y, z) end;
end
__sunaba_core__Vector3_Vector3_Impl_.fieldRead = function(this1,name) 
  if (name == "toString") then 
    do return function() 
      local v = this1;
      do return Std.string(Std.string(Std.string(Std.string(Std.string(Std.string("(") .. Std.string(v.x)) .. Std.string(", ")) .. Std.string(v.y)) .. Std.string(", ")) .. Std.string(v.z)) .. Std.string(")") end;
    end end;
  else
    local o = this1;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "function") and not ((function() 
        local _hx_2
        if (_G.type(o) ~= "table") then 
        _hx_2 = false; else 
        _hx_2 = o.__name__; end
        return _hx_2
      end )() or (function() 
        local _hx_3
        if (_G.type(o) ~= "table") then 
        _hx_3 = false; else 
        _hx_3 = o.__ename__; end
        return _hx_3
      end )())) then 
      _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[name] ~= nil) or (name == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[name] ~= nil; else 
      _hx_1 = o[name] ~= nil; end
      return _hx_1
    end )()) then 
      do return Reflect.field(this1, name) end;
    else
      _G.error(__haxe_Exception.thrown("Invalid field"),0);
    end;
  end;
end
__sunaba_core__Vector3_Vector3_Impl_.fieldWrite = function(this1,name,value) 
  local o = this1;
  if ((function() 
    local _hx_1
    if ((_G.type(o) == "function") and not ((function() 
      local _hx_2
      if (_G.type(o) ~= "table") then 
      _hx_2 = false; else 
      _hx_2 = o.__name__; end
      return _hx_2
    end )() or (function() 
      local _hx_3
      if (_G.type(o) ~= "table") then 
      _hx_3 = false; else 
      _hx_3 = o.__ename__; end
      return _hx_3
    end )())) then 
    _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[name] ~= nil) or (name == "length"))) then 
    _hx_1 = true; elseif (o.__fields__ ~= nil) then 
    _hx_1 = o.__fields__[name] ~= nil; else 
    _hx_1 = o[name] ~= nil; end
    return _hx_1
  end )()) then 
    this1[name] = value;
  else
    _G.error(__haxe_Exception.thrown("Invalid field"),0);
  end;
end
__sunaba_core__Vector3_Vector3_Impl_.arrayRead = function(this1,n) 
  if (n == 0) then 
    do return this1.x end;
  end;
  if (n == 1) then 
    do return this1.y end;
  end;
  if (n == 2) then 
    do return this1.z end;
  end;
  if (n == "x") then 
    do return this1.x end;
  end;
  if (n == "y") then 
    do return this1.y end;
  end;
  if (n == "z") then 
    do return this1.z end;
  end;
  _G.error(__haxe_Exception.thrown("Invalid index"),0);
end
__sunaba_core__Vector3_Vector3_Impl_.arrayWrite = function(this1,n,value) 
  if (n == 0) then 
    this1.x = value;
  else
    if (n == 1) then 
      this1.y = value;
    else
      if (n == 2) then 
        this1.z = value;
      else
        if (n == "x") then 
          this1.x = value;
        else
          if (n == "y") then 
            this1.y = value;
          else
            if (n == "z") then 
              this1.z = value;
            else
              _G.error(__haxe_Exception.thrown("Invalid index"),0);
            end;
          end;
        end;
      end;
    end;
  end;
end
__sunaba_core__Vector3_Vector3_Impl_.add = function(this1,rhs) 
  local lhs = this1;
  do return lhs + rhs end;
end
__sunaba_core__Vector3_Vector3_Impl_.sub = function(this1,rhs) 
  local lhs = this1;
  do return lhs - rhs end;
end
__sunaba_core__Vector3_Vector3_Impl_.mul = function(this1,rhs) 
  local lhs = this1;
  do return lhs * rhs end;
end
__sunaba_core__Vector3_Vector3_Impl_.div = function(this1,rhs) 
  local lhs = this1;
  do return lhs / rhs end;
end
__sunaba_core__Vector3_Vector3_Impl_.mod = function(this1,rhs) 
  local lhs = this1;
  do return lhs % rhs end;
end
__sunaba_core__Vector3_Vector3_Impl_.eq = function(this1,rhs) 
  local lhs = this1;
  do return lhs == rhs end;
end
__sunaba_core__Vector3_Vector3_Impl_.neq = function(this1,rhs) 
  local lhs = this1;
  do return lhs ~= rhs end;
end
__sunaba_core__Vector3_Vector3_Impl_.lt = function(this1,rhs) 
  local lhs = this1;
  do return lhs < rhs end;
end
__sunaba_core__Vector3_Vector3_Impl_.lte = function(this1,rhs) 
  local lhs = this1;
  do return lhs <= rhs end;
end
__sunaba_core__Vector3_Vector3_Impl_.gt = function(this1,rhs) 
  local lhs = this1;
  do return lhs > rhs end;
end
__sunaba_core__Vector3_Vector3_Impl_.gte = function(this1,rhs) 
  local lhs = this1;
  do return lhs >= rhs end;
end
__sunaba_core__Vector3_Vector3_Impl_.toString = function(v) 
  do return v.tostring() end;
end

IGeometryInstance.new = function() 
  local self = _hx_new(IGeometryInstance.prototype)
  IGeometryInstance.super(self)
  return self
end
IGeometryInstance.super = function(self) 
  IVisualInstance.super(self);
end
IGeometryInstance.__name__ = "IGeometryInstance"
IGeometryInstance.prototype = _hx_e();

IGeometryInstance.prototype.__class__ =  IGeometryInstance
IGeometryInstance.__super__ = IVisualInstance
setmetatable(IGeometryInstance.prototype,{__index=IVisualInstance.prototype})

__sunaba_spatial_Camera.new = function() 
  local self = _hx_new(__sunaba_spatial_Camera.prototype)
  __sunaba_spatial_Camera.super(self)
  return self
end
__sunaba_spatial_Camera.super = function(self) 
  __sunaba_core_Component.super(self);
  self.instance:free();
  self.instance = Camera.new();
  if (self.instance == nil) then 
    _G.error(__haxe_Exception.thrown("Camera.new() returned null"),0);
  end;
  self:get_cameraInstance():setScriptInstance(self);
  self:pushToStack();
end
__sunaba_spatial_Camera.__name__ = "sunaba.spatial.Camera"
__sunaba_spatial_Camera.fromInstance = function(instance) 
  if (instance == nil) then 
    _G.error(__haxe_Exception.thrown("Camera.fromInstance() received null instance"),0);
  end;
  local obj = __sunaba_spatial_Camera.new();
  obj.instance = instance;
  do return obj end;
end
__sunaba_spatial_Camera.getFromEntity = function(entity) 
  do return __sunaba_spatial_Camera.fromInstance(Camera.getFromEntity(entity:get_entInstance())) end;
end
__sunaba_spatial_Camera.prototype = _hx_e();
__sunaba_spatial_Camera.prototype.get_cameraInstance = function(self) 
  do return self.instance end
end
__sunaba_spatial_Camera.prototype.get_cullMask = function(self) 
  do return self:get_cameraInstance().cullMask end
end
__sunaba_spatial_Camera.prototype.set_cullMask = function(self,value) 
  self:get_cameraInstance().cullMask = value;
  do return value end
end
__sunaba_spatial_Camera.prototype.get_current = function(self) 
  do return self:get_cameraInstance().current end
end
__sunaba_spatial_Camera.prototype.set_current = function(self,value) 
  self:get_cameraInstance().current = value;
  do return value end
end
__sunaba_spatial_Camera.prototype.get_dopplerTracking = function(self) 
  do return self:get_cameraInstance().dopplerTracking end
end
__sunaba_spatial_Camera.prototype.set_dopplerTracking = function(self,value) 
  self:get_cameraInstance().dopplerTracking = value;
  do return value end
end
__sunaba_spatial_Camera.prototype.get_far = function(self) 
  do return self:get_cameraInstance().far end
end
__sunaba_spatial_Camera.prototype.set_far = function(self,value) 
  self:get_cameraInstance().far = value;
  do return value end
end
__sunaba_spatial_Camera.prototype.get_fov = function(self) 
  do return self:get_cameraInstance().fov end
end
__sunaba_spatial_Camera.prototype.set_fov = function(self,value) 
  self:get_cameraInstance().fov = value;
  do return value end
end
__sunaba_spatial_Camera.prototype.get_frustumOffset = function(self) 
  do return self:get_cameraInstance().frustumOffset end
end
__sunaba_spatial_Camera.prototype.set_frustumOffset = function(self,value) 
  self:get_cameraInstance().frustumOffset = value;
  do return value end
end
__sunaba_spatial_Camera.prototype.get_hOffset = function(self) 
  do return self:get_cameraInstance().hOffset end
end
__sunaba_spatial_Camera.prototype.set_hOffset = function(self,value) 
  self:get_cameraInstance().hOffset = value;
  do return value end
end
__sunaba_spatial_Camera.prototype.get_keepAspect = function(self) 
  do return self:get_cameraInstance().keepAspect end
end
__sunaba_spatial_Camera.prototype.set_keepAspect = function(self,value) 
  self:get_cameraInstance().keepAspect = value;
  do return value end
end
__sunaba_spatial_Camera.prototype.get_near = function(self) 
  do return self:get_cameraInstance().near end
end
__sunaba_spatial_Camera.prototype.set_near = function(self,value) 
  self:get_cameraInstance().near = value;
  do return value end
end
__sunaba_spatial_Camera.prototype.get_projection = function(self) 
  do return self:get_cameraInstance().projection end
end
__sunaba_spatial_Camera.prototype.set_projection = function(self,value) 
  self:get_cameraInstance().projection = value;
  do return value end
end
__sunaba_spatial_Camera.prototype.get_size = function(self) 
  do return self:get_cameraInstance().size end
end
__sunaba_spatial_Camera.prototype.set_size = function(self,value) 
  self:get_cameraInstance().size = value;
  do return value end
end
__sunaba_spatial_Camera.prototype.get_vOffset = function(self) 
  do return self:get_cameraInstance().vOffset end
end
__sunaba_spatial_Camera.prototype.set_vOffset = function(self,value) 
  self:get_cameraInstance().vOffset = value;
  do return value end
end
__sunaba_spatial_Camera.prototype.clearCurrent = function(self) 
  self:get_cameraInstance():clearCurrent();
end
__sunaba_spatial_Camera.prototype.getCullMaskValue = function(self,index) 
  do return self:get_cameraInstance():getCullMaskValue(index) end
end
__sunaba_spatial_Camera.prototype.isPositionBehind = function(self,position) 
  do return self:get_cameraInstance():isPositionBehind(position) end
end
__sunaba_spatial_Camera.prototype.makeCurrent = function(self) 
  self:get_cameraInstance():makeCurrent();
end
__sunaba_spatial_Camera.prototype.projectLocalRayNormal = function(self,screenPoint) 
  do return self:get_cameraInstance():projectLocalRayNormal(screenPoint) end
end
__sunaba_spatial_Camera.prototype.projectPosition = function(self,screenPoint,zDepth) 
  do return self:get_cameraInstance():projectPosition(screenPoint, zDepth) end
end
__sunaba_spatial_Camera.prototype.projectRayNormal = function(self,screenPoint) 
  do return self:get_cameraInstance():projectRayNormal(screenPoint) end
end
__sunaba_spatial_Camera.prototype.projectRayOrigin = function(self,screenPoint) 
  do return self:get_cameraInstance():projectRayOrigin(screenPoint) end
end
__sunaba_spatial_Camera.prototype.setCullMaskValue = function(self,index,value) 
  self:get_cameraInstance():setCullMaskValue(index, value);
end
__sunaba_spatial_Camera.prototype.setFrustum = function(self,size,offset,zNear,zFar) 
  self:get_cameraInstance():setFrustum(size, offset, zNear, zFar);
end
__sunaba_spatial_Camera.prototype.setOrthagonal = function(self,size,zNear,zFar) 
  self:get_cameraInstance():setOrthagonal(size, zNear, zFar);
end
__sunaba_spatial_Camera.prototype.setPerspective = function(self,fov,zNear,zFar) 
  self:get_cameraInstance():setPerspective(fov, zNear, zFar);
end
__sunaba_spatial_Camera.prototype.unprojectPosition = function(self,position) 
  do return self:get_cameraInstance():unprojectPosition(position) end
end

__sunaba_spatial_Camera.prototype.__class__ =  __sunaba_spatial_Camera
__sunaba_spatial_Camera.__super__ = __sunaba_core_Component
setmetatable(__sunaba_spatial_Camera.prototype,{__index=__sunaba_core_Component.prototype})

__sunaba_spatial__Camera_CameraAbstract_Impl_.new = {}
__sunaba_spatial__Camera_CameraAbstract_Impl_.__name__ = "sunaba.spatial._Camera.CameraAbstract_Impl_"
__sunaba_spatial__Camera_CameraAbstract_Impl_.fromBaseObject = function(obj) 
  do return __sunaba_spatial_Camera.fromInstance(obj.instance) end;
end
__sunaba_spatial__Camera_CameraAbstract_Impl_.fromInstance = function(instance) 
  do return __sunaba_spatial_Camera.fromInstance(instance) end;
end

__sunaba_spatial_IVisualInstance.new = function() 
  local self = _hx_new(__sunaba_spatial_IVisualInstance.prototype)
  __sunaba_spatial_IVisualInstance.super(self)
  return self
end
__sunaba_spatial_IVisualInstance.super = function(self) 
  __sunaba_core_Component.super(self);
  self.instance:free();
  self.instance = IVisualInstance.new();
  if (self.instance == nil) then 
    _G.error(__haxe_Exception.thrown("IVisualInstance.new() returned null"),0);
  end;
  self:get_iviInstance():setScriptInstance(self);
  self:pushToStack();
end
__sunaba_spatial_IVisualInstance.__name__ = "sunaba.spatial.IVisualInstance"
__sunaba_spatial_IVisualInstance.fromInstance = function(instance) 
  if (instance == nil) then 
    _G.error(__haxe_Exception.thrown("IVisualInstance.fromInstance() received null instance"),0);
  end;
  local obj = __sunaba_spatial_IVisualInstance.new();
  obj.instance = instance;
  do return obj end;
end
__sunaba_spatial_IVisualInstance.prototype = _hx_e();
__sunaba_spatial_IVisualInstance.prototype.get_iviInstance = function(self) 
  do return self.instance end
end
__sunaba_spatial_IVisualInstance.prototype.get_layerMask = function(self) 
  do return self:get_iviInstance().layerMask end
end
__sunaba_spatial_IVisualInstance.prototype.set_layerMask = function(self,value) 
  self:get_iviInstance().layerMask = value;
  do return value end
end
__sunaba_spatial_IVisualInstance.prototype.get_sortingOffset = function(self) 
  do return self:get_iviInstance().sortingOffset end
end
__sunaba_spatial_IVisualInstance.prototype.set_sortingOffset = function(self,value) 
  self:get_iviInstance().sortingOffset = value;
  do return value end
end
__sunaba_spatial_IVisualInstance.prototype.get_sortingUseAabbCenter = function(self) 
  do return self:get_iviInstance().sortingUseAabbCenter end
end
__sunaba_spatial_IVisualInstance.prototype.set_sortingUseAabbCenter = function(self,value) 
  self:get_iviInstance().sortingUseAabbCenter = value;
  do return value end
end
__sunaba_spatial_IVisualInstance.prototype.getLayerMaskValue = function(self,layer) 
  do return self:get_iviInstance():getLayerMaskValue(layer) end
end
__sunaba_spatial_IVisualInstance.prototype.setLayerMaskValue = function(self,layer,value) 
  self:get_iviInstance():setLayerMaskValue(layer, value);
end

__sunaba_spatial_IVisualInstance.prototype.__class__ =  __sunaba_spatial_IVisualInstance
__sunaba_spatial_IVisualInstance.__super__ = __sunaba_core_Component
setmetatable(__sunaba_spatial_IVisualInstance.prototype,{__index=__sunaba_core_Component.prototype})

__sunaba_spatial_IGeometryInstance.new = function() 
  local self = _hx_new(__sunaba_spatial_IGeometryInstance.prototype)
  __sunaba_spatial_IGeometryInstance.super(self)
  return self
end
__sunaba_spatial_IGeometryInstance.super = function(self) 
  __sunaba_spatial_IVisualInstance.super(self);
  self.instance:free();
  self.instance = IGeometryInstance.new();
  if (self.instance == nil) then 
    _G.error(__haxe_Exception.thrown("IGeometryInstance.new() returned null"),0);
  end;
  self:get_igiInstance():setScriptInstance(self);
  self:pushToStack();
end
__sunaba_spatial_IGeometryInstance.__name__ = "sunaba.spatial.IGeometryInstance"
__sunaba_spatial_IGeometryInstance.fromInstance = function(instance) 
  if (instance == nil) then 
    _G.error(__haxe_Exception.thrown("IGeometryInstance.fromInstance() received null instance"),0);
  end;
  local obj = __sunaba_spatial_IGeometryInstance.new();
  obj.instance = instance;
  do return obj end;
end
__sunaba_spatial_IGeometryInstance.prototype = _hx_e();
__sunaba_spatial_IGeometryInstance.prototype.get_igiInstance = function(self) 
  do return self.instance end
end
__sunaba_spatial_IGeometryInstance.prototype.get_castShadow = function(self) 
  do return self:get_igiInstance().castShadow end
end
__sunaba_spatial_IGeometryInstance.prototype.set_castShadow = function(self,value) 
  self:get_igiInstance().castShadow = value;
  do return value end
end
__sunaba_spatial_IGeometryInstance.prototype.get_giMode = function(self) 
  do return self:get_igiInstance().giMode end
end
__sunaba_spatial_IGeometryInstance.prototype.set_giMode = function(self,value) 
  self:get_igiInstance().giMode = value;
  do return value end
end
__sunaba_spatial_IGeometryInstance.prototype.get_lightmapScale = function(self) 
  do return self:get_igiInstance().lightmapScale end
end
__sunaba_spatial_IGeometryInstance.prototype.set_lightmapScale = function(self,value) 
  self:get_igiInstance().lightmapScale = value;
  do return value end
end
__sunaba_spatial_IGeometryInstance.prototype.get_lodBias = function(self) 
  do return self:get_igiInstance().lodBias end
end
__sunaba_spatial_IGeometryInstance.prototype.set_lodBias = function(self,value) 
  self:get_igiInstance().lodBias = value;
  do return value end
end
__sunaba_spatial_IGeometryInstance.prototype.get_transparancy = function(self) 
  do return self:get_igiInstance().transparancy end
end
__sunaba_spatial_IGeometryInstance.prototype.set_transparancy = function(self,value) 
  self:get_igiInstance().transparancy = value;
  do return value end
end
__sunaba_spatial_IGeometryInstance.prototype.get_visibilityRangeBegin = function(self) 
  do return self:get_igiInstance().visibilityRangeBegin end
end
__sunaba_spatial_IGeometryInstance.prototype.set_visibilityRangeBegin = function(self,value) 
  self:get_igiInstance().visibilityRangeBegin = value;
  do return value end
end
__sunaba_spatial_IGeometryInstance.prototype.get_visibilityRangeEnd = function(self) 
  do return self:get_igiInstance().visibilityRangeEnd end
end
__sunaba_spatial_IGeometryInstance.prototype.set_visibilityRangeEnd = function(self,value) 
  self:get_igiInstance().visibilityRangeEnd = value;
  do return value end
end
__sunaba_spatial_IGeometryInstance.prototype.get_visibilityRangeBeginMargin = function(self) 
  do return self:get_igiInstance().visibilityRangeBeginMargin end
end
__sunaba_spatial_IGeometryInstance.prototype.set_visibilityRangeBeginMargin = function(self,value) 
  self:get_igiInstance().visibilityRangeBeginMargin = value;
  do return value end
end
__sunaba_spatial_IGeometryInstance.prototype.get_visibilityRangeEndMargin = function(self) 
  do return self:get_igiInstance().visibilityRangeEndMargin end
end
__sunaba_spatial_IGeometryInstance.prototype.set_visibilityRangeEndMargin = function(self,value) 
  self:get_igiInstance().visibilityRangeEndMargin = value;
  do return value end
end
__sunaba_spatial_IGeometryInstance.prototype.get_visibilityRangeFadeMode = function(self) 
  do return self:get_igiInstance().visibilityRangeFadeMode end
end
__sunaba_spatial_IGeometryInstance.prototype.set_visibilityRangeFadeMode = function(self,value) 
  self:get_igiInstance().visibilityRangeFadeMode = value;
  do return value end
end

__sunaba_spatial_IGeometryInstance.prototype.__class__ =  __sunaba_spatial_IGeometryInstance
__sunaba_spatial_IGeometryInstance.__super__ = __sunaba_spatial_IVisualInstance
setmetatable(__sunaba_spatial_IGeometryInstance.prototype,{__index=__sunaba_spatial_IVisualInstance.prototype})

__sunaba_spatial__IGeometryInstance_IGeometryInstanceAbstract_Impl_.new = {}
__sunaba_spatial__IGeometryInstance_IGeometryInstanceAbstract_Impl_.__name__ = "sunaba.spatial._IGeometryInstance.IGeometryInstanceAbstract_Impl_"
__sunaba_spatial__IGeometryInstance_IGeometryInstanceAbstract_Impl_.fromBaseObject = function(obj) 
  do return __sunaba_spatial_IGeometryInstance.fromInstance(obj.instance) end;
end
__sunaba_spatial__IGeometryInstance_IGeometryInstanceAbstract_Impl_.fromInstance = function(instance) 
  do return __sunaba_spatial_IGeometryInstance.fromInstance(instance) end;
end

__sunaba_spatial__IVisualInstance_IVisualInstanceAbstract_Impl_.new = {}
__sunaba_spatial__IVisualInstance_IVisualInstanceAbstract_Impl_.__name__ = "sunaba.spatial._IVisualInstance.IVisualInstanceAbstract_Impl_"
__sunaba_spatial__IVisualInstance_IVisualInstanceAbstract_Impl_.fromBaseObject = function(ivs) 
  do return ivs end;
end
__sunaba_spatial__IVisualInstance_IVisualInstanceAbstract_Impl_.fromInstance = function(instance) 
  do return __sunaba_spatial_IVisualInstance.fromInstance(instance) end;
end

__sunaba_spatial_SpatialTransform.new = function() 
  local self = _hx_new(__sunaba_spatial_SpatialTransform.prototype)
  __sunaba_spatial_SpatialTransform.super(self)
  return self
end
__sunaba_spatial_SpatialTransform.super = function(self) 
  __sunaba_core_Component.super(self);
  self.instance:free();
  self.instance = SpatialTransform.new();
  if (self.instance == nil) then 
    _G.error(__haxe_Exception.thrown("SpatialTransform.new() returned null"),0);
  end;
  self:get_stInstance():setScriptInstance(self);
  self:pushToStack();
end
__sunaba_spatial_SpatialTransform.__name__ = "sunaba.spatial.SpatialTransform"
__sunaba_spatial_SpatialTransform.fromInstance = function(instance) 
  if (instance == nil) then 
    _G.error(__haxe_Exception.thrown("SpatialTransform.fromInstance() received null instance"),0);
  end;
  local obj = __sunaba_spatial_SpatialTransform.new();
  obj.instance = instance;
  do return obj end;
end
__sunaba_spatial_SpatialTransform.prototype = _hx_e();
__sunaba_spatial_SpatialTransform.prototype.get_stInstance = function(self) 
  do return self.instance end
end
__sunaba_spatial_SpatialTransform.prototype.get_basis = function(self) 
  do return self:get_stInstance().basis end
end
__sunaba_spatial_SpatialTransform.prototype.set_basis = function(self,value) 
  self:get_stInstance().basis = value;
  do return value end
end
__sunaba_spatial_SpatialTransform.prototype.get_position = function(self) 
  do return self:get_stInstance().position end
end
__sunaba_spatial_SpatialTransform.prototype.set_position = function(self,value) 
  self:get_stInstance().position = value;
  do return value end
end
__sunaba_spatial_SpatialTransform.prototype.get_rotation = function(self) 
  do return self:get_stInstance().rotation end
end
__sunaba_spatial_SpatialTransform.prototype.set_rotation = function(self,value) 
  self:get_stInstance().rotation = value;
  do return value end
end
__sunaba_spatial_SpatialTransform.prototype.get_rotationDegrees = function(self) 
  do return self:get_stInstance().rotationDegrees end
end
__sunaba_spatial_SpatialTransform.prototype.set_rotationDegrees = function(self,value) 
  self:get_stInstance().rotationDegrees = value;
  do return value end
end
__sunaba_spatial_SpatialTransform.prototype.get_scale = function(self) 
  do return self:get_stInstance().scale end
end
__sunaba_spatial_SpatialTransform.prototype.set_scale = function(self,value) 
  self:get_stInstance().scale = value;
  do return value end
end
__sunaba_spatial_SpatialTransform.prototype.get_quaternion = function(self) 
  do return self:get_stInstance().quaternion end
end
__sunaba_spatial_SpatialTransform.prototype.set_quaternion = function(self,value) 
  self:get_stInstance().quaternion = value;
  do return value end
end
__sunaba_spatial_SpatialTransform.prototype.get_rotationOrder = function(self) 
  do return self:get_stInstance().rotationOrder end
end
__sunaba_spatial_SpatialTransform.prototype.set_rotationOrder = function(self,value) 
  self:get_stInstance().rotationOrder = value;
  do return value end
end
__sunaba_spatial_SpatialTransform.prototype.get_globalPosition = function(self) 
  do return self:get_stInstance().globalPosition end
end
__sunaba_spatial_SpatialTransform.prototype.set_globalPosition = function(self,pos) 
  self:get_stInstance().globalPosition = pos;
  do return pos end
end
__sunaba_spatial_SpatialTransform.prototype.get_globalRotation = function(self) 
  do return self:get_stInstance().globalRotation end
end
__sunaba_spatial_SpatialTransform.prototype.set_globalRotation = function(self,rot) 
  self:get_stInstance().globalRotation = rot;
  do return rot end
end
__sunaba_spatial_SpatialTransform.prototype.get_globalRotationDegrees = function(self) 
  do return self:get_stInstance().globalRotationDegrees end
end
__sunaba_spatial_SpatialTransform.prototype.set_globalRotationDegrees = function(self,rot) 
  self:get_stInstance().globalRotationDegrees = rot;
  do return rot end
end
__sunaba_spatial_SpatialTransform.prototype.get_globalBasis = function(self) 
  do return self:get_stInstance().globalBasis end
end
__sunaba_spatial_SpatialTransform.prototype.set_globalBasis = function(self,basis) 
  self:get_stInstance().globalBasis = basis;
  do return basis end
end
__sunaba_spatial_SpatialTransform.prototype.get_global = function(self) 
  do return self:get_stInstance().global end
end
__sunaba_spatial_SpatialTransform.prototype.set_global = function(self,value) 
  self:get_stInstance().global = value;
  do return value end
end
__sunaba_spatial_SpatialTransform.prototype.get_local = function(self) 
  do return self:get_stInstance()["local"] end
end
__sunaba_spatial_SpatialTransform.prototype.set_local = function(self,value) 
  self:get_stInstance()["local"] = value;
  do return value end
end
__sunaba_spatial_SpatialTransform.prototype.isTopLevel = function(self) 
  do return self:get_stInstance():isTopLevel() end
end
__sunaba_spatial_SpatialTransform.prototype.forceUpdate = function(self) 
  self:get_stInstance():forceUpdate();
end
__sunaba_spatial_SpatialTransform.prototype.getParent = function(self) 
  do return __sunaba_spatial_SpatialTransform.fromInstance(self:get_stInstance():getParent()) end
end
__sunaba_spatial_SpatialTransform.prototype.globalRotate = function(self,axis,angle) 
  self:get_stInstance():globalRotate(axis, angle);
end
__sunaba_spatial_SpatialTransform.prototype.globalTranslate = function(self,translation) 
  self:get_stInstance():globalTranslate(translation);
end
__sunaba_spatial_SpatialTransform.prototype.globalScale = function(self,scale) 
  self:get_stInstance():globalScale(scale);
end
__sunaba_spatial_SpatialTransform.prototype.hide = function(self) 
  self:get_stInstance():hide();
end
__sunaba_spatial_SpatialTransform.prototype.isScaleDisabled = function(self) 
  do return self:get_stInstance():isScaleDisabled() end
end
__sunaba_spatial_SpatialTransform.prototype.isVisible = function(self) 
  do return self:get_stInstance():isVisible() end
end
__sunaba_spatial_SpatialTransform.prototype.lookAt = function(self,target,up,useModelFront) 
  if (useModelFront == nil) then 
    useModelFront = false;
  end;
  self:get_stInstance():lookAt(target, up, useModelFront);
end
__sunaba_spatial_SpatialTransform.prototype.lookAtFromPosition = function(self,position,target,up,useModelFront) 
  if (useModelFront == nil) then 
    useModelFront = false;
  end;
  self:get_stInstance():lookAtFromPosition(position, target, up, useModelFront);
end
__sunaba_spatial_SpatialTransform.prototype.orthonormalize = function(self) 
  self:get_stInstance():orthonormalize();
end
__sunaba_spatial_SpatialTransform.prototype.rotate = function(self,axis,angle) 
  self:get_stInstance():rotate(axis, angle);
end
__sunaba_spatial_SpatialTransform.prototype.rotateObjectLocal = function(self,axis,angle) 
  self:get_stInstance():rotateObjectLocal(axis, angle);
end
__sunaba_spatial_SpatialTransform.prototype.rotateX = function(self,angle) 
  self:get_stInstance():rotateX(angle);
end
__sunaba_spatial_SpatialTransform.prototype.rotateY = function(self,angle) 
  self:get_stInstance():rotateY(angle);
end
__sunaba_spatial_SpatialTransform.prototype.rotateZ = function(self,angle) 
  self:get_stInstance():rotateZ(angle);
end
__sunaba_spatial_SpatialTransform.prototype.scaleObjectLocal = function(self,scale) 
  self:get_stInstance():scaleObjectLocal(scale);
end
__sunaba_spatial_SpatialTransform.prototype.setDisableScale = function(self,disable) 
  self:get_stInstance():setDisableScale(disable);
end
__sunaba_spatial_SpatialTransform.prototype.setIdentity = function(self) 
  self:get_stInstance():setIdentity();
end
__sunaba_spatial_SpatialTransform.prototype.show = function(self) 
  self:get_stInstance():show();
end
__sunaba_spatial_SpatialTransform.prototype.toGlobal = function(self,position) 
  do return self:get_stInstance():toGlobal(position) end
end
__sunaba_spatial_SpatialTransform.prototype.toLocal = function(self,position) 
  do return self:get_stInstance():toLocal(position) end
end
__sunaba_spatial_SpatialTransform.prototype.translate = function(self,offset) 
  self:get_stInstance():translate(offset);
end
__sunaba_spatial_SpatialTransform.prototype.translateObjectLocal = function(self,offset) 
  self:get_stInstance():translateObjectLocal(offset);
end

__sunaba_spatial_SpatialTransform.prototype.__class__ =  __sunaba_spatial_SpatialTransform
__sunaba_spatial_SpatialTransform.__super__ = __sunaba_core_Component
setmetatable(__sunaba_spatial_SpatialTransform.prototype,{__index=__sunaba_core_Component.prototype})

__sunaba_spatial__SpatialTransform_SpatialTransformAbstract_Impl_.new = {}
__sunaba_spatial__SpatialTransform_SpatialTransformAbstract_Impl_.__name__ = "sunaba.spatial._SpatialTransform.SpatialTransformAbstract_Impl_"
__sunaba_spatial__SpatialTransform_SpatialTransformAbstract_Impl_.fromBaseObject = function(baseObj) 
  do return __sunaba_spatial_SpatialTransform.fromInstance(baseObj.instance) end;
end
__sunaba_spatial__SpatialTransform_SpatialTransformAbstract_Impl_.fromInstance = function(instance) 
  do return __sunaba_spatial_SpatialTransform.fromInstance(instance) end;
end

__sunaba_spatial_mesh_Box.new = function() 
  local self = _hx_new(__sunaba_spatial_mesh_Box.prototype)
  __sunaba_spatial_mesh_Box.super(self)
  return self
end
__sunaba_spatial_mesh_Box.super = function(self) 
  __sunaba_core_Component.super(self);
  self.instance:free();
  self.instance = Box.new();
  if (self.instance == nil) then 
    _G.error(__haxe_Exception.thrown("Box.new() returned null"),0);
  end;
  self:get_boxInstance():setScriptInstance(self);
  self:pushToStack();
end
__sunaba_spatial_mesh_Box.__name__ = "sunaba.spatial.mesh.Box"
__sunaba_spatial_mesh_Box.fromInstance = function(instance) 
  if (instance == nil) then 
    _G.error(__haxe_Exception.thrown("Box.fromInstance() received null instance"),0);
  end;
  local obj = __sunaba_spatial_mesh_Box.new();
  obj.instance = instance;
  do return obj end;
end
__sunaba_spatial_mesh_Box.prototype = _hx_e();
__sunaba_spatial_mesh_Box.prototype.get_boxInstance = function(self) 
  do return self.instance end
end
__sunaba_spatial_mesh_Box.prototype.get_size = function(self) 
  do return self:get_boxInstance().size end
end
__sunaba_spatial_mesh_Box.prototype.set_size = function(self,value) 
  self:get_boxInstance().size = value;
  do return value end
end
__sunaba_spatial_mesh_Box.prototype.get_subdivideDepth = function(self) 
  do return self:get_boxInstance().subdivideDepth end
end
__sunaba_spatial_mesh_Box.prototype.set_subdivideDepth = function(self,value) 
  self:get_boxInstance().subdivideDepth = value;
  do return value end
end
__sunaba_spatial_mesh_Box.prototype.get_subdivideWidth = function(self) 
  do return self:get_boxInstance().subdivideWidth end
end
__sunaba_spatial_mesh_Box.prototype.set_subdivideWidth = function(self,value) 
  self:get_boxInstance().subdivideWidth = value;
  do return value end
end
__sunaba_spatial_mesh_Box.prototype.get_subdivideHeight = function(self) 
  do return self:get_boxInstance().subdivideHeight end
end
__sunaba_spatial_mesh_Box.prototype.set_subdivideHeight = function(self,value) 
  self:get_boxInstance().subdivideHeight = value;
  do return value end
end

__sunaba_spatial_mesh_Box.prototype.__class__ =  __sunaba_spatial_mesh_Box
__sunaba_spatial_mesh_Box.__super__ = __sunaba_core_Component
setmetatable(__sunaba_spatial_mesh_Box.prototype,{__index=__sunaba_core_Component.prototype})

__sunaba_spatial_mesh__Box_BoxAbstract_Impl_.new = {}
__sunaba_spatial_mesh__Box_BoxAbstract_Impl_.__name__ = "sunaba.spatial.mesh._Box.BoxAbstract_Impl_"
__sunaba_spatial_mesh__Box_BoxAbstract_Impl_.fromBaseObject = function(obj) 
  do return __sunaba_spatial_mesh_Box.fromInstance(obj.instance) end;
end
__sunaba_spatial_mesh__Box_BoxAbstract_Impl_.fromComponent = function(comp) 
  do return __sunaba_spatial_mesh_Box.fromInstance(comp.instance) end;
end

__sunaba_spatial_mesh_MeshRenderer.new = function() 
  local self = _hx_new(__sunaba_spatial_mesh_MeshRenderer.prototype)
  __sunaba_spatial_mesh_MeshRenderer.super(self)
  return self
end
__sunaba_spatial_mesh_MeshRenderer.super = function(self) 
  __sunaba_spatial_IGeometryInstance.super(self);
  self.instance:free();
  self.instance = MeshRenderer.new();
  if (self.instance == nil) then 
    _G.error(__haxe_Exception.thrown("MeshRenderer.new() returned null"),0);
  end;
  self:get_mrInstance():setScriptInstance(self);
  self:pushToStack();
end
__sunaba_spatial_mesh_MeshRenderer.__name__ = "sunaba.spatial.mesh.MeshRenderer"
__sunaba_spatial_mesh_MeshRenderer.fromInstance = function(instance) 
  if (instance == nil) then 
    _G.error(__haxe_Exception.thrown("MeshRenderer.fromInstance() received null instance"),0);
  end;
  local obj = __sunaba_spatial_mesh_MeshRenderer.new();
  obj.instance = instance;
  do return obj end;
end
__sunaba_spatial_mesh_MeshRenderer.prototype = _hx_e();
__sunaba_spatial_mesh_MeshRenderer.prototype.get_mrInstance = function(self) 
  do return self.instance end
end
__sunaba_spatial_mesh_MeshRenderer.prototype.createConvexCollision = function(self) 
  self:get_mrInstance():createConvexCollision();
end
__sunaba_spatial_mesh_MeshRenderer.prototype.createDebugTangents = function(self) 
  self:get_mrInstance():createDebugTangents();
end
__sunaba_spatial_mesh_MeshRenderer.prototype.createTrimeshCollision = function(self) 
  self:get_mrInstance():createTrimeshCollision();
end
__sunaba_spatial_mesh_MeshRenderer.prototype.findBlendShapeByName = function(self,name) 
  do return self:get_mrInstance():findBlendShapeByName(name) end
end
__sunaba_spatial_mesh_MeshRenderer.prototype.getBlendShapeCount = function(self) 
  do return self:get_mrInstance():getBlendShapeCount() end
end
__sunaba_spatial_mesh_MeshRenderer.prototype.getBlendShapeValue = function(self,index) 
  do return self:get_mrInstance():getBlendShapeValue(index) end
end
__sunaba_spatial_mesh_MeshRenderer.prototype.getSurfaceOverrideCount = function(self) 
  do return self:get_mrInstance():getSurfaceOverrideCount() end
end
__sunaba_spatial_mesh_MeshRenderer.prototype.setBlendShapeValue = function(self,index,value) 
  self:get_mrInstance():setBlendShapeValue(index, value);
end

__sunaba_spatial_mesh_MeshRenderer.prototype.__class__ =  __sunaba_spatial_mesh_MeshRenderer
__sunaba_spatial_mesh_MeshRenderer.__super__ = __sunaba_spatial_IGeometryInstance
setmetatable(__sunaba_spatial_mesh_MeshRenderer.prototype,{__index=__sunaba_spatial_IGeometryInstance.prototype})

__sunaba_spatial_mesh__MeshRenderer_MeshRendererAbstract_Impl_.new = {}
__sunaba_spatial_mesh__MeshRenderer_MeshRendererAbstract_Impl_.__name__ = "sunaba.spatial.mesh._MeshRenderer.MeshRendererAbstract_Impl_"
__sunaba_spatial_mesh__MeshRenderer_MeshRendererAbstract_Impl_.fromBaseObject = function(obj) 
  do return __sunaba_spatial_mesh_MeshRenderer.fromInstance(obj.instance) end;
end
__sunaba_spatial_mesh__MeshRenderer_MeshRendererAbstract_Impl_.fromInstance = function(instance) 
  do return __sunaba_spatial_mesh_MeshRenderer.fromInstance(instance) end;
end

__support_files_test3_src_RotateComponent.new = function() 
  local self = _hx_new(__support_files_test3_src_RotateComponent.prototype)
  __support_files_test3_src_RotateComponent.super(self)
  return self
end
__support_files_test3_src_RotateComponent.super = function(self) 
  __sunaba_core_Component.super(self);
end
__support_files_test3_src_RotateComponent.__name__ = "support_files.test3.src.RotateComponent"
__support_files_test3_src_RotateComponent.prototype = _hx_e();
__support_files_test3_src_RotateComponent.prototype.onInit = function(self) 
  self.transform = self:getComponent_sunaba_spatial_SpatialTransform(__sunaba_spatial_SpatialTransform);
end
__support_files_test3_src_RotateComponent.prototype.onUpdate = function(self,deltaTime) 
  local rotation = -0.5 * deltaTime;
  self.transform:rotateY(rotation);
end

__support_files_test3_src_RotateComponent.prototype.__class__ =  __support_files_test3_src_RotateComponent
__support_files_test3_src_RotateComponent.__super__ = __sunaba_core_Component
setmetatable(__support_files_test3_src_RotateComponent.prototype,{__index=__sunaba_core_Component.prototype})
if _hx_bit_raw then
    _hx_bit_clamp = function(v)
    if v <= 2147483647 and v >= -2147483648 then
        if v > 0 then return _G.math.floor(v)
        else return _G.math.ceil(v)
        end
    end
    if v > 2251798999999999 then v = v*2 end;
    if (v ~= v or math.abs(v) == _G.math.huge) then return nil end
    return _hx_bit_raw.band(v, 2147483647 ) - math.abs(_hx_bit_raw.band(v, 2147483648))
    end
else
    _hx_bit_clamp = function(v)
        if v < -2147483648 then
            return -2147483648
        elseif v > 2147483647 then
            return 2147483647
        elseif v > 0 then
            return _G.math.floor(v)
        else
            return _G.math.ceil(v)
        end
    end
end;



_hx_array_mt.__index = Array.prototype

if package.loaded.luv then
  _hx_luv = _G.require("luv");
else
  _hx_luv = {
    run=function(mode) return false end,
    loop_alive=function() return false end
  }
end
local _hx_static_init = function()
  
  String.__name__ = "String";
  Array.__name__ = "Array";
end

_hx_print = print or (function() end)

_hx_table = {}
_hx_table.pack = _G.table.pack or function(...)
    return {...}
end
_hx_table.unpack = _G.table.unpack or _G.unpack
_hx_table.maxn = _G.table.maxn or function(t)
  local maxn=0;
  for i in pairs(t) do
    maxn=type(i)=='number'and i>maxn and i or maxn
  end
  return maxn
end;

_hx_wrap_if_string_field = function(o, fld)
  if _G.type(o) == 'string' then
    if fld == 'length' then
      return _G.string.len(o)
    else
      return String.prototype[fld]
    end
  else
    return o[fld]
  end
end

function _hx_handle_error(obj)
  local message = tostring(obj)
  if _G.debug and _G.debug.traceback then
    -- level 2 to skip _hx_handle_error
    message = _G.debug.traceback(message, 2)
  end
  return setmetatable({}, { __tostring = function() return message end })
end

_hx_static_init();
local success, err = _G.xpcall(function() 
  Main.main();
  _hx_luv.run();
end, _hx_handle_error)
if not success then _G.error(err) end
