-- Generated by Haxe 4.3.6+7124d40
local _hx_hidden = {__id__=true, hx__closures=true, super=true, prototype=true, __fields__=true, __ifields__=true, __class__=true, __properties__=true, __fields__=true, __name__=true}

_hx_array_mt = {
    __newindex = function(t,k,v)
        local len = t.length
        t.length =  k >= len and (k + 1) or len
        rawset(t,k,v)
    end
}

function _hx_is_array(o)
    return type(o) == "table"
        and o.__enum__ == nil
        and getmetatable(o) == _hx_array_mt
end



function _hx_tab_array(tab, length)
    tab.length = length
    return setmetatable(tab, _hx_array_mt)
end



function _hx_print_class(obj, depth)
    local first = true
    local result = ''
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            if first then
                first = false
            else
                result = result .. ', '
            end
            if _hx_hidden[k] == nil then
                result = result .. k .. ':' .. _hx_tostring(v, depth+1)
            end
        end
    end
    return '{ ' .. result .. ' }'
end

function _hx_print_enum(o, depth)
    if o.length == 2 then
        return o[0]
    else
        local str = o[0] .. "("
        for i = 2, (o.length-1) do
            if i ~= 2 then
                str = str .. "," .. _hx_tostring(o[i], depth+1)
            else
                str = str .. _hx_tostring(o[i], depth+1)
            end
        end
        return str .. ")"
    end
end

function _hx_tostring(obj, depth)
    if depth == nil then
        depth = 0
    elseif depth > 5 then
        return "<...>"
    end

    local tstr = _G.type(obj)
    if tstr == "string" then return obj
    elseif tstr == "nil" then return "null"
    elseif tstr == "number" then
        if obj == _G.math.POSITIVE_INFINITY then return "Infinity"
        elseif obj == _G.math.NEGATIVE_INFINITY then return "-Infinity"
        elseif obj == 0 then return "0"
        elseif obj ~= obj then return "NaN"
        else return _G.tostring(obj)
        end
    elseif tstr == "boolean" then return _G.tostring(obj)
    elseif tstr == "userdata" then
        local mt = _G.getmetatable(obj)
        if mt ~= nil and mt.__tostring ~= nil then
            return _G.tostring(obj)
        else
            return "<userdata>"
        end
    elseif tstr == "function" then return "<function>"
    elseif tstr == "thread" then return "<thread>"
    elseif tstr == "table" then
        if obj.__enum__ ~= nil then
            return _hx_print_enum(obj, depth)
        elseif obj.toString ~= nil and not _hx_is_array(obj) then return obj:toString()
        elseif _hx_is_array(obj) then
            if obj.length > 5 then
                return "[...]"
            else
                local str = ""
                for i=0, (obj.length-1) do
                    if i == 0 then
                        str = str .. _hx_tostring(obj[i], depth+1)
                    else
                        str = str .. "," .. _hx_tostring(obj[i], depth+1)
                    end
                end
                return "[" .. str .. "]"
            end
        elseif obj.__class__ ~= nil then
            return _hx_print_class(obj, depth)
        else
            local buffer = {}
            local ref = obj
            if obj.__fields__ ~= nil then
                ref = obj.__fields__
            end
            for k,v in pairs(ref) do
                if _hx_hidden[k] == nil then
                    _G.table.insert(buffer, _hx_tostring(k, depth+1) .. ' : ' .. _hx_tostring(obj[k], depth+1))
                end
            end

            return "{ " .. table.concat(buffer, ", ") .. " }"
        end
    else
        _G.error("Unknown Lua type", 0)
        return ""
    end
end

local function _hx_obj_newindex(t,k,v)
    t.__fields__[k] = true
    rawset(t,k,v)
end

local _hx_obj_mt = {__newindex=_hx_obj_newindex, __tostring=_hx_tostring}

local function _hx_a(...)
  local __fields__ = {};
  local ret = {__fields__ = __fields__};
  local max = select('#',...);
  local tab = {...};
  local cur = 1;
  while cur < max do
    local v = tab[cur];
    __fields__[v] = true;
    ret[v] = tab[cur+1];
    cur = cur + 2
  end
  return setmetatable(ret, _hx_obj_mt)
end

local function _hx_e()
  return setmetatable({__fields__ = {}}, _hx_obj_mt)
end

local function _hx_o(obj)
  return setmetatable(obj, _hx_obj_mt)
end

local function _hx_new(prototype)
  return setmetatable({__fields__ = {}}, {__newindex=_hx_obj_newindex, __index=prototype, __tostring=_hx_tostring})
end

function _hx_field_arr(obj)
    local res = {}
    local idx = 0
    if obj.__fields__ ~= nil then
        obj = obj.__fields__
    end
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            res[idx] = k
            idx = idx + 1
        end
    end
    return _hx_tab_array(res, idx)
end

local _hxClasses = {}
local Int = _hx_e();
local Dynamic = _hx_e();
local Float = _hx_e();
local Bool = _hx_e();
local Class = _hx_e();
local Enum = _hx_e();

local Array = _hx_e()
local EReg = _hx_e()
local Math = _hx_e()
local Reflect = _hx_e()
local String = _hx_e()
local Std = _hx_e()
local StringBuf = _hx_e()
local StringTools = _hx_e()
local Type = _hx_e()
___Xml_XmlType_Impl_ = _hx_e()
local Xml = _hx_e()
__haxe_IMap = _hx_e()
__haxe_Exception = _hx_e()
__haxe__Int32_Int32_Impl_ = _hx_e()
__haxe__Int64____Int64 = _hx_e()
__haxe_NativeStackTrace = _hx_e()
__haxe_ValueException = _hx_e()
__haxe_ds_StringMap = _hx_e()
__haxe_exceptions_PosException = _hx_e()
__haxe_exceptions_NotImplementedException = _hx_e()
__haxe_iterators_ArrayIterator = _hx_e()
__haxe_iterators_ArrayKeyValueIterator = _hx_e()
__haxe_xml_XmlParserException = _hx_e()
__haxe_xml_Parser = _hx_e()
__haxe_xml_Printer = _hx_e()
__lua_Boot = _hx_e()
__lua_UserData = _hx_e()
__lua_PairTools = _hx_e()
__lua_Thread = _hx_e()
__sunaba_App = _hx_e()
__sunaba_core_ArrayListIterator = _hx_e()
__sunaba_core__ArrayList_ArrayListAbstract_Impl_ = _hx_e()
__sunaba_core__CanvasItem_CanvasItemAbstract_Impl_ = _hx_e()
__sunaba_core_DictionaryIterator = _hx_e()
__sunaba_core__Dictionary_DictionaryAbstract_Impl_ = _hx_e()
__sunaba_core__Element_ElementAbstract_Impl_ = _hx_e()
__sunaba_core__Environment_EnvironmentAbstract_Impl_ = _hx_e()
__sunaba_core__Event_EventAbstract_Impl_ = _hx_e()
__sunaba_core__Font_FontAbstract_Impl_ = _hx_e()
__sunaba_core__FontFile_FontFileAbstract_Impl_ = _hx_e()
__sunaba_core_GlobalObjectStack = _hx_e()
__sunaba_core__Image_ImageAbstarct_Impl_ = _hx_e()
__sunaba_core__ImageTexture_ImageTextureAbstract_Impl_ = _hx_e()
__sunaba_core__Material_MaterialAbstract_Impl_ = _hx_e()
__sunaba_core__Resource_ResourceAbstarct_Impl_ = _hx_e()
__sunaba_core_StackHandle = _hx_e()
__sunaba_core__StringArray_StringArray_Impl_ = _hx_e()
__sunaba_core__Texture_TextureAbstract_Impl_ = _hx_e()
__sunaba_core__Texture2D_Texture2DAbstract_Impl_ = _hx_e()
__sunaba_core__Variant_Variant_Impl_ = _hx_e()
__sunaba_core__Vector_Vector_Impl_ = _hx_e()
__sunaba_core__Viewport_ViewportAbstract_Impl_ = _hx_e()
__sunaba_input__InputEvent_InputEventAbstract_Impl_ = _hx_e()
__sunaba_spatial__CameraAttributes_CameraAttributesAbstract_Impl_ = _hx_e()
__sunaba_spatial__Sky_SkyAbstract_Impl_ = _hx_e()
__sunaba_spatial__World3D_World3DAbstract_Impl_ = _hx_e()
__sunaba_ui__Control_ControlAbstract_Impl_ = _hx_e()
__sunaba_ui__StyleBox_StyleBoxAbstract_Impl_ = _hx_e()
__sunaba_ui__Theme_ThemeAbstract_Impl_ = _hx_e()
__sunaba_ui_Widget = _hx_e()
__support_files_test5_src_ClickerCounter = _hx_e()
__support_files_test5_src_Main = _hx_e()

local _hx_bind, _hx_bit, _hx_staticToInstance, _hx_funcToField, _hx_maxn, _hx_print, _hx_apply_self, _hx_box_mr, _hx_bit_clamp, _hx_table, _hx_bit_raw
local _hx_pcall_default = {};
local _hx_pcall_break = {};

Array.new = function() 
  local self = _hx_new(Array.prototype)
  Array.super(self)
  return self
end
Array.super = function(self) 
  _hx_tab_array(self, 0);
end
Array.__name__ = "Array"
Array.prototype = _hx_e();
Array.prototype.concat = function(self,a) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  local ret = _g;
  local _g = 0;
  while (_g < a.length) do _hx_do_first_1 = false;
    
    local i = a[_g];
    _g = _g + 1;
    ret:push(i);
  end;
  do return ret end
end
Array.prototype.join = function(self,sep) 
  local tbl = ({});
  local _g_current = 0;
  local _g_array = self;
  while (_g_current < _g_array.length) do _hx_do_first_1 = false;
    
    _g_current = _g_current + 1;
    local i = _g_array[_g_current - 1];
    _G.table.insert(tbl, Std.string(i));
  end;
  do return _G.table.concat(tbl, sep) end
end
Array.prototype.pop = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[self.length - 1];
  self[self.length - 1] = nil;
  self.length = self.length - 1;
  do return ret end
end
Array.prototype.push = function(self,x) 
  self[self.length] = x;
  do return self.length end
end
Array.prototype.reverse = function(self) 
  local tmp;
  local i = 0;
  while (i < Std.int(self.length / 2)) do _hx_do_first_1 = false;
    
    tmp = self[i];
    self[i] = self[(self.length - i) - 1];
    self[(self.length - i) - 1] = tmp;
    i = i + 1;
  end;
end
Array.prototype.shift = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[0];
  if (self.length == 1) then 
    self[0] = nil;
  else
    if (self.length > 1) then 
      self[0] = self[1];
      _G.table.remove(self, 1);
    end;
  end;
  local tmp = self;
  tmp.length = tmp.length - 1;
  do return ret end
end
Array.prototype.slice = function(self,pos,_end) 
  if ((_end == nil) or (_end > self.length)) then 
    _end = self.length;
  else
    if (_end < 0) then 
      _end = _G.math.fmod((self.length - (_G.math.fmod(-_end, self.length))), self.length);
    end;
  end;
  if (pos < 0) then 
    pos = _G.math.fmod((self.length - (_G.math.fmod(-pos, self.length))), self.length);
  end;
  if ((pos > _end) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  end;
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = _end;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
  end;
  do return ret end
end
Array.prototype.sort = function(self,f) 
  local i = 0;
  local l = self.length;
  while (i < l) do _hx_do_first_1 = false;
    
    local swap = false;
    local j = 0;
    local max = (l - i) - 1;
    while (j < max) do _hx_do_first_2 = false;
      
      if (f(self[j], self[j + 1]) > 0) then 
        local tmp = self[j + 1];
        self[j + 1] = self[j];
        self[j] = tmp;
        swap = true;
      end;
      j = j + 1;
    end;
    if (not swap) then 
      break;
    end;
    i = i + 1;
  end;
end
Array.prototype.splice = function(self,pos,len) 
  if ((len < 0) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  else
    if (pos < 0) then 
      pos = self.length - (_G.math.fmod(-pos, self.length));
    end;
  end;
  len = Math.min(len, self.length - pos);
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = pos + len;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
    self[i] = self[i + len];
  end;
  local _g = pos + len;
  local _g1 = self.length;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    self[i] = self[i + len];
  end;
  local tmp = self;
  tmp.length = tmp.length - len;
  do return ret end
end
Array.prototype.toString = function(self) 
  local tbl = ({});
  _G.table.insert(tbl, "[");
  _G.table.insert(tbl, self:join(","));
  _G.table.insert(tbl, "]");
  do return _G.table.concat(tbl, "") end
end
Array.prototype.unshift = function(self,x) 
  local len = self.length;
  local _g = 0;
  local _g1 = len;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    self[len - i] = self[(len - i) - 1];
  end;
  self[0] = x;
end
Array.prototype.insert = function(self,pos,x) 
  if (pos > self.length) then 
    pos = self.length;
  end;
  if (pos < 0) then 
    pos = self.length + pos;
    if (pos < 0) then 
      pos = 0;
    end;
  end;
  local cur_len = self.length;
  while (cur_len > pos) do _hx_do_first_1 = false;
    
    self[cur_len] = self[cur_len - 1];
    cur_len = cur_len - 1;
  end;
  self[pos] = x;
end
Array.prototype.remove = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      local _g = i;
      local _g1 = self.length - 1;
      while (_g < _g1) do _hx_do_first_2 = false;
        
        _g = _g + 1;
        local j = _g - 1;
        self[j] = self[j + 1];
      end;
      self[self.length - 1] = nil;
      self.length = self.length - 1;
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.contains = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.indexOf = function(self,x,fromIndex) 
  local _end = self.length;
  if (fromIndex == nil) then 
    fromIndex = 0;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        fromIndex = 0;
      end;
    end;
  end;
  local _g = fromIndex;
  local _g1 = _end;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    if (x == self[i]) then 
      do return i end;
    end;
  end;
  do return -1 end
end
Array.prototype.lastIndexOf = function(self,x,fromIndex) 
  if ((fromIndex == nil) or (fromIndex >= self.length)) then 
    fromIndex = self.length - 1;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        do return -1 end;
      end;
    end;
  end;
  local i = fromIndex;
  while (i >= 0) do _hx_do_first_1 = false;
    
    if (self[i] == x) then 
      do return i end;
    else
      i = i - 1;
    end;
  end;
  do return -1 end
end
Array.prototype.copy = function(self) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.map = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(f(i));
  end;
  do return _g end
end
Array.prototype.filter = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if (f(i)) then 
      _g:push(i);
    end;
  end;
  do return _g end
end
Array.prototype.iterator = function(self) 
  do return __haxe_iterators_ArrayIterator.new(self) end
end
Array.prototype.keyValueIterator = function(self) 
  do return __haxe_iterators_ArrayKeyValueIterator.new(self) end
end
Array.prototype.resize = function(self,len) 
  if (self.length < len) then 
    self.length = len;
  else
    if (self.length > len) then 
      local _g = len;
      local _g1 = self.length;
      while (_g < _g1) do _hx_do_first_1 = false;
        
        _g = _g + 1;
        local i = _g - 1;
        self[i] = nil;
      end;
      self.length = len;
    end;
  end;
end

Array.prototype.__class__ =  Array

EReg.new = function(r,opt) 
  local self = _hx_new(EReg.prototype)
  EReg.super(self,r,opt)
  return self
end
EReg.super = function(self,r,opt) 
  self.pattern = r;
  self.options = opt;
  self.regex = RegEx.new();
  if ((opt == nil) or (opt == "")) then 
    opt = "g";
  end;
  if (String.prototype.indexOf(opt, "g") ~= -1) then 
    opt = StringTools.replace(opt, "g", "");
  end;
  local godotPattern = r;
  if (String.prototype.indexOf(opt, "i") ~= -1) then 
    godotPattern = Std.string("(?i)") .. Std.string(r);
  end;
  if (String.prototype.indexOf(opt, "m") ~= -1) then 
    godotPattern = Std.string("(?m)") .. Std.string(r);
  end;
  local error = self.regex:compile(godotPattern);
  if (error ~= 0) then 
    _G.error(__haxe_Exception.thrown(Std.string("Failed to compile regex pattern: ") .. Std.string(r)),0);
  end;
end
EReg.__name__ = "EReg"
EReg.escape = function(s) 
  local specials = _hx_tab_array({[0]="\\", ".", "+", "*", "?", "^", "$", "(", ")", "[", "]", "{", "}", "|"}, 14);
  local text = s;
  local _g = 0;
  while (_g < specials.length) do _hx_do_first_1 = false;
    
    local special = specials[_g];
    _g = _g + 1;
    text = StringTools.replace(text, special, Std.string("\\") .. Std.string(special));
  end;
  do return text end;
end
EReg.prototype = _hx_e();
EReg.prototype.match = function(self,s) 
  self.lastInput = s;
  self.lastMatch = self.regex:search(s);
  if (self.lastMatch == nil) then 
    do return false end;
  else
    do return self.lastMatch:isNull() == false end;
  end;
end
EReg.prototype.matched = function(self,n) 
  if ((self.lastMatch == nil) or self.lastMatch:isNull()) then 
    do return "" end;
  end;
  local nVariant = __sunaba_core__Variant_Variant_Impl_.fromInt(n);
  do return self.lastMatch:getString(nVariant) end
end
EReg.prototype.matchedLeft = function(self) 
  if ((self.lastMatch == nil) or self.lastMatch:isNull()) then 
    do return "" end;
  end;
  do return String.prototype.substr(self.lastInput, 0, self.lastMatch:getStart(__sunaba_core__Variant_Variant_Impl_.fromInt(0))) end
end
EReg.prototype.matchedRight = function(self) 
  if ((self.lastMatch == nil) or self.lastMatch:isNull()) then 
    do return "" end;
  end;
  local endPos = self.lastMatch:getEnd(__sunaba_core__Variant_Variant_Impl_.fromInt(0));
  do return String.prototype.substr(self.lastInput, endPos) end
end
EReg.prototype.matchedPos = function(self) 
  if ((self.lastMatch == nil) or self.lastMatch:isNull()) then 
    do return _hx_o({__fields__={pos=true,len=true},pos=-1,len=0}) end;
  end;
  local start = self.lastMatch:getStart(__sunaba_core__Variant_Variant_Impl_.fromInt(0));
  local _end = self.lastMatch:getEnd(__sunaba_core__Variant_Variant_Impl_.fromInt(0)) - start;
  do return _hx_o({__fields__={pos=true,len=true},pos=start,len=_end - start}) end
end
EReg.prototype.matchSub = function(self,s,pos,len) 
  if (len == nil) then 
    len = -1;
  end;
  self.lastInput = s;
  self.lastMatch = self.regex:search(s, pos);
  if (self.lastMatch == nil) then 
    do return false end;
  end;
  do return self.lastMatch:isNull() == false end
end
EReg.prototype.split = function(self,s) 
  local result = _hx_tab_array({}, 0);
  local lastIndex = 0;
  local searchAllTable = self.regex:searchAll(s);
  local length = nil;
  local tab = __lua_PairTools.copy(searchAllTable);
  local length = length;
  local matches;
  if (length == nil) then 
    length = _hx_table.maxn(tab);
    if (length > 0) then 
      local head = tab[1];
      _G.table.remove(tab, 1);
      tab[0] = head;
      matches = _hx_tab_array(tab, length);
    else
      matches = _hx_tab_array({}, 0);
    end;
  else
    matches = _hx_tab_array(tab, length);
  end;
  local _g = 0;
  local _hx_continue_1 = false;
  while (_g < matches.length) do _hx_do_first_1 = false;
    repeat 
    local match = matches[_g];
    _g = _g + 1;
    if (match:isNull()) then 
      break;
    end;
    local start = match:getStart(__sunaba_core__Variant_Variant_Impl_.fromInt(0));
    result:push(String.prototype.substr(s, lastIndex, start - lastIndex));
    lastIndex = match:getEnd(__sunaba_core__Variant_Variant_Impl_.fromInt(0));until true
    if _hx_continue_1 then 
    _hx_continue_1 = false;
    break;
    end;
    
  end;
  result:push(String.prototype.substr(s, lastIndex));
  do return result end
end
EReg.prototype.replace = function(self,s,by) 
  do return self.regex:sub(s, by) end
end
EReg.prototype.map = function(self,s,f) 
  local result = "";
  local lastIndex = 0;
  local searchAllTable = self.regex:searchAll(s);
  local length = nil;
  local tab = __lua_PairTools.copy(searchAllTable);
  local length = length;
  local matches;
  if (length == nil) then 
    length = _hx_table.maxn(tab);
    if (length > 0) then 
      local head = tab[1];
      _G.table.remove(tab, 1);
      tab[0] = head;
      matches = _hx_tab_array(tab, length);
    else
      matches = _hx_tab_array({}, 0);
    end;
  else
    matches = _hx_tab_array(tab, length);
  end;
  local _g = 0;
  while (_g < matches.length) do _hx_do_first_1 = false;
    
    local match = matches[_g];
    _g = _g + 1;
    local start = match:getStart(__sunaba_core__Variant_Variant_Impl_.fromInt(0));
    local _end = match:getEnd(__sunaba_core__Variant_Variant_Impl_.fromInt(0));
    result = Std.string(result) .. Std.string(String.prototype.substr(s, lastIndex, start - lastIndex));
    result = Std.string(result) .. Std.string(f(self));
    lastIndex = _end;
  end;
  result = Std.string(result) .. Std.string(String.prototype.substr(s, lastIndex));
  do return result end
end

EReg.prototype.__class__ =  EReg

Math.new = {}
Math.__name__ = "Math"
Math.isNaN = function(f) 
  do return f ~= f end;
end
Math.isFinite = function(f) 
  if (f > -_G.math.huge) then 
    do return f < _G.math.huge end;
  else
    do return false end;
  end;
end
Math.min = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.min(a, b) end;
  end;
end

Reflect.new = {}
Reflect.__name__ = "Reflect"
Reflect.field = function(o,field) 
  if (_G.type(o) == "string") then 
    if (field == "length") then 
      do return _hx_wrap_if_string_field(o,'length') end;
    else
      do return String.prototype[field] end;
    end;
  else
    local _hx_status, _hx_result = pcall(function() 
    
        do return o[field] end;
      return _hx_pcall_default
    end)
    if not _hx_status and _hx_result == "_hx_pcall_break" then
    elseif not _hx_status then 
      local _g = _hx_result;
      do return nil end;
    elseif _hx_result ~= _hx_pcall_default then
      return _hx_result
    end;
  end;
end
Reflect.setProperty = function(o,field,value) 
  if ((o.__properties__ ~= nil) and o.__properties__[Std.string("set_") .. Std.string(field)]) then 
    local tmp = o.__properties__[Std.string("set_") .. Std.string(field)];
    Reflect.callMethod(o,Reflect.field(o, tmp),_hx_tab_array({[0]=value}, 1));
  else
    o[field] = value;
  end;
end
Reflect.callMethod = function(o,func,args) 
  if ((args == nil) or (args.length == 0)) then 
    do return func(o) end;
  else
    local self_arg = false;
    if ((o ~= nil) and (o.__name__ == nil)) then 
      self_arg = true;
    end;
    if (self_arg) then 
      do return func(o, _hx_table.unpack(args, 0, args.length - 1)) end;
    else
      do return func(_hx_table.unpack(args, 0, args.length - 1)) end;
    end;
  end;
end

String.new = function(string) 
  local self = _hx_new(String.prototype)
  String.super(self,string)
  self = string
  return self
end
String.super = function(self,string) 
end
String.__name__ = "String"
String.__index = function(s,k) 
  if (k == "length") then 
    do return _G.string.len(s) end;
  else
    local o = String.prototype;
    local field = k;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "function") and not ((function() 
        local _hx_2
        if (_G.type(o) ~= "table") then 
        _hx_2 = false; else 
        _hx_2 = o.__name__; end
        return _hx_2
      end )() or (function() 
        local _hx_3
        if (_G.type(o) ~= "table") then 
        _hx_3 = false; else 
        _hx_3 = o.__ename__; end
        return _hx_3
      end )())) then 
      _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[field] ~= nil) or (field == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[field] ~= nil; else 
      _hx_1 = o[field] ~= nil; end
      return _hx_1
    end )()) then 
      do return String.prototype[k] end;
    else
      if (String.__oldindex ~= nil) then 
        if (_G.type(String.__oldindex) == "function") then 
          do return String.__oldindex(s, k) end;
        else
          if (_G.type(String.__oldindex) == "table") then 
            do return String.__oldindex[k] end;
          end;
        end;
        do return nil end;
      else
        do return nil end;
      end;
    end;
  end;
end
String.indexOfEmpty = function(s,startIndex) 
  local length = _G.string.len(s);
  if (startIndex < 0) then 
    startIndex = length + startIndex;
    if (startIndex < 0) then 
      startIndex = 0;
    end;
  end;
  if (startIndex > length) then 
    do return length end;
  else
    do return startIndex end;
  end;
end
String.fromCharCode = function(code) 
  do return _G.string.char(code) end;
end
String.prototype = _hx_e();
String.prototype.toUpperCase = function(self) 
  do return _G.string.upper(self) end
end
String.prototype.toLowerCase = function(self) 
  do return _G.string.lower(self) end
end
String.prototype.indexOf = function(self,str,startIndex) 
  if (startIndex == nil) then 
    startIndex = 1;
  else
    startIndex = startIndex + 1;
  end;
  if (str == "") then 
    do return String.indexOfEmpty(self, startIndex - 1) end;
  end;
  local r = _G.string.find(self, str, startIndex, true);
  if ((r ~= nil) and (r > 0)) then 
    do return r - 1 end;
  else
    do return -1 end;
  end;
end
String.prototype.lastIndexOf = function(self,str,startIndex) 
  local ret = -1;
  if (startIndex == nil) then 
    startIndex = #self;
  end;
  while (true) do _hx_do_first_1 = false;
    
    local p = String.prototype.indexOf(self, str, ret + 1);
    if (((p == -1) or (p > startIndex)) or (p == ret)) then 
      break;
    end;
    ret = p;
  end;
  do return ret end
end
String.prototype.split = function(self,delimiter) 
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  while (idx ~= nil) do _hx_do_first_1 = false;
    
    local newidx = 0;
    if (#delimiter > 0) then 
      newidx = _G.string.find(self, delimiter, idx, true);
    else
      if (idx >= #self) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      local match = _G.string.sub(self, idx, newidx - 1);
      ret:push(match);
      idx = newidx + #delimiter;
    else
      ret:push(_G.string.sub(self, idx, #self));
      idx = nil;
    end;
  end;
  do return ret end
end
String.prototype.toString = function(self) 
  do return self end
end
String.prototype.substring = function(self,startIndex,endIndex) 
  if (endIndex == nil) then 
    endIndex = #self;
  end;
  if (endIndex < 0) then 
    endIndex = 0;
  end;
  if (startIndex < 0) then 
    startIndex = 0;
  end;
  if (endIndex < startIndex) then 
    do return _G.string.sub(self, endIndex + 1, startIndex) end;
  else
    do return _G.string.sub(self, startIndex + 1, endIndex) end;
  end;
end
String.prototype.charAt = function(self,index) 
  do return _G.string.sub(self, index + 1, index + 1) end
end
String.prototype.charCodeAt = function(self,index) 
  do return _G.string.byte(self, index + 1) end
end
String.prototype.substr = function(self,pos,len) 
  if ((len == nil) or (len > (pos + #self))) then 
    len = #self;
  else
    if (len < 0) then 
      len = #self + len;
    end;
  end;
  if (pos < 0) then 
    pos = #self + pos;
  end;
  if (pos < 0) then 
    pos = 0;
  end;
  do return _G.string.sub(self, pos + 1, pos + len) end
end

String.prototype.__class__ =  String

Std.new = {}
Std.__name__ = "Std"
Std.string = function(s) 
  do return _hx_tostring(s, 0) end;
end
Std.int = function(x) 
  if (not Math.isFinite(x) or Math.isNaN(x)) then 
    do return 0 end;
  else
    do return _hx_bit_clamp(x) end;
  end;
end
Std.parseInt = function(x) 
  if (x == nil) then 
    do return nil end;
  end;
  local sign, numString = _G.string.match(x, "^%s*([%-+]?)0[xX]([%da-fA-F]*)");
  if (numString ~= nil) then 
    if (sign == "-") then 
      do return -_G.tonumber(numString, 16) end;
    else
      do return _G.tonumber(numString, 16) end;
    end;
  end;
  local intMatch = _G.string.match(x, "^%s*[%-+]?%d*");
  if (intMatch == nil) then 
    do return nil end;
  end;
  do return _G.tonumber(intMatch) end;
end
Std.parseFloat = function(x) 
  if ((x == nil) or (x == "")) then 
    do return (0/0) end;
  end;
  local digitMatch = _G.string.match(x, "^%s*[%.%-+]?[0-9]%d*");
  if (digitMatch == nil) then 
    do return (0/0) end;
  end;
  x = String.prototype.substr(x, #digitMatch);
  local decimalMatch = _G.string.match(x, "^%.%d*");
  if (decimalMatch == nil) then 
    decimalMatch = "";
  end;
  x = String.prototype.substr(x, #decimalMatch);
  local eMatch = _G.string.match(x, "^[eE][+%-]?%d+");
  if (eMatch == nil) then 
    eMatch = "";
  end;
  local result = _G.tonumber(Std.string(Std.string(digitMatch) .. Std.string(decimalMatch)) .. Std.string(eMatch));
  if (result ~= nil) then 
    do return result end;
  else
    do return (0/0) end;
  end;
end

StringBuf.new = function() 
  local self = _hx_new(StringBuf.prototype)
  StringBuf.super(self)
  return self
end
StringBuf.super = function(self) 
  self.b = ({});
  self.length = 0;
end
StringBuf.__name__ = "StringBuf"
StringBuf.prototype = _hx_e();

StringBuf.prototype.__class__ =  StringBuf

StringTools.new = {}
StringTools.__name__ = "StringTools"
StringTools.htmlEscape = function(s,quotes) 
  local buf_b = ({});
  local buf_length = 0;
  local _g_offset = 0;
  local _g_s = s;
  while (_g_offset < #_g_s) do _hx_do_first_1 = false;
    
    _g_offset = _g_offset + 1;
    local code = _G.string.byte(_g_s, (_g_offset - 1) + 1);
    local code1 = code;
    if (code1) == 34 then 
      if (quotes) then 
        local str = "&quot;";
        _G.table.insert(buf_b, str);
        buf_length = buf_length + #str;
      else
        _G.table.insert(buf_b, _G.string.char(code));
        buf_length = buf_length + 1;
      end;
    elseif (code1) == 38 then 
      local str = "&amp;";
      _G.table.insert(buf_b, str);
      buf_length = buf_length + #str;
    elseif (code1) == 39 then 
      if (quotes) then 
        local str = "&#039;";
        _G.table.insert(buf_b, str);
        buf_length = buf_length + #str;
      else
        _G.table.insert(buf_b, _G.string.char(code));
        buf_length = buf_length + 1;
      end;
    elseif (code1) == 60 then 
      local str = "&lt;";
      _G.table.insert(buf_b, str);
      buf_length = buf_length + #str;
    elseif (code1) == 62 then 
      local str = "&gt;";
      _G.table.insert(buf_b, str);
      buf_length = buf_length + #str;else
    _G.table.insert(buf_b, _G.string.char(code));
    buf_length = buf_length + 1; end;
  end;
  do return _G.table.concat(buf_b) end;
end
StringTools.isSpace = function(s,pos) 
  if (((#s == 0) or (pos < 0)) or (pos >= #s)) then 
    do return false end;
  end;
  local c = _G.string.byte(s, pos + 1);
  if (not ((c > 8) and (c < 14))) then 
    do return c == 32 end;
  else
    do return true end;
  end;
end
StringTools.ltrim = function(s) 
  local l = #s;
  local r = 0;
  while ((r < l) and StringTools.isSpace(s, r)) do _hx_do_first_1 = false;
    
    r = r + 1;
  end;
  if (r > 0) then 
    do return String.prototype.substr(s, r, l - r) end;
  else
    do return s end;
  end;
end
StringTools.rtrim = function(s) 
  local l = #s;
  local r = 0;
  while ((r < l) and StringTools.isSpace(s, (l - r) - 1)) do _hx_do_first_1 = false;
    
    r = r + 1;
  end;
  if (r > 0) then 
    do return String.prototype.substr(s, 0, l - r) end;
  else
    do return s end;
  end;
end
StringTools.trim = function(s) 
  do return StringTools.ltrim(StringTools.rtrim(s)) end;
end
StringTools.replace = function(s,sub,by) 
  do return String.prototype.split(s, sub):join(by) end;
end

Type.new = {}
Type.__name__ = "Type"
Type.getClass = function(o) 
  if (o == nil) then 
    do return nil end;
  end;
  local o = o;
  if (__lua_Boot.__instanceof(o, Array)) then 
    do return Array end;
  else
    if (__lua_Boot.__instanceof(o, String)) then 
      do return String end;
    else
      local cl = o.__class__;
      if (cl ~= nil) then 
        do return cl end;
      else
        do return nil end;
      end;
    end;
  end;
end
Type.resolveEnum = function(name) 
  local e = _hxClasses[name];
  if ((e == nil) or not ((function() 
    local _hx_1
    if (_G.type(e) ~= "table") then 
    _hx_1 = false; else 
    _hx_1 = e.__ename__; end
    return _hx_1
  end )())) then 
    do return nil end;
  end;
  do return e end;
end

___Xml_XmlType_Impl_.new = {}
___Xml_XmlType_Impl_.__name__ = "_Xml.XmlType_Impl_"
___Xml_XmlType_Impl_.toString = function(this1) 
  local _g = this1;
  if (_g) == 0 then 
    do return "Element" end;
  elseif (_g) == 1 then 
    do return "PCData" end;
  elseif (_g) == 2 then 
    do return "CData" end;
  elseif (_g) == 3 then 
    do return "Comment" end;
  elseif (_g) == 4 then 
    do return "DocType" end;
  elseif (_g) == 5 then 
    do return "ProcessingInstruction" end;
  elseif (_g) == 6 then 
    do return "Document" end; end;
end

Xml.new = function(nodeType) 
  local self = _hx_new(Xml.prototype)
  Xml.super(self,nodeType)
  return self
end
Xml.super = function(self,nodeType) 
  self.nodeType = nodeType;
  self.children = _hx_tab_array({}, 0);
  self.attributeMap = __haxe_ds_StringMap.new();
end
Xml.__name__ = "Xml"
Xml.parse = function(str) 
  do return __haxe_xml_Parser.parse(str) end;
end
Xml.createElement = function(name) 
  local xml = Xml.new(Xml.Element);
  if (xml.nodeType ~= Xml.Element) then 
    _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element but found ") .. Std.string(((function() 
      local _hx_1
      if (xml.nodeType == nil) then 
      _hx_1 = "null"; else 
      _hx_1 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(xml.nodeType); end
      return _hx_1
    end )()))),0);
  end;
  xml.nodeName = name;
  do return xml end;
end
Xml.createPCData = function(data) 
  local xml = Xml.new(Xml.PCData);
  if ((xml.nodeType == Xml.Document) or (xml.nodeType == Xml.Element)) then 
    _G.error(__haxe_Exception.thrown(Std.string("Bad node type, unexpected ") .. Std.string(((function() 
      local _hx_1
      if (xml.nodeType == nil) then 
      _hx_1 = "null"; else 
      _hx_1 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(xml.nodeType); end
      return _hx_1
    end )()))),0);
  end;
  xml.nodeValue = data;
  do return xml end;
end
Xml.createCData = function(data) 
  local xml = Xml.new(Xml.CData);
  if ((xml.nodeType == Xml.Document) or (xml.nodeType == Xml.Element)) then 
    _G.error(__haxe_Exception.thrown(Std.string("Bad node type, unexpected ") .. Std.string(((function() 
      local _hx_1
      if (xml.nodeType == nil) then 
      _hx_1 = "null"; else 
      _hx_1 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(xml.nodeType); end
      return _hx_1
    end )()))),0);
  end;
  xml.nodeValue = data;
  do return xml end;
end
Xml.createComment = function(data) 
  local xml = Xml.new(Xml.Comment);
  if ((xml.nodeType == Xml.Document) or (xml.nodeType == Xml.Element)) then 
    _G.error(__haxe_Exception.thrown(Std.string("Bad node type, unexpected ") .. Std.string(((function() 
      local _hx_1
      if (xml.nodeType == nil) then 
      _hx_1 = "null"; else 
      _hx_1 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(xml.nodeType); end
      return _hx_1
    end )()))),0);
  end;
  xml.nodeValue = data;
  do return xml end;
end
Xml.createDocType = function(data) 
  local xml = Xml.new(Xml.DocType);
  if ((xml.nodeType == Xml.Document) or (xml.nodeType == Xml.Element)) then 
    _G.error(__haxe_Exception.thrown(Std.string("Bad node type, unexpected ") .. Std.string(((function() 
      local _hx_1
      if (xml.nodeType == nil) then 
      _hx_1 = "null"; else 
      _hx_1 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(xml.nodeType); end
      return _hx_1
    end )()))),0);
  end;
  xml.nodeValue = data;
  do return xml end;
end
Xml.createProcessingInstruction = function(data) 
  local xml = Xml.new(Xml.ProcessingInstruction);
  if ((xml.nodeType == Xml.Document) or (xml.nodeType == Xml.Element)) then 
    _G.error(__haxe_Exception.thrown(Std.string("Bad node type, unexpected ") .. Std.string(((function() 
      local _hx_1
      if (xml.nodeType == nil) then 
      _hx_1 = "null"; else 
      _hx_1 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(xml.nodeType); end
      return _hx_1
    end )()))),0);
  end;
  xml.nodeValue = data;
  do return xml end;
end
Xml.createDocument = function() 
  do return Xml.new(Xml.Document) end;
end
Xml.prototype = _hx_e();
Xml.prototype.get = function(self,att) 
  if (self.nodeType ~= Xml.Element) then 
    _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element but found ") .. Std.string(((function() 
      local _hx_1
      if (self.nodeType == nil) then 
      _hx_1 = "null"; else 
      _hx_1 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(self.nodeType); end
      return _hx_1
    end )()))),0);
  end;
  local ret = self.attributeMap.h[att];
  if (ret == __haxe_ds_StringMap.tnull) then 
    do return nil end;
  else
    do return ret end;
  end;
end
Xml.prototype.set = function(self,att,value) 
  if (self.nodeType ~= Xml.Element) then 
    _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element but found ") .. Std.string(((function() 
      local _hx_1
      if (self.nodeType == nil) then 
      _hx_1 = "null"; else 
      _hx_1 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(self.nodeType); end
      return _hx_1
    end )()))),0);
  end;
  local _this = self.attributeMap;
  if (value == nil) then 
    _this.h[att] = __haxe_ds_StringMap.tnull;
  else
    _this.h[att] = value;
  end;
end
Xml.prototype.exists = function(self,att) 
  if (self.nodeType ~= Xml.Element) then 
    _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element but found ") .. Std.string(((function() 
      local _hx_1
      if (self.nodeType == nil) then 
      _hx_1 = "null"; else 
      _hx_1 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(self.nodeType); end
      return _hx_1
    end )()))),0);
  end;
  do return self.attributeMap.h[att] ~= nil end
end
Xml.prototype.attributes = function(self) 
  if (self.nodeType ~= Xml.Element) then 
    _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element but found ") .. Std.string(((function() 
      local _hx_1
      if (self.nodeType == nil) then 
      _hx_1 = "null"; else 
      _hx_1 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(self.nodeType); end
      return _hx_1
    end )()))),0);
  end;
  do return self.attributeMap:keys() end
end
Xml.prototype.elements = function(self) 
  if ((self.nodeType ~= Xml.Document) and (self.nodeType ~= Xml.Element)) then 
    _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element or Document but found ") .. Std.string(((function() 
      local _hx_1
      if (self.nodeType == nil) then 
      _hx_1 = "null"; else 
      _hx_1 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(self.nodeType); end
      return _hx_1
    end )()))),0);
  end;
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self.children;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local child = _g2[_g1];
    _g1 = _g1 + 1;
    if (child.nodeType == Xml.Element) then 
      _g:push(child);
    end;
  end;
  local ret = _g;
  do return __haxe_iterators_ArrayIterator.new(ret) end
end
Xml.prototype.firstElement = function(self) 
  if ((self.nodeType ~= Xml.Document) and (self.nodeType ~= Xml.Element)) then 
    _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element or Document but found ") .. Std.string(((function() 
      local _hx_1
      if (self.nodeType == nil) then 
      _hx_1 = "null"; else 
      _hx_1 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(self.nodeType); end
      return _hx_1
    end )()))),0);
  end;
  local _g = 0;
  local _g1 = self.children;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local child = _g1[_g];
    _g = _g + 1;
    if (child.nodeType == Xml.Element) then 
      do return child end;
    end;
  end;
  do return nil end
end
Xml.prototype.addChild = function(self,x) 
  if ((self.nodeType ~= Xml.Document) and (self.nodeType ~= Xml.Element)) then 
    _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element or Document but found ") .. Std.string(((function() 
      local _hx_1
      if (self.nodeType == nil) then 
      _hx_1 = "null"; else 
      _hx_1 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(self.nodeType); end
      return _hx_1
    end )()))),0);
  end;
  if (x.parent ~= nil) then 
    x.parent:removeChild(x);
  end;
  self.children:push(x);
  x.parent = self;
end
Xml.prototype.removeChild = function(self,x) 
  if ((self.nodeType ~= Xml.Document) and (self.nodeType ~= Xml.Element)) then 
    _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element or Document but found ") .. Std.string(((function() 
      local _hx_1
      if (self.nodeType == nil) then 
      _hx_1 = "null"; else 
      _hx_1 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(self.nodeType); end
      return _hx_1
    end )()))),0);
  end;
  if (self.children:remove(x)) then 
    x.parent = nil;
    do return true end;
  end;
  do return false end
end
Xml.prototype.toString = function(self) 
  do return __haxe_xml_Printer.print(self) end
end

Xml.prototype.__class__ =  Xml

__haxe_IMap.new = {}
__haxe_IMap.__name__ = "haxe.IMap"

__haxe_Exception.new = function(message,previous,native) 
  local self = _hx_new(__haxe_Exception.prototype)
  __haxe_Exception.super(self,message,previous,native)
  return self
end
__haxe_Exception.super = function(self,message,previous,native) 
  self.__skipStack = 0;
  self.__exceptionMessage = message;
  self.__previousException = previous;
  if (native ~= nil) then 
    self.__nativeException = native;
    self.__nativeStack = __haxe_NativeStackTrace.exceptionStack();
  else
    self.__nativeException = self;
    self.__nativeStack = __haxe_NativeStackTrace.callStack();
    self.__skipStack = 1;
  end;
end
__haxe_Exception.__name__ = "haxe.Exception"
__haxe_Exception.caught = function(value) 
  if (__lua_Boot.__instanceof(value, __haxe_Exception)) then 
    do return value end;
  else
    do return __haxe_ValueException.new(value, nil, value) end;
  end;
end
__haxe_Exception.thrown = function(value) 
  if (__lua_Boot.__instanceof(value, __haxe_Exception)) then 
    do return value:get_native() end;
  else
    local e = __haxe_ValueException.new(value);
    e.__skipStack = e.__skipStack + 1;
    do return e end;
  end;
end
__haxe_Exception.prototype = _hx_e();
__haxe_Exception.prototype.unwrap = function(self) 
  do return self.__nativeException end
end
__haxe_Exception.prototype.toString = function(self) 
  do return self:get_message() end
end
__haxe_Exception.prototype.get_message = function(self) 
  do return self.__exceptionMessage end
end
__haxe_Exception.prototype.get_native = function(self) 
  do return self.__nativeException end
end

__haxe_Exception.prototype.__class__ =  __haxe_Exception

__haxe_Exception.prototype.__properties__ =  {get_native="get_native",get_message="get_message"}

__haxe__Int32_Int32_Impl_.new = {}
__haxe__Int32_Int32_Impl_.__name__ = "haxe._Int32.Int32_Impl_"
__haxe__Int32_Int32_Impl_.shr = function(a,b) 
  do return __haxe__Int32_Int32_Impl_.clamp(_hx_bit.arshift(a,b)) end;
end
__haxe__Int32_Int32_Impl_.clamp = function(x) 
  do return _hx_bit_clamp(x) end;
end

__haxe__Int64____Int64.new = function(high,low) 
  local self = _hx_new(__haxe__Int64____Int64.prototype)
  __haxe__Int64____Int64.super(self,high,low)
  return self
end
__haxe__Int64____Int64.super = function(self,high,low) 
  self.high = high;
  self.low = low;
end
__haxe__Int64____Int64.__name__ = "haxe._Int64.___Int64"
__haxe__Int64____Int64.prototype = _hx_e();

__haxe__Int64____Int64.prototype.__class__ =  __haxe__Int64____Int64

__haxe_NativeStackTrace.new = {}
__haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace"
__haxe_NativeStackTrace.saveStack = function(exception) 
end
__haxe_NativeStackTrace.callStack = function() 
  local _g = debug.traceback();
  if (_g == nil) then 
    do return _hx_tab_array({}, 0) end;
  else
    local s = _g;
    do return String.prototype.split(s, "\n"):slice(3) end;
  end;
end
__haxe_NativeStackTrace.exceptionStack = function() 
  do return _hx_tab_array({}, 0) end;
end

__haxe_ValueException.new = function(value,previous,native) 
  local self = _hx_new(__haxe_ValueException.prototype)
  __haxe_ValueException.super(self,value,previous,native)
  return self
end
__haxe_ValueException.super = function(self,value,previous,native) 
  __haxe_Exception.super(self,(function() 
    local _hx_1
    if (value == nil) then 
    _hx_1 = "null"; else 
    _hx_1 = Std.string(value); end
    return _hx_1
  end )(),previous,native);
  self.value = value;
end
__haxe_ValueException.__name__ = "haxe.ValueException"
__haxe_ValueException.prototype = _hx_e();
__haxe_ValueException.prototype.unwrap = function(self) 
  do return self.value end
end

__haxe_ValueException.prototype.__class__ =  __haxe_ValueException
__haxe_ValueException.__super__ = __haxe_Exception
setmetatable(__haxe_ValueException.prototype,{__index=__haxe_Exception.prototype})
setmetatable(__haxe_ValueException.prototype.__properties__,{__index=__haxe_Exception.prototype.__properties__})

__haxe_ds_StringMap.new = function() 
  local self = _hx_new(__haxe_ds_StringMap.prototype)
  __haxe_ds_StringMap.super(self)
  return self
end
__haxe_ds_StringMap.super = function(self) 
  self.h = ({});
end
__haxe_ds_StringMap.__name__ = "haxe.ds.StringMap"
__haxe_ds_StringMap.__interfaces__ = {__haxe_IMap}
__haxe_ds_StringMap.prototype = _hx_e();
__haxe_ds_StringMap.prototype.keys = function(self) 
  local _gthis = self;
  local next = _G.next;
  local cur = next(self.h, nil);
  do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
    local ret = cur;
    cur = next(_gthis.h, cur);
    do return ret end;
  end,hasNext=function(self) 
    do return cur ~= nil end;
  end}) end
end

__haxe_ds_StringMap.prototype.__class__ =  __haxe_ds_StringMap

__haxe_exceptions_PosException.new = function(message,previous,pos) 
  local self = _hx_new(__haxe_exceptions_PosException.prototype)
  __haxe_exceptions_PosException.super(self,message,previous,pos)
  return self
end
__haxe_exceptions_PosException.super = function(self,message,previous,pos) 
  __haxe_Exception.super(self,message,previous);
  if (pos == nil) then 
    self.posInfos = _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="(unknown)",lineNumber=0,className="(unknown)",methodName="(unknown)"});
  else
    self.posInfos = pos;
  end;
end
__haxe_exceptions_PosException.__name__ = "haxe.exceptions.PosException"
__haxe_exceptions_PosException.prototype = _hx_e();
__haxe_exceptions_PosException.prototype.toString = function(self) 
  do return Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string("") .. Std.string(__haxe_Exception.prototype.toString(self))) .. Std.string(" in ")) .. Std.string(self.posInfos.className)) .. Std.string(".")) .. Std.string(self.posInfos.methodName)) .. Std.string(" at ")) .. Std.string(self.posInfos.fileName)) .. Std.string(":")) .. Std.string(self.posInfos.lineNumber) end
end

__haxe_exceptions_PosException.prototype.__class__ =  __haxe_exceptions_PosException
__haxe_exceptions_PosException.__super__ = __haxe_Exception
setmetatable(__haxe_exceptions_PosException.prototype,{__index=__haxe_Exception.prototype})
setmetatable(__haxe_exceptions_PosException.prototype.__properties__,{__index=__haxe_Exception.prototype.__properties__})

__haxe_exceptions_NotImplementedException.new = function(message,previous,pos) 
  local self = _hx_new(__haxe_exceptions_NotImplementedException.prototype)
  __haxe_exceptions_NotImplementedException.super(self,message,previous,pos)
  return self
end
__haxe_exceptions_NotImplementedException.super = function(self,message,previous,pos) 
  if (message == nil) then 
    message = "Not implemented";
  end;
  __haxe_exceptions_PosException.super(self,message,previous,pos);
end
__haxe_exceptions_NotImplementedException.__name__ = "haxe.exceptions.NotImplementedException"
__haxe_exceptions_NotImplementedException.prototype = _hx_e();

__haxe_exceptions_NotImplementedException.prototype.__class__ =  __haxe_exceptions_NotImplementedException
__haxe_exceptions_NotImplementedException.__super__ = __haxe_exceptions_PosException
setmetatable(__haxe_exceptions_NotImplementedException.prototype,{__index=__haxe_exceptions_PosException.prototype})
setmetatable(__haxe_exceptions_NotImplementedException.prototype.__properties__,{__index=__haxe_exceptions_PosException.prototype.__properties__})

__haxe_iterators_ArrayIterator.new = function(array) 
  local self = _hx_new(__haxe_iterators_ArrayIterator.prototype)
  __haxe_iterators_ArrayIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayIterator.super = function(self,array) 
  self.current = 0;
  self.array = array;
end
__haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator"
__haxe_iterators_ArrayIterator.prototype = _hx_e();
__haxe_iterators_ArrayIterator.prototype.hasNext = function(self) 
  do return self.current < self.array.length end
end
__haxe_iterators_ArrayIterator.prototype.next = function(self) 
  do return self.array[(function() 
  local _hx_obj = self;
  local _hx_fld = 'current';
  local _ = _hx_obj[_hx_fld];
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _;
   end)()] end
end

__haxe_iterators_ArrayIterator.prototype.__class__ =  __haxe_iterators_ArrayIterator

__haxe_iterators_ArrayKeyValueIterator.new = function(array) 
  local self = _hx_new(__haxe_iterators_ArrayKeyValueIterator.prototype)
  __haxe_iterators_ArrayKeyValueIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayKeyValueIterator.super = function(self,array) 
  self.array = array;
end
__haxe_iterators_ArrayKeyValueIterator.__name__ = "haxe.iterators.ArrayKeyValueIterator"
__haxe_iterators_ArrayKeyValueIterator.prototype = _hx_e();

__haxe_iterators_ArrayKeyValueIterator.prototype.__class__ =  __haxe_iterators_ArrayKeyValueIterator

__haxe_xml_XmlParserException.new = function(message,xml,position) 
  local self = _hx_new(__haxe_xml_XmlParserException.prototype)
  __haxe_xml_XmlParserException.super(self,message,xml,position)
  return self
end
__haxe_xml_XmlParserException.super = function(self,message,xml,position) 
  self.xml = xml;
  self.message = message;
  self.position = position;
  self.lineNumber = 1;
  self.positionAtLine = 0;
  local _g = 0;
  local _g1 = position;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    local c = _G.string.byte(xml, i + 1);
    if (c == 10) then 
      self.lineNumber = self.lineNumber + 1;
      self.positionAtLine = 0;
    else
      if (c ~= 13) then 
        self.positionAtLine = self.positionAtLine + 1;
      end;
    end;
  end;
end
__haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException"
__haxe_xml_XmlParserException.prototype = _hx_e();
__haxe_xml_XmlParserException.prototype.toString = function(self) 
  local c = Type.getClass(self);
  do return Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(c.__name__) .. Std.string(": ")) .. Std.string(self.message)) .. Std.string(" at line ")) .. Std.string(self.lineNumber)) .. Std.string(" char ")) .. Std.string(self.positionAtLine) end
end

__haxe_xml_XmlParserException.prototype.__class__ =  __haxe_xml_XmlParserException

__haxe_xml_Parser.new = {}
__haxe_xml_Parser.__name__ = "haxe.xml.Parser"
__haxe_xml_Parser.parse = function(str,strict) 
  if (strict == nil) then 
    strict = false;
  end;
  local doc = Xml.createDocument();
  __haxe_xml_Parser.doParse(str, strict, 0, doc);
  do return doc end;
end
__haxe_xml_Parser.doParse = function(str,strict,p,parent) 
  if (p == nil) then 
    p = 0;
  end;
  local xml = nil;
  local state = 1;
  local next = 1;
  local aname = nil;
  local start = 0;
  local nsubs = 0;
  local nbrackets = 0;
  local buf = StringBuf.new();
  local escapeNext = 1;
  local attrValQuote = -1;
  local _hx_continue_1 = false;
  while (p < #str) do _hx_do_first_1 = false;
    repeat 
    local c = _G.string.byte(str, p + 1);
    local state1 = state;
    if (state1) == 0 then 
      local c = c;
      if (c) == 9 or (c) == 10 or (c) == 13 or (c) == 32 then else
      state = next;
      break; end;
    elseif (state1) == 1 then 
      if (c == 60) then 
        state = 0;
        next = 2;
      else
        start = p;
        state = 13;
        break;
      end;
    elseif (state1) == 2 then 
      local c = c;
      if (c) == 33 then 
        if (_G.string.byte(str, (p + 1) + 1) == 91) then 
          p = p + 2;
          if (_G.string.upper(String.prototype.substr(str, p, 6)) ~= "CDATA[") then 
            _G.error(__haxe_Exception.thrown(__haxe_xml_XmlParserException.new("Expected <![CDATA[", str, p)),0);
          end;
          p = p + 5;
          state = 17;
          start = p + 1;
        else
          if ((_G.string.byte(str, (p + 1) + 1) == 68) or (_G.string.byte(str, (p + 1) + 1) == 100)) then 
            if (_G.string.upper(String.prototype.substr(str, p + 2, 6)) ~= "OCTYPE") then 
              _G.error(__haxe_Exception.thrown(__haxe_xml_XmlParserException.new("Expected <!DOCTYPE", str, p)),0);
            end;
            p = p + 8;
            state = 16;
            start = p + 1;
          else
            if ((_G.string.byte(str, (p + 1) + 1) ~= 45) or (_G.string.byte(str, (p + 2) + 1) ~= 45)) then 
              _G.error(__haxe_Exception.thrown(__haxe_xml_XmlParserException.new("Expected <!--", str, p)),0);
            else
              p = p + 2;
              state = 15;
              start = p + 1;
            end;
          end;
        end;
      elseif (c) == 47 then 
        if (parent == nil) then 
          _G.error(__haxe_Exception.thrown(__haxe_xml_XmlParserException.new("Expected node name", str, p)),0);
        end;
        start = p + 1;
        state = 0;
        next = 10;
      elseif (c) == 63 then 
        state = 14;
        start = p;else
      state = 3;
      start = p;
      break; end;
    elseif (state1) == 3 then 
      if (not ((((((((c >= 97) and (c <= 122)) or ((c >= 65) and (c <= 90))) or ((c >= 48) and (c <= 57))) or (c == 58)) or (c == 46)) or (c == 95)) or (c == 45))) then 
        if (p == start) then 
          _G.error(__haxe_Exception.thrown(__haxe_xml_XmlParserException.new("Expected node name", str, p)),0);
        end;
        xml = Xml.createElement(String.prototype.substr(str, start, p - start));
        parent:addChild(xml);
        nsubs = nsubs + 1;
        state = 0;
        next = 4;
        break;
      end;
    elseif (state1) == 4 then 
      local c = c;
      if (c) == 47 then 
        state = 11;
      elseif (c) == 62 then 
        state = 9;else
      state = 5;
      start = p;
      break; end;
    elseif (state1) == 5 then 
      if (not ((((((((c >= 97) and (c <= 122)) or ((c >= 65) and (c <= 90))) or ((c >= 48) and (c <= 57))) or (c == 58)) or (c == 46)) or (c == 95)) or (c == 45))) then 
        if (start == p) then 
          _G.error(__haxe_Exception.thrown(__haxe_xml_XmlParserException.new("Expected attribute name", str, p)),0);
        end;
        local tmp = String.prototype.substr(str, start, p - start);
        aname = tmp;
        if (xml:exists(aname)) then 
          _G.error(__haxe_Exception.thrown(__haxe_xml_XmlParserException.new(Std.string(Std.string("Duplicate attribute [") .. Std.string(aname)) .. Std.string("]"), str, p)),0);
        end;
        state = 0;
        next = 6;
        break;
      end;
    elseif (state1) == 6 then 
      if (c == 61) then 
        state = 0;
        next = 7;
      else
        _G.error(__haxe_Exception.thrown(__haxe_xml_XmlParserException.new("Expected =", str, p)),0);
      end;
    elseif (state1) == 7 then 
      local c1 = c;
      if (c1) == 34 or (c1) == 39 then 
        buf = StringBuf.new();
        state = 8;
        start = p + 1;
        attrValQuote = c;else
      _G.error(__haxe_Exception.thrown(__haxe_xml_XmlParserException.new("Expected \"", str, p)),0); end;
    elseif (state1) == 8 then 
      local c1 = c;
      if (c1) == 38 then 
        local len = p - start;
        local part = (function() 
          local _hx_1
          if (len == nil) then 
          _hx_1 = String.prototype.substr(str, start); else 
          _hx_1 = String.prototype.substr(str, start, len); end
          return _hx_1
        end )();
        _G.table.insert(buf.b, part);
        local buf = buf;
        buf.length = buf.length + #part;
        state = 18;
        escapeNext = 8;
        start = p + 1;
      elseif (c1) == 60 or (c1) == 62 then 
        if (strict) then 
          _G.error(__haxe_Exception.thrown(__haxe_xml_XmlParserException.new(Std.string(Std.string("Invalid unescaped ") .. Std.string(_G.string.char(c))) .. Std.string(" in attribute value"), str, p)),0);
        else
          if (c == attrValQuote) then 
            local len = p - start;
            local part = (function() 
              local _hx_2
              if (len == nil) then 
              _hx_2 = String.prototype.substr(str, start); else 
              _hx_2 = String.prototype.substr(str, start, len); end
              return _hx_2
            end )();
            _G.table.insert(buf.b, part);
            local buf1 = buf;
            buf1.length = buf1.length + #part;
            local val = _G.table.concat(buf.b);
            buf = StringBuf.new();
            xml:set(aname, val);
            state = 0;
            next = 4;
          end;
        end;else
      if (c == attrValQuote) then 
        local len = p - start;
        local part = (function() 
          local _hx_3
          if (len == nil) then 
          _hx_3 = String.prototype.substr(str, start); else 
          _hx_3 = String.prototype.substr(str, start, len); end
          return _hx_3
        end )();
        _G.table.insert(buf.b, part);
        local buf1 = buf;
        buf1.length = buf1.length + #part;
        local val = _G.table.concat(buf.b);
        buf = StringBuf.new();
        xml:set(aname, val);
        state = 0;
        next = 4;
      end; end;
    elseif (state1) == 9 then 
      p = __haxe_xml_Parser.doParse(str, strict, p, xml);
      start = p;
      state = 1;
    elseif (state1) == 10 then 
      if (not ((((((((c >= 97) and (c <= 122)) or ((c >= 65) and (c <= 90))) or ((c >= 48) and (c <= 57))) or (c == 58)) or (c == 46)) or (c == 95)) or (c == 45))) then 
        if (start == p) then 
          _G.error(__haxe_Exception.thrown(__haxe_xml_XmlParserException.new("Expected node name", str, p)),0);
        end;
        local v = String.prototype.substr(str, start, p - start);
        if ((parent == nil) or (parent.nodeType ~= 0)) then 
          _G.error(__haxe_Exception.thrown(__haxe_xml_XmlParserException.new(Std.string(Std.string("Unexpected </") .. Std.string(v)) .. Std.string(">, tag is not open"), str, p)),0);
        end;
        if (parent.nodeType ~= Xml.Element) then 
          _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element but found ") .. Std.string(((function() 
            local _hx_4
            if (parent.nodeType == nil) then 
            _hx_4 = "null"; else 
            _hx_4 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(parent.nodeType); end
            return _hx_4
          end )()))),0);
        end;
        if (v ~= parent.nodeName) then 
          if (parent.nodeType ~= Xml.Element) then 
            _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element but found ") .. Std.string(((function() 
              local _hx_5
              if (parent.nodeType == nil) then 
              _hx_5 = "null"; else 
              _hx_5 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(parent.nodeType); end
              return _hx_5
            end )()))),0);
          end;
          _G.error(__haxe_Exception.thrown(__haxe_xml_XmlParserException.new(Std.string(Std.string("Expected </") .. Std.string(parent.nodeName)) .. Std.string(">"), str, p)),0);
        end;
        state = 0;
        next = 12;
        break;
      end;
    elseif (state1) == 11 then 
      if (c == 62) then 
        state = 1;
      else
        _G.error(__haxe_Exception.thrown(__haxe_xml_XmlParserException.new("Expected >", str, p)),0);
      end;
    elseif (state1) == 12 then 
      if (c == 62) then 
        if (nsubs == 0) then 
          parent:addChild(Xml.createPCData(""));
        end;
        do return p end;
      else
        _G.error(__haxe_Exception.thrown(__haxe_xml_XmlParserException.new("Expected >", str, p)),0);
      end;
    elseif (state1) == 13 then 
      if (c == 60) then 
        local len = p - start;
        local part = (function() 
          local _hx_6
          if (len == nil) then 
          _hx_6 = String.prototype.substr(str, start); else 
          _hx_6 = String.prototype.substr(str, start, len); end
          return _hx_6
        end )();
        _G.table.insert(buf.b, part);
        local buf1 = buf;
        buf1.length = buf1.length + #part;
        local child = Xml.createPCData(_G.table.concat(buf.b));
        buf = StringBuf.new();
        parent:addChild(child);
        nsubs = nsubs + 1;
        state = 0;
        next = 2;
      else
        if (c == 38) then 
          local len = p - start;
          local part = (function() 
            local _hx_7
            if (len == nil) then 
            _hx_7 = String.prototype.substr(str, start); else 
            _hx_7 = String.prototype.substr(str, start, len); end
            return _hx_7
          end )();
          _G.table.insert(buf.b, part);
          local buf = buf;
          buf.length = buf.length + #part;
          state = 18;
          escapeNext = 13;
          start = p + 1;
        end;
      end;
    elseif (state1) == 14 then 
      if ((c == 63) and (_G.string.byte(str, (p + 1) + 1) == 62)) then 
        p = p + 1;
        local str = String.prototype.substr(str, start + 1, (p - start) - 2);
        parent:addChild(Xml.createProcessingInstruction(str));
        nsubs = nsubs + 1;
        state = 1;
      end;
    elseif (state1) == 15 then 
      if (((c == 45) and (_G.string.byte(str, (p + 1) + 1) == 45)) and (_G.string.byte(str, (p + 2) + 1) == 62)) then 
        parent:addChild(Xml.createComment(String.prototype.substr(str, start, p - start)));
        nsubs = nsubs + 1;
        p = p + 2;
        state = 1;
      end;
    elseif (state1) == 16 then 
      if (c == 91) then 
        nbrackets = nbrackets + 1;
      else
        if (c == 93) then 
          nbrackets = nbrackets - 1;
        else
          if ((c == 62) and (nbrackets == 0)) then 
            parent:addChild(Xml.createDocType(String.prototype.substr(str, start, p - start)));
            nsubs = nsubs + 1;
            state = 1;
          end;
        end;
      end;
    elseif (state1) == 17 then 
      if (((c == 93) and (_G.string.byte(str, (p + 1) + 1) == 93)) and (_G.string.byte(str, (p + 2) + 1) == 62)) then 
        local child = Xml.createCData(String.prototype.substr(str, start, p - start));
        parent:addChild(child);
        nsubs = nsubs + 1;
        p = p + 2;
        state = 1;
      end;
    elseif (state1) == 18 then 
      if (c == 59) then 
        local s = String.prototype.substr(str, start, p - start);
        if (_G.string.byte(s, 1) == 35) then 
          local c = (function() 
            local _hx_8
            if (_G.string.byte(s, 2) == 120) then 
            _hx_8 = Std.parseInt(Std.string("0") .. Std.string(String.prototype.substr(s, 1, #s - 1))); else 
            _hx_8 = Std.parseInt(String.prototype.substr(s, 1, #s - 1)); end
            return _hx_8
          end )();
          _G.table.insert(buf.b, _G.string.char(c));
          local buf = buf;
          buf.length = buf.length + 1;
        else
          if (__haxe_xml_Parser.escapes.h[s] == nil) then 
            if (strict) then 
              _G.error(__haxe_Exception.thrown(__haxe_xml_XmlParserException.new(Std.string("Undefined entity: ") .. Std.string(s), str, p)),0);
            end;
            local str = Std.string(Std.string(Std.string("&") .. Std.string(s)) .. Std.string(";"));
            _G.table.insert(buf.b, str);
            local buf = buf;
            buf.length = buf.length + #str;
          else
            local ret = __haxe_xml_Parser.escapes.h[s];
            local str = Std.string((function() 
              local _hx_9
              if (ret == __haxe_ds_StringMap.tnull) then 
              _hx_9 = nil; else 
              _hx_9 = ret; end
              return _hx_9
            end )());
            _G.table.insert(buf.b, str);
            local buf = buf;
            buf.length = buf.length + #str;
          end;
        end;
        start = p + 1;
        state = escapeNext;
      else
        if (not ((((((((c >= 97) and (c <= 122)) or ((c >= 65) and (c <= 90))) or ((c >= 48) and (c <= 57))) or (c == 58)) or (c == 46)) or (c == 95)) or (c == 45)) and (c ~= 35)) then 
          if (strict) then 
            _G.error(__haxe_Exception.thrown(__haxe_xml_XmlParserException.new(Std.string("Invalid character in entity: ") .. Std.string(_G.string.char(c)), str, p)),0);
          end;
          _G.table.insert(buf.b, _G.string.char(38));
          local buf1 = buf;
          buf1.length = buf1.length + 1;
          local len = p - start;
          local part = (function() 
            local _hx_10
            if (len == nil) then 
            _hx_10 = String.prototype.substr(str, start); else 
            _hx_10 = String.prototype.substr(str, start, len); end
            return _hx_10
          end )();
          _G.table.insert(buf.b, part);
          local buf = buf;
          buf.length = buf.length + #part;
          p = p - 1;
          start = p + 1;
          state = escapeNext;
        end;
      end; end;
    p = p + 1;until true
    if _hx_continue_1 then 
    _hx_continue_1 = false;
    break;
    end;
    
  end;
  if (state == 1) then 
    start = p;
    state = 13;
  end;
  if (state == 13) then 
    if (parent.nodeType == 0) then 
      if (parent.nodeType ~= Xml.Element) then 
        _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element but found ") .. Std.string(((function() 
          local _hx_11
          if (parent.nodeType == nil) then 
          _hx_11 = "null"; else 
          _hx_11 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(parent.nodeType); end
          return _hx_11
        end )()))),0);
      end;
      _G.error(__haxe_Exception.thrown(__haxe_xml_XmlParserException.new(Std.string(Std.string("Unclosed node <") .. Std.string(parent.nodeName)) .. Std.string(">"), str, p)),0);
    end;
    if ((p ~= start) or (nsubs == 0)) then 
      local len = p - start;
      local part = (function() 
        local _hx_12
        if (len == nil) then 
        _hx_12 = String.prototype.substr(str, start); else 
        _hx_12 = String.prototype.substr(str, start, len); end
        return _hx_12
      end )();
      _G.table.insert(buf.b, part);
      local buf1 = buf;
      buf1.length = buf1.length + #part;
      parent:addChild(Xml.createPCData(_G.table.concat(buf.b)));
      nsubs = nsubs + 1;
    end;
    do return p end;
  end;
  if ((not strict and (state == 18)) and (escapeNext == 13)) then 
    _G.table.insert(buf.b, _G.string.char(38));
    local buf1 = buf;
    buf1.length = buf1.length + 1;
    local len = p - start;
    local part = (function() 
      local _hx_13
      if (len == nil) then 
      _hx_13 = String.prototype.substr(str, start); else 
      _hx_13 = String.prototype.substr(str, start, len); end
      return _hx_13
    end )();
    _G.table.insert(buf.b, part);
    local buf1 = buf;
    buf1.length = buf1.length + #part;
    parent:addChild(Xml.createPCData(_G.table.concat(buf.b)));
    nsubs = nsubs + 1;
    do return p end;
  end;
  _G.error(__haxe_Exception.thrown(__haxe_xml_XmlParserException.new("Unexpected end", str, p)),0);
end

__haxe_xml_Printer.new = function(pretty) 
  local self = _hx_new(__haxe_xml_Printer.prototype)
  __haxe_xml_Printer.super(self,pretty)
  return self
end
__haxe_xml_Printer.super = function(self,pretty) 
  self.output = StringBuf.new();
  self.pretty = pretty;
end
__haxe_xml_Printer.__name__ = "haxe.xml.Printer"
__haxe_xml_Printer.print = function(xml,pretty) 
  if (pretty == nil) then 
    pretty = false;
  end;
  local printer = __haxe_xml_Printer.new(pretty);
  printer:writeNode(xml, "");
  do return _G.table.concat(printer.output.b) end;
end
__haxe_xml_Printer.prototype = _hx_e();
__haxe_xml_Printer.prototype.writeNode = function(self,value,tabs) 
  local _g = value.nodeType;
  if (_g) == 0 then 
    local _this = self.output;
    local str = Std.string(Std.string(tabs) .. Std.string("<"));
    _G.table.insert(_this.b, str);
    local _this = _this;
    _this.length = _this.length + #str;
    if (value.nodeType ~= Xml.Element) then 
      _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element but found ") .. Std.string(((function() 
        local _hx_1
        if (value.nodeType == nil) then 
        _hx_1 = "null"; else 
        _hx_1 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(value.nodeType); end
        return _hx_1
      end )()))),0);
    end;
    local _this = self.output;
    local str = Std.string(value.nodeName);
    _G.table.insert(_this.b, str);
    local _this = _this;
    _this.length = _this.length + #str;
    local attribute = value:attributes();
    while (attribute:hasNext()) do _hx_do_first_1 = false;
      
      local attribute = attribute:next();
      local _this = self.output;
      local str = Std.string(Std.string(Std.string(" ") .. Std.string(attribute)) .. Std.string("=\""));
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + #str;
      local input = StringTools.htmlEscape(value:get(attribute), true);
      local _this = self.output;
      local str = Std.string(input);
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + #str;
      local _this = self.output;
      local str = "\"";
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + #str;
    end;
    if (self:hasChildren(value)) then 
      local _this = self.output;
      local str = ">";
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + #str;
      if (self.pretty) then 
        local _this = self.output;
        local str = "\n";
        _G.table.insert(_this.b, str);
        local _this = _this;
        _this.length = _this.length + #str;
      end;
      if ((value.nodeType ~= Xml.Document) and (value.nodeType ~= Xml.Element)) then 
        _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element or Document but found ") .. Std.string(((function() 
          local _hx_2
          if (value.nodeType == nil) then 
          _hx_2 = "null"; else 
          _hx_2 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(value.nodeType); end
          return _hx_2
        end )()))),0);
      end;
      local _g_current = 0;
      local _g_array = value.children;
      while (_g_current < _g_array.length) do _hx_do_first_1 = false;
        
        _g_current = _g_current + 1;
        local child = _g_array[_g_current - 1];
        self:writeNode(child, (function() 
          local _hx_3
          if (self.pretty) then 
          _hx_3 = Std.string(tabs) .. Std.string("\t"); else 
          _hx_3 = tabs; end
          return _hx_3
        end )());
      end;
      local _this = self.output;
      local str = Std.string(Std.string(tabs) .. Std.string("</"));
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + #str;
      if (value.nodeType ~= Xml.Element) then 
        _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element but found ") .. Std.string(((function() 
          local _hx_4
          if (value.nodeType == nil) then 
          _hx_4 = "null"; else 
          _hx_4 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(value.nodeType); end
          return _hx_4
        end )()))),0);
      end;
      local _this = self.output;
      local str = Std.string(value.nodeName);
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + #str;
      local _this = self.output;
      local str = ">";
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + #str;
      if (self.pretty) then 
        local _this = self.output;
        local str = "\n";
        _G.table.insert(_this.b, str);
        local _this = _this;
        _this.length = _this.length + #str;
      end;
    else
      local _this = self.output;
      local str = "/>";
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + #str;
      if (self.pretty) then 
        local _this = self.output;
        local str = "\n";
        _G.table.insert(_this.b, str);
        local _this = _this;
        _this.length = _this.length + #str;
      end;
    end;
  elseif (_g) == 1 then 
    if ((value.nodeType == Xml.Document) or (value.nodeType == Xml.Element)) then 
      _G.error(__haxe_Exception.thrown(Std.string("Bad node type, unexpected ") .. Std.string(((function() 
        local _hx_5
        if (value.nodeType == nil) then 
        _hx_5 = "null"; else 
        _hx_5 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(value.nodeType); end
        return _hx_5
      end )()))),0);
    end;
    local nodeValue = value.nodeValue;
    if (#nodeValue ~= 0) then 
      local input = Std.string(tabs) .. Std.string(StringTools.htmlEscape(nodeValue));
      local _this = self.output;
      local str = Std.string(input);
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + #str;
      if (self.pretty) then 
        local _this = self.output;
        local str = "\n";
        _G.table.insert(_this.b, str);
        local _this = _this;
        _this.length = _this.length + #str;
      end;
    end;
  elseif (_g) == 2 then 
    local _this = self.output;
    local str = Std.string(Std.string(tabs) .. Std.string("<![CDATA["));
    _G.table.insert(_this.b, str);
    local _this = _this;
    _this.length = _this.length + #str;
    if ((value.nodeType == Xml.Document) or (value.nodeType == Xml.Element)) then 
      _G.error(__haxe_Exception.thrown(Std.string("Bad node type, unexpected ") .. Std.string(((function() 
        local _hx_6
        if (value.nodeType == nil) then 
        _hx_6 = "null"; else 
        _hx_6 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(value.nodeType); end
        return _hx_6
      end )()))),0);
    end;
    local _this = self.output;
    local str = Std.string(value.nodeValue);
    _G.table.insert(_this.b, str);
    local _this = _this;
    _this.length = _this.length + #str;
    local _this = self.output;
    local str = "]]>";
    _G.table.insert(_this.b, str);
    local _this = _this;
    _this.length = _this.length + #str;
    if (self.pretty) then 
      local _this = self.output;
      local str = "\n";
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + #str;
    end;
  elseif (_g) == 3 then 
    if ((value.nodeType == Xml.Document) or (value.nodeType == Xml.Element)) then 
      _G.error(__haxe_Exception.thrown(Std.string("Bad node type, unexpected ") .. Std.string(((function() 
        local _hx_7
        if (value.nodeType == nil) then 
        _hx_7 = "null"; else 
        _hx_7 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(value.nodeType); end
        return _hx_7
      end )()))),0);
    end;
    local commentContent = value.nodeValue;
    commentContent = EReg.new("[\n\r\t]+", "g"):replace(commentContent, "");
    commentContent = Std.string(Std.string("<!--") .. Std.string(commentContent)) .. Std.string("-->");
    local _this = self.output;
    local str = Std.string(tabs);
    _G.table.insert(_this.b, str);
    local _this = _this;
    _this.length = _this.length + #str;
    local input = StringTools.trim(commentContent);
    local _this = self.output;
    local str = Std.string(input);
    _G.table.insert(_this.b, str);
    local _this = _this;
    _this.length = _this.length + #str;
    if (self.pretty) then 
      local _this = self.output;
      local str = "\n";
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + #str;
    end;
  elseif (_g) == 4 then 
    if ((value.nodeType == Xml.Document) or (value.nodeType == Xml.Element)) then 
      _G.error(__haxe_Exception.thrown(Std.string("Bad node type, unexpected ") .. Std.string(((function() 
        local _hx_8
        if (value.nodeType == nil) then 
        _hx_8 = "null"; else 
        _hx_8 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(value.nodeType); end
        return _hx_8
      end )()))),0);
    end;
    local _this = self.output;
    local str = Std.string(Std.string(Std.string("<!DOCTYPE ") .. Std.string(value.nodeValue)) .. Std.string(">"));
    _G.table.insert(_this.b, str);
    local _this = _this;
    _this.length = _this.length + #str;
    if (self.pretty) then 
      local _this = self.output;
      local str = "\n";
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + #str;
    end;
  elseif (_g) == 5 then 
    if ((value.nodeType == Xml.Document) or (value.nodeType == Xml.Element)) then 
      _G.error(__haxe_Exception.thrown(Std.string("Bad node type, unexpected ") .. Std.string(((function() 
        local _hx_9
        if (value.nodeType == nil) then 
        _hx_9 = "null"; else 
        _hx_9 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(value.nodeType); end
        return _hx_9
      end )()))),0);
    end;
    local _this = self.output;
    local str = Std.string(Std.string(Std.string("<?") .. Std.string(value.nodeValue)) .. Std.string("?>"));
    _G.table.insert(_this.b, str);
    local _this = _this;
    _this.length = _this.length + #str;
    if (self.pretty) then 
      local _this = self.output;
      local str = "\n";
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + #str;
    end;
  elseif (_g) == 6 then 
    if ((value.nodeType ~= Xml.Document) and (value.nodeType ~= Xml.Element)) then 
      _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element or Document but found ") .. Std.string(((function() 
        local _hx_10
        if (value.nodeType == nil) then 
        _hx_10 = "null"; else 
        _hx_10 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(value.nodeType); end
        return _hx_10
      end )()))),0);
    end;
    local _g_current = 0;
    local _g_array = value.children;
    while (_g_current < _g_array.length) do _hx_do_first_1 = false;
      
      _g_current = _g_current + 1;
      local child = _g_array[_g_current - 1];
      self:writeNode(child, tabs);
    end; end;
end
__haxe_xml_Printer.prototype.hasChildren = function(self,value) 
  if ((value.nodeType ~= Xml.Document) and (value.nodeType ~= Xml.Element)) then 
    _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element or Document but found ") .. Std.string(((function() 
      local _hx_1
      if (value.nodeType == nil) then 
      _hx_1 = "null"; else 
      _hx_1 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(value.nodeType); end
      return _hx_1
    end )()))),0);
  end;
  local _g_current = 0;
  local _g_array = value.children;
  while (_g_current < _g_array.length) do _hx_do_first_1 = false;
    
    _g_current = _g_current + 1;
    local child = _g_array[_g_current - 1];
    local _g = child.nodeType;
    if (_g) == 0 or (_g) == 1 then 
      do return true end;
    elseif (_g) == 2 or (_g) == 3 then 
      if ((child.nodeType == Xml.Document) or (child.nodeType == Xml.Element)) then 
        _G.error(__haxe_Exception.thrown(Std.string("Bad node type, unexpected ") .. Std.string(((function() 
          local _hx_2
          if (child.nodeType == nil) then 
          _hx_2 = "null"; else 
          _hx_2 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(child.nodeType); end
          return _hx_2
        end )()))),0);
      end;
      if (#StringTools.ltrim(child.nodeValue) ~= 0) then 
        do return true end;
      end;else end;
  end;
  do return false end
end

__haxe_xml_Printer.prototype.__class__ =  __haxe_xml_Printer

__lua_Boot.new = {}
__lua_Boot.__name__ = "lua.Boot"
__lua_Boot.__instanceof = function(o,cl) 
  if (cl == nil) then 
    do return false end;
  end;
  local cl1 = cl;
  if (cl1) == Array then 
    do return __lua_Boot.isArray(o) end;
  elseif (cl1) == Bool then 
    do return _G.type(o) == "boolean" end;
  elseif (cl1) == Dynamic then 
    do return o ~= nil end;
  elseif (cl1) == Float then 
    do return _G.type(o) == "number" end;
  elseif (cl1) == Int then 
    if (_G.type(o) == "number") then 
      do return _hx_bit_clamp(o) == o end;
    else
      do return false end;
    end;
  elseif (cl1) == String then 
    do return _G.type(o) == "string" end;
  elseif (cl1) == _G.table then 
    do return _G.type(o) == "table" end;
  elseif (cl1) == __lua_Thread then 
    do return _G.type(o) == "thread" end;
  elseif (cl1) == __lua_UserData then 
    do return _G.type(o) == "userdata" end;else
  if (((o ~= nil) and (_G.type(o) == "table")) and (_G.type(cl) == "table")) then 
    local tmp;
    if (__lua_Boot.__instanceof(o, Array)) then 
      tmp = Array;
    else
      if (__lua_Boot.__instanceof(o, String)) then 
        tmp = String;
      else
        local cl = o.__class__;
        tmp = (function() 
          local _hx_1
          if (cl ~= nil) then 
          _hx_1 = cl; else 
          _hx_1 = nil; end
          return _hx_1
        end )();
      end;
    end;
    if (__lua_Boot.extendsOrImplements(tmp, cl)) then 
      do return true end;
    end;
    if ((function() 
      local _hx_2
      if (cl == Class) then 
      _hx_2 = o.__name__ ~= nil; else 
      _hx_2 = false; end
      return _hx_2
    end )()) then 
      do return true end;
    end;
    if ((function() 
      local _hx_3
      if (cl == Enum) then 
      _hx_3 = o.__ename__ ~= nil; else 
      _hx_3 = false; end
      return _hx_3
    end )()) then 
      do return true end;
    end;
    do return o.__enum__ == cl end;
  else
    do return false end;
  end; end;
end
__lua_Boot.isArray = function(o) 
  if (_G.type(o) == "table") then 
    if ((o.__enum__ == nil) and (_G.getmetatable(o) ~= nil)) then 
      do return _G.getmetatable(o).__index == Array.prototype end;
    else
      do return false end;
    end;
  else
    do return false end;
  end;
end
__lua_Boot.extendsOrImplements = function(cl1,cl2) 
  if ((cl1 == nil) or (cl2 == nil)) then 
    do return false end;
  else
    if (cl1 == cl2) then 
      do return true end;
    else
      if (cl1.__interfaces__ ~= nil) then 
        local intf = cl1.__interfaces__;
        local _g = 1;
        local _g1 = _hx_table.maxn(intf) + 1;
        while (_g < _g1) do _hx_do_first_1 = false;
          
          _g = _g + 1;
          local i = _g - 1;
          if (__lua_Boot.extendsOrImplements(intf[i], cl2)) then 
            do return true end;
          end;
        end;
      end;
    end;
  end;
  do return __lua_Boot.extendsOrImplements(cl1.__super__, cl2) end;
end

__lua_UserData.new = {}
__lua_UserData.__name__ = "lua.UserData"

__lua_PairTools.new = {}
__lua_PairTools.__name__ = "lua.PairTools"
__lua_PairTools.copy = function(table1) 
  local ret = ({});
  for k,v in _G.pairs(table1) do ret[k] = v end;
  do return ret end;
end

__lua_Thread.new = {}
__lua_Thread.__name__ = "lua.Thread"

__sunaba_App.new = function() 
  local self = _hx_new(__sunaba_App.prototype)
  __sunaba_App.super(self)
  return self
end
__sunaba_App.super = function(self) 
  __sunaba_core_GlobalObjectStack.initSingleton();
  self:init();
end
__sunaba_App.__name__ = "sunaba.App"
__sunaba_App.prototype = _hx_e();
__sunaba_App.prototype.get_rootElement = function(self) 
  do return _G.rootElement end
end
__sunaba_App.prototype.get_globalObjectStack = function(self) 
  do return __sunaba_core_GlobalObjectStack.getSingleton() end
end
__sunaba_App.prototype.init = function(self) 
end

__sunaba_App.prototype.__class__ =  __sunaba_App

__sunaba_App.prototype.__properties__ =  {get_globalObjectStack="get_globalObjectStack",get_rootElement="get_rootElement"}

__sunaba_core_ArrayListIterator.new = function(array) 
  local self = _hx_new(__sunaba_core_ArrayListIterator.prototype)
  __sunaba_core_ArrayListIterator.super(self,array)
  return self
end
__sunaba_core_ArrayListIterator.super = function(self,array) 
  self.index = 0;
  self.array = array;
end
__sunaba_core_ArrayListIterator.__name__ = "sunaba.core.ArrayListIterator"
__sunaba_core_ArrayListIterator.prototype = _hx_e();
__sunaba_core_ArrayListIterator.prototype.hasNext = function(self) 
  do return self.index < self.array:size() end
end
__sunaba_core_ArrayListIterator.prototype.next = function(self) 
  if (self:hasNext()) then 
    local value = self.array:get(self.index);
    self.index = self.index + 1;
    do return value end;
  else
    _G.error(__haxe_Exception.thrown("No more elements in the iterator"),0);
  end;
end

__sunaba_core_ArrayListIterator.prototype.__class__ =  __sunaba_core_ArrayListIterator

__sunaba_core__ArrayList_ArrayListAbstract_Impl_.new = {}
__sunaba_core__ArrayList_ArrayListAbstract_Impl_.__name__ = "sunaba.core._ArrayList.ArrayListAbstract_Impl_"
__sunaba_core__ArrayList_ArrayListAbstract_Impl_.get = function(this1,index) 
  do return this1:get(index) end;
end
__sunaba_core__ArrayList_ArrayListAbstract_Impl_.set = function(this1,index,value) 
  this1:set(index, value);
end
__sunaba_core__ArrayList_ArrayListAbstract_Impl_.getArray = function(this1,index) 
  do return this1:get(index) end;
end
__sunaba_core__ArrayList_ArrayListAbstract_Impl_.setArray = function(this1,index,value) 
  this1:set(index, value);
end
__sunaba_core__ArrayList_ArrayListAbstract_Impl_.forEach = function(this1,callback) 
  local _g = 0;
  local _g1 = this1:size();
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    callback(this1:get(i));
  end;
end
__sunaba_core__ArrayList_ArrayListAbstract_Impl_.toArray = function(this1) 
  local result = Array.new();
  local _g = 0;
  local _g1 = this1:size();
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    result[i] = this1:get(i);
  end;
  do return result end;
end
__sunaba_core__ArrayList_ArrayListAbstract_Impl_.fromArray = function(array) 
  local result = ArrayList.new();
  local _g = 0;
  while (_g < array.length) do _hx_do_first_1 = false;
    
    local item = array[_g];
    _g = _g + 1;
    result:append(item);
  end;
  do return result end;
end
__sunaba_core__ArrayList_ArrayListAbstract_Impl_.iterator = function(this1) 
  do return __sunaba_core_ArrayListIterator.new(this1) end;
end

__sunaba_core__CanvasItem_CanvasItemAbstract_Impl_.new = {}
__sunaba_core__CanvasItem_CanvasItemAbstract_Impl_.__name__ = "sunaba.core._CanvasItem.CanvasItemAbstract_Impl_"
__sunaba_core__CanvasItem_CanvasItemAbstract_Impl_.fromElement = function(element) 
  local cItem = Element.cast(element);
  if (cItem:isNull()) then 
    do return nil end;
  end;
  do return cItem end;
end

__sunaba_core_DictionaryIterator.new = function(dict) 
  local self = _hx_new(__sunaba_core_DictionaryIterator.prototype)
  __sunaba_core_DictionaryIterator.super(self,dict)
  return self
end
__sunaba_core_DictionaryIterator.super = function(self,dict) 
  self.index = 0;
  self.dict = dict;
end
__sunaba_core_DictionaryIterator.__name__ = "sunaba.core.DictionaryIterator"
__sunaba_core_DictionaryIterator.prototype = _hx_e();
__sunaba_core_DictionaryIterator.prototype.hasNext = function(self) 
  do return self.index < self.dict:size() end
end
__sunaba_core_DictionaryIterator.prototype.next = function(self) 
  if (self:hasNext()) then 
    local key = self.dict:keys():get(self.index);
    self.index = self.index + 1;
    do return key end;
  else
    _G.error(__haxe_Exception.thrown("No more elements in the dictionary."),0);
  end;
end

__sunaba_core_DictionaryIterator.prototype.__class__ =  __sunaba_core_DictionaryIterator

__sunaba_core__Dictionary_DictionaryAbstract_Impl_.new = {}
__sunaba_core__Dictionary_DictionaryAbstract_Impl_.__name__ = "sunaba.core._Dictionary.DictionaryAbstract_Impl_"
__sunaba_core__Dictionary_DictionaryAbstract_Impl_.get = function(this1,key) 
  do return this1:get(key) end;
end
__sunaba_core__Dictionary_DictionaryAbstract_Impl_.set = function(this1,key,value) 
  this1:set(key, value);
end
__sunaba_core__Dictionary_DictionaryAbstract_Impl_.getArray = function(this1,key) 
  do return this1:get(key) end;
end
__sunaba_core__Dictionary_DictionaryAbstract_Impl_.setArray = function(this1,key,value) 
  this1:set(key, value);
end
__sunaba_core__Dictionary_DictionaryAbstract_Impl_.forEach = function(this1,func) 
  local keys = this1:keys();
  local _g = 0;
  local _g1 = keys:size();
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    local key = keys:get(i);
    func(key, this1:get(key));
  end;
end
__sunaba_core__Dictionary_DictionaryAbstract_Impl_.iterator = function(this1) 
  do return __sunaba_core_DictionaryIterator.new(this1) end;
end

__sunaba_core__Element_ElementAbstract_Impl_.new = {}
__sunaba_core__Element_ElementAbstract_Impl_.__name__ = "sunaba.core._Element.ElementAbstract_Impl_"
__sunaba_core__Element_ElementAbstract_Impl_.fromElement = function(element) 
  local element = Element.cast(element);
  if (element:isNull()) then 
    do return nil end;
  end;
  do return element end;
end

__sunaba_core__Environment_EnvironmentAbstract_Impl_.new = {}
__sunaba_core__Environment_EnvironmentAbstract_Impl_.__name__ = "sunaba.core._Environment.EnvironmentAbstract_Impl_"
__sunaba_core__Environment_EnvironmentAbstract_Impl_.fromResource = function(resource) 
  local environment = Environment.cast(resource);
  if (environment:isNull()) then 
    do return nil end;
  end;
  do return environment end;
end

__sunaba_core__Event_EventAbstract_Impl_.new = {}
__sunaba_core__Event_EventAbstract_Impl_.__name__ = "sunaba.core._Event.EventAbstract_Impl_"
__sunaba_core__Event_EventAbstract_Impl_.callNoArgs = function(this1) 
  this1:emit();
end
__sunaba_core__Event_EventAbstract_Impl_.call = function(this1,...) 
  local args = {...}
  this1:emit(_hx_table.unpack(args));
end

__sunaba_core__Font_FontAbstract_Impl_.new = {}
__sunaba_core__Font_FontAbstract_Impl_.__name__ = "sunaba.core._Font.FontAbstract_Impl_"
__sunaba_core__Font_FontAbstract_Impl_.fromResource = function(resource) 
  local font = Font.cast(resource);
  if (font:isNull()) then 
    do return nil end;
  end;
  do return font end;
end

__sunaba_core__FontFile_FontFileAbstract_Impl_.new = {}
__sunaba_core__FontFile_FontFileAbstract_Impl_.__name__ = "sunaba.core._FontFile.FontFileAbstract_Impl_"
__sunaba_core__FontFile_FontFileAbstract_Impl_.fromResource = function(resource) 
  local font = FontFile.cast(resource);
  if (font:isNull()) then 
    do return nil end;
  end;
  do return font end;
end

__sunaba_core_GlobalObjectStack.new = function() 
  local self = _hx_new(__sunaba_core_GlobalObjectStack.prototype)
  __sunaba_core_GlobalObjectStack.super(self)
  return self
end
__sunaba_core_GlobalObjectStack.super = function(self) 
  self.stack = _hx_tab_array({}, 0);
end
__sunaba_core_GlobalObjectStack.__name__ = "sunaba.core.GlobalObjectStack"
__sunaba_core_GlobalObjectStack.getSingleton = function() 
  local gos = _G.globalObjectStack;
  if (gos == nil) then 
    __sunaba_core_GlobalObjectStack.initSingleton();
    gos = _G.globalObjectStack;
    if (gos == nil) then 
      _G.error(__haxe_Exception.thrown("GlobalObjectStack is not initialized"),0);
    end;
  end;
  do return gos end;
end
__sunaba_core_GlobalObjectStack.initSingleton = function() 
  local singleton = __sunaba_core_GlobalObjectStack.new();
  _G.globalObjectStack = singleton;
end
__sunaba_core_GlobalObjectStack.prototype = _hx_e();

__sunaba_core_GlobalObjectStack.prototype.__class__ =  __sunaba_core_GlobalObjectStack

__sunaba_core__Image_ImageAbstarct_Impl_.new = {}
__sunaba_core__Image_ImageAbstarct_Impl_.__name__ = "sunaba.core._Image.ImageAbstarct_Impl_"
__sunaba_core__Image_ImageAbstarct_Impl_.fromResource = function(resource) 
  local img = Image.cast(resource);
  if (img:isNull()) then 
    do return nil end;
  end;
  do return img end;
end

__sunaba_core__ImageTexture_ImageTextureAbstract_Impl_.new = {}
__sunaba_core__ImageTexture_ImageTextureAbstract_Impl_.__name__ = "sunaba.core._ImageTexture.ImageTextureAbstract_Impl_"
__sunaba_core__ImageTexture_ImageTextureAbstract_Impl_.fromResource = function(resource) 
  local imgTxt = ImageTexture.cast(resource);
  if (imgTxt:isNull()) then 
    do return nil end;
  end;
  do return imgTxt end;
end

__sunaba_core__Material_MaterialAbstract_Impl_.new = {}
__sunaba_core__Material_MaterialAbstract_Impl_.__name__ = "sunaba.core._Material.MaterialAbstract_Impl_"
__sunaba_core__Material_MaterialAbstract_Impl_.fromResource = function(resource) 
  local material = Material.cast(resource);
  if (material:isNull()) then 
    do return nil end;
  end;
  do return material end;
end

__sunaba_core__Resource_ResourceAbstarct_Impl_.new = {}
__sunaba_core__Resource_ResourceAbstarct_Impl_.__name__ = "sunaba.core._Resource.ResourceAbstarct_Impl_"
__sunaba_core__Resource_ResourceAbstarct_Impl_.fromResource = function(resource) 
  local res = Resource.cast(resource);
  if (res:isNull()) then 
    do return nil end;
  end;
  do return res end;
end

__sunaba_core_StackHandle.new = function(object) 
  local self = _hx_new(__sunaba_core_StackHandle.prototype)
  __sunaba_core_StackHandle.super(self,object)
  return self
end
__sunaba_core_StackHandle.super = function(self,object) 
  self.object = object;
end
__sunaba_core_StackHandle.__name__ = "sunaba.core.StackHandle"
__sunaba_core_StackHandle.prototype = _hx_e();

__sunaba_core_StackHandle.prototype.__class__ =  __sunaba_core_StackHandle

__sunaba_core__StringArray_StringArray_Impl_.new = {}
__sunaba_core__StringArray_StringArray_Impl_.__name__ = "sunaba.core._StringArray.StringArray_Impl_"
__sunaba_core__StringArray_StringArray_Impl_.toArray = function(this1) 
  local table = this1;
  local length = nil;
  local tab = __lua_PairTools.copy(table);
  local length = length;
  if (length == nil) then 
    length = _hx_table.maxn(tab);
    if (length > 0) then 
      local head = tab[1];
      _G.table.remove(tab, 1);
      tab[0] = head;
      do return _hx_tab_array(tab, length) end;
    else
      do return _hx_tab_array({}, 0) end;
    end;
  else
    do return _hx_tab_array(tab, length) end;
  end;
end
__sunaba_core__StringArray_StringArray_Impl_.fromArray = function(array) 
  local ret = ({});
  local _g = 0;
  local _g1 = array.length;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local idx = _g - 1;
    ret[idx + 1] = array[idx];
  end;
  local result = ret;
  do return result end;
end

__sunaba_core__Texture_TextureAbstract_Impl_.new = {}
__sunaba_core__Texture_TextureAbstract_Impl_.__name__ = "sunaba.core._Texture.TextureAbstract_Impl_"
__sunaba_core__Texture_TextureAbstract_Impl_.fromResource = function(resource) 
  local txt = Texture.cast(resource);
  if (txt:isNull()) then 
    do return nil end;
  end;
  do return txt end;
end

__sunaba_core__Texture2D_Texture2DAbstract_Impl_.new = {}
__sunaba_core__Texture2D_Texture2DAbstract_Impl_.__name__ = "sunaba.core._Texture2D.Texture2DAbstract_Impl_"
__sunaba_core__Texture2D_Texture2DAbstract_Impl_.fromResource = function(resource) 
  local txt = Texture2D.cast(resource);
  if (txt:isNull()) then 
    do return nil end;
  end;
  do return txt end;
end

__sunaba_core__Variant_Variant_Impl_.new = {}
__sunaba_core__Variant_Variant_Impl_.__name__ = "sunaba.core._Variant.Variant_Impl_"
__sunaba_core__Variant_Variant_Impl_.fromString = function(value) 
  do return Variant.new(value) end;
end
__sunaba_core__Variant_Variant_Impl_.toString = function(this1) 
  do return this1:asString() end;
end
__sunaba_core__Variant_Variant_Impl_.fromInt = function(value) 
  do return Variant.new(__haxe__Int64____Int64.new(__haxe__Int32_Int32_Impl_.shr(value, 31), value)) end;
end
__sunaba_core__Variant_Variant_Impl_.toInt = function(this1) 
  do return this1:asInt64() end;
end
__sunaba_core__Variant_Variant_Impl_.fromInt64 = function(value) 
  do return Variant.new(value) end;
end
__sunaba_core__Variant_Variant_Impl_.toInt64 = function(this1) 
  do return this1:asInt64() end;
end
__sunaba_core__Variant_Variant_Impl_.fromInt32 = function(value) 
  do return Variant.new(value) end;
end
__sunaba_core__Variant_Variant_Impl_.toInt32 = function(this1) 
  do return this1:asInt32() end;
end
__sunaba_core__Variant_Variant_Impl_.fromFloat = function(value) 
  do return Variant.new(value) end;
end
__sunaba_core__Variant_Variant_Impl_.toFloat = function(this1) 
  do return this1:asFloat64() end;
end
__sunaba_core__Variant_Variant_Impl_.fromBool = function(value) 
  do return Variant.new(value) end;
end
__sunaba_core__Variant_Variant_Impl_.toBool = function(this1) 
  do return this1:asBool() end;
end
__sunaba_core__Variant_Variant_Impl_.fromVector2 = function(value) 
  do return Variant.new(value) end;
end
__sunaba_core__Variant_Variant_Impl_.toVector2 = function(this1) 
  do return this1:asVector2() end;
end
__sunaba_core__Variant_Variant_Impl_.fromVector3 = function(value) 
  do return Variant.new(value) end;
end
__sunaba_core__Variant_Variant_Impl_.toVector3 = function(this1) 
  do return this1:asVector3() end;
end
__sunaba_core__Variant_Variant_Impl_.fromVector4 = function(value) 
  do return Variant.new(value) end;
end
__sunaba_core__Variant_Variant_Impl_.toVector4 = function(this1) 
  do return this1:asVector4() end;
end
__sunaba_core__Variant_Variant_Impl_.fromVector2i = function(value) 
  do return Variant.new(value) end;
end
__sunaba_core__Variant_Variant_Impl_.toVector2i = function(this1) 
  do return this1:asVector2i() end;
end
__sunaba_core__Variant_Variant_Impl_.fromVector3i = function(value) 
  do return Variant.new(value) end;
end
__sunaba_core__Variant_Variant_Impl_.toVector3i = function(this1) 
  do return this1:asVector3i() end;
end
__sunaba_core__Variant_Variant_Impl_.fromVector4i = function(value) 
  do return Variant.new(value) end;
end
__sunaba_core__Variant_Variant_Impl_.toVector4i = function(this1) 
  do return this1:asVector4i() end;
end
__sunaba_core__Variant_Variant_Impl_.fromColor = function(value) 
  do return Variant.new(value) end;
end
__sunaba_core__Variant_Variant_Impl_.toColor = function(this1) 
  do return this1:asColor() end;
end
__sunaba_core__Variant_Variant_Impl_.fromRect2 = function(value) 
  do return Variant.new(value) end;
end
__sunaba_core__Variant_Variant_Impl_.toRect2 = function(this1) 
  do return this1:asRect2() end;
end
__sunaba_core__Variant_Variant_Impl_.fromRect2i = function(value) 
  do return Variant.new(value) end;
end
__sunaba_core__Variant_Variant_Impl_.toRect2i = function(this1) 
  do return this1:asRect2i() end;
end
__sunaba_core__Variant_Variant_Impl_.fromBasis = function(value) 
  do return Variant.new(value) end;
end
__sunaba_core__Variant_Variant_Impl_.toBasis = function(this1) 
  do return this1:asBasis() end;
end
__sunaba_core__Variant_Variant_Impl_.fromTransform2D = function(value) 
  do return Variant.new(value) end;
end
__sunaba_core__Variant_Variant_Impl_.toTransform2D = function(this1) 
  do return this1:asTransform2D() end;
end
__sunaba_core__Variant_Variant_Impl_.fromTransform3D = function(value) 
  do return Variant.new(value) end;
end
__sunaba_core__Variant_Variant_Impl_.toTransform3D = function(this1) 
  do return this1:asTransform3D() end;
end
__sunaba_core__Variant_Variant_Impl_.fromQuaternion = function(value) 
  do return Variant.new(value) end;
end
__sunaba_core__Variant_Variant_Impl_.toQuaternion = function(this1) 
  do return this1:asQuaternion() end;
end
__sunaba_core__Variant_Variant_Impl_.fromElement = function(value) 
  do return Variant.fromElement(value) end;
end
__sunaba_core__Variant_Variant_Impl_.toElement = function(this1) 
  do return this1:asElement() end;
end
__sunaba_core__Variant_Variant_Impl_.fromResource = function(value) 
  do return Variant.fromResource(value) end;
end
__sunaba_core__Variant_Variant_Impl_.toResource = function(this1) 
  do return this1:asResource() end;
end
__sunaba_core__Variant_Variant_Impl_.fromByteArray = function(value) 
  do return Variant.fromByteArray(value) end;
end
__sunaba_core__Variant_Variant_Impl_.toByteArray = function(this1) 
  do return this1:asByteArray() end;
end
__sunaba_core__Variant_Variant_Impl_.fromIntArray64 = function(value) 
  do return Variant.fromIntArray64(value) end;
end
__sunaba_core__Variant_Variant_Impl_.toIntArray64 = function(this1) 
  do return this1:asIntArray64() end;
end
__sunaba_core__Variant_Variant_Impl_.fromFloatArray64 = function(value) 
  do return Variant.fromFloatArray64(value) end;
end
__sunaba_core__Variant_Variant_Impl_.toFloatArray64 = function(this1) 
  do return this1:asFloatArray64() end;
end
__sunaba_core__Variant_Variant_Impl_.fromStringArray = function(value) 
  do return Variant.fromStringArray(value) end;
end
__sunaba_core__Variant_Variant_Impl_.toStringArray = function(this1) 
  do return this1:asStringArray() end;
end
__sunaba_core__Variant_Variant_Impl_.fromVector2Array = function(value) 
  do return Variant.fromVector2Array(value) end;
end
__sunaba_core__Variant_Variant_Impl_.toVector2Array = function(this1) 
  do return this1:asVector2Array() end;
end
__sunaba_core__Variant_Variant_Impl_.fromVector3Array = function(value) 
  do return Variant.fromVector3Array(value) end;
end
__sunaba_core__Variant_Variant_Impl_.toVector3Array = function(this1) 
  do return this1:asVector3Array() end;
end
__sunaba_core__Variant_Variant_Impl_.fromVector4Array = function(value) 
  do return Variant.fromVector4Array(value) end;
end
__sunaba_core__Variant_Variant_Impl_.toVector4Array = function(this1) 
  do return this1:asVector4Array() end;
end

__sunaba_core__Vector_Vector_Impl_.new = {}
__sunaba_core__Vector_Vector_Impl_.__name__ = "sunaba.core._Vector.Vector_Impl_"
__sunaba_core__Vector_Vector_Impl_._new = function() 
  do return sunaba.core.VectorNative() end;
end
__sunaba_core__Vector_Vector_Impl_.size = function(this1) 
  local s = this1;
  do return #s end;
end
__sunaba_core__Vector_Vector_Impl_.get = function(this1,index) 
  local s = this1;
  do return s[index] end;
end
__sunaba_core__Vector_Vector_Impl_.set = function(this1,index,value) 
  local s = this1;
  s[index] = value;
  do return value end;
end
__sunaba_core__Vector_Vector_Impl_.toArray = function(this1) 
  local s = this1;
  local array = _hx_tab_array({}, 0);
  local _g = 0;
  local _g1 = __sunaba_core__Vector_Vector_Impl_.size(s);
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    local value = __sunaba_core__Vector_Vector_Impl_.get(s, i);
    if (value == nil) then 
      _G.error(__haxe_Exception.thrown(Std.string("Vector.toArray: null value at index ") .. Std.string(i)),0);
    end;
    array:push(value);
  end;
  do return array end;
end
__sunaba_core__Vector_Vector_Impl_.toTable = function(this1) 
  local s = this1;
  local table = table;
  local _g = 0;
  local _g1 = __sunaba_core__Vector_Vector_Impl_.size(s);
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    local value = __sunaba_core__Vector_Vector_Impl_.get(s, i);
    if (value == nil) then 
      _G.error(__haxe_Exception.thrown(Std.string("Vector.toTable: null value at index ") .. Std.string(i)),0);
    end;
    table[i] = value;
  end;
  do return table end;
end

__sunaba_core__Viewport_ViewportAbstract_Impl_.new = {}
__sunaba_core__Viewport_ViewportAbstract_Impl_.__name__ = "sunaba.core._Viewport.ViewportAbstract_Impl_"
__sunaba_core__Viewport_ViewportAbstract_Impl_.fromElement = function(element) 
  local viewport = Viewport.cast(element);
  if (viewport:isNull()) then 
    do return nil end;
  end;
  do return viewport end;
end

__sunaba_input__InputEvent_InputEventAbstract_Impl_.new = {}
__sunaba_input__InputEvent_InputEventAbstract_Impl_.__name__ = "sunaba.input._InputEvent.InputEventAbstract_Impl_"
__sunaba_input__InputEvent_InputEventAbstract_Impl_.fromResource = function(resource) 
  local inputEvent = InputEvent.cast(resource);
  if (inputEvent:isNull()) then 
    do return nil end;
  end;
  do return inputEvent end;
end

__sunaba_spatial__CameraAttributes_CameraAttributesAbstract_Impl_.new = {}
__sunaba_spatial__CameraAttributes_CameraAttributesAbstract_Impl_.__name__ = "sunaba.spatial._CameraAttributes.CameraAttributesAbstract_Impl_"
__sunaba_spatial__CameraAttributes_CameraAttributesAbstract_Impl_.fromResource = function(resource) 
  local cameraAttributes = CameraAttributes.cast(resource);
  if (cameraAttributes:isNull()) then 
    do return nil end;
  end;
  do return cameraAttributes end;
end

__sunaba_spatial__Sky_SkyAbstract_Impl_.new = {}
__sunaba_spatial__Sky_SkyAbstract_Impl_.__name__ = "sunaba.spatial._Sky.SkyAbstract_Impl_"
__sunaba_spatial__Sky_SkyAbstract_Impl_.fromResource = function(resource) 
  local sky = Sky.cast(resource);
  if (sky:isNull()) then 
    do return nil end;
  end;
  do return sky end;
end

__sunaba_spatial__World3D_World3DAbstract_Impl_.new = {}
__sunaba_spatial__World3D_World3DAbstract_Impl_.__name__ = "sunaba.spatial._World3D.World3DAbstract_Impl_"
__sunaba_spatial__World3D_World3DAbstract_Impl_.fromResource = function(resource) 
  local world3D = World3D.cast(resource);
  if (world3D:isNull()) then 
    do return nil end;
  end;
  do return world3D end;
end

__sunaba_ui__Control_ControlAbstract_Impl_.new = {}
__sunaba_ui__Control_ControlAbstract_Impl_.__name__ = "sunaba.ui._Control.ControlAbstract_Impl_"
__sunaba_ui__Control_ControlAbstract_Impl_.fromElement = function(element) 
  local cItem = Control.cast(element);
  if (cItem:isNull()) then 
    do return nil end;
  end;
  do return cItem end;
end

__sunaba_ui__StyleBox_StyleBoxAbstract_Impl_.new = {}
__sunaba_ui__StyleBox_StyleBoxAbstract_Impl_.__name__ = "sunaba.ui._StyleBox.StyleBoxAbstract_Impl_"
__sunaba_ui__StyleBox_StyleBoxAbstract_Impl_.fromResource = function(resource) 
  local styleBox = StyleBox.cast(resource);
  if (styleBox:isNull()) then 
    do return nil end;
  end;
  do return styleBox end;
end

__sunaba_ui__Theme_ThemeAbstract_Impl_.new = {}
__sunaba_ui__Theme_ThemeAbstract_Impl_.__name__ = "sunaba.ui._Theme.ThemeAbstract_Impl_"
__sunaba_ui__Theme_ThemeAbstract_Impl_.fromResource = function(resource) 
  local theme = Theme.cast(resource);
  if (theme:isNull()) then 
    do return nil end;
  end;
  do return theme end;
end

__sunaba_ui_Widget.new = function() 
  local self = _hx_new(__sunaba_ui_Widget.prototype)
  __sunaba_ui_Widget.super(self)
  return self
end
__sunaba_ui_Widget.super = function(self) 
  self.elementdb = _hx_tab_array({}, 0);
  self.keepChildren = false;
  self.io = _G.ioManager;
  self.rootElement = Control.new();
  self:init();
end
__sunaba_ui_Widget.__name__ = "sunaba.ui.Widget"
__sunaba_ui_Widget.prototype = _hx_e();
__sunaba_ui_Widget.prototype.init = function(self) 
end
__sunaba_ui_Widget.prototype.load = function(self,path) 
  local file = self.io:loadText(path);
  if ((file ~= nil) and (#file > 0)) then 
    local _hx_status, _hx_result = pcall(function() 
    
        self:parseMarkup(file);
      return _hx_pcall_default
    end)
    if not _hx_status and _hx_result == "_hx_pcall_break" then
    elseif not _hx_status then 
      local _g = _hx_result;
      local e = __haxe_Exception.caught(_g):unwrap();
      _G.print(Std.string(Std.string("Error parsing markup: ") .. Std.string(Std.string(e))));
      _G.error(__haxe_Exception.thrown(e),0);
    elseif _hx_result ~= _hx_pcall_default then
      return _hx_result
    end;
  else
    _G.print(Std.string(Std.string("Failed to load file: ") .. Std.string(path)));
    _G.error(__haxe_Exception.thrown(Std.string("Failed to load file: ") .. Std.string(path)),0);
  end;
end
__sunaba_ui_Widget.prototype.parseMarkup = function(self,markup) 
  local xml = Xml.parse(markup);
  self:instantiate(xml);
end
__sunaba_ui_Widget.prototype.instantiate = function(self,xml) 
  if ((self.rootElement ~= nil) and not self.keepChildren) then 
    local s = self.rootElement:getChildren();
    local array = _hx_tab_array({}, 0);
    local _g = 0;
    local _g1 = __sunaba_core__Vector_Vector_Impl_.size(s);
    while (_g < _g1) do _hx_do_first_1 = false;
      
      _g = _g + 1;
      local i = _g - 1;
      local value = __sunaba_core__Vector_Vector_Impl_.get(s, i);
      if (value == nil) then 
        _G.error(__haxe_Exception.thrown(Std.string("Vector.toArray: null value at index ") .. Std.string(i)),0);
      end;
      array:push(value);
    end;
    local children = array;
    local _g = 0;
    local _g1 = children.length;
    while (_g < _g1) do _hx_do_first_1 = false;
      
      _g = _g + 1;
      local i = _g - 1;
      local child = children[i];
      if (child ~= nil) then 
        child:delete();
      end;
    end;
  end;
  local firstElement = xml:firstElement();
  if (firstElement ~= nil) then 
    if (firstElement.nodeType ~= Xml.Element) then 
      _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element but found ") .. Std.string(((function() 
        local _hx_1
        if (firstElement.nodeType == nil) then 
        _hx_1 = "null"; else 
        _hx_1 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(firstElement.nodeType); end
        return _hx_1
      end )()))),0);
    end;
    if (firstElement.nodeName == "suml") then 
      local fullScreenAtt = firstElement:get("fullscreen");
      if (fullScreenAtt == "true") then 
        self.rootElement:setAnchorsAndOffsetsPreset(15, 3, 0);
        self.rootElement.sizeFlagsHorizontal = 1;
        self.rootElement.sizeFlagsVertical = 1;
      else
        local anchorTopAtt = firstElement:get("anchorTop");
        if (anchorTopAtt ~= nil) then 
          self.rootElement.anchorTop = Std.parseFloat(anchorTopAtt);
        end;
        local anchorLeftAtt = firstElement:get("anchorLeft");
        if (anchorLeftAtt ~= nil) then 
          self.rootElement.anchorLeft = Std.parseFloat(anchorLeftAtt);
        end;
        local anchorBottomAtt = firstElement:get("anchorBottom");
        if (anchorBottomAtt ~= nil) then 
          self.rootElement.anchorBottom = Std.parseFloat(anchorBottomAtt);
        end;
        local anchorRightAtt = firstElement:get("anchorRight");
        if (anchorRightAtt ~= nil) then 
          self.rootElement.anchorRight = Std.parseFloat(anchorRightAtt);
        end;
        local offsetTopAtt = firstElement:get("offsetTop");
        if (offsetTopAtt ~= nil) then 
          self.rootElement.offsetTop = Std.parseFloat(offsetTopAtt);
        end;
        local offsetLeftAtt = firstElement:get("offsetLeft");
        if (offsetLeftAtt ~= nil) then 
          self.rootElement.offsetLeft = Std.parseFloat(offsetLeftAtt);
        end;
        local offsetBottomAtt = firstElement:get("offsetBottom");
        if (offsetBottomAtt ~= nil) then 
          self.rootElement.offsetBottom = Std.parseFloat(offsetBottomAtt);
        end;
        local offsetRightAtt = firstElement:get("offsetRight");
        if (offsetRightAtt ~= nil) then 
          self.rootElement.offsetRight = Std.parseFloat(offsetRightAtt);
        end;
      end;
      local nameAtt = firstElement:get("name");
      if (nameAtt ~= nil) then 
        self.rootElement.name = nameAtt;
      end;
      local children = firstElement:elements();
      local child = children;
      while (child:hasNext()) do _hx_do_first_1 = false;
        
        local child = child:next();
        if (child.nodeType ~= Xml.Element) then 
          _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element but found ") .. Std.string(((function() 
            local _hx_2
            if (child.nodeType == nil) then 
            _hx_2 = "null"; else 
            _hx_2 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(child.nodeType); end
            return _hx_2
          end )()))),0);
        end;
        if (child.nodeName == "head") then 
          local headChild = child:elements();
          while (headChild:hasNext()) do _hx_do_first_2 = false;
            
            local headChild = headChild:next();
            if (headChild.nodeType ~= Xml.Element) then 
              _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element but found ") .. Std.string(((function() 
                local _hx_3
                if (headChild.nodeType == nil) then 
                _hx_3 = "null"; else 
                _hx_3 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(headChild.nodeType); end
                return _hx_3
              end )()))),0);
            end;
            local tmp = headChild.nodeName == "style";
          end;
        else
          if (child.nodeType ~= Xml.Element) then 
            _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element but found ") .. Std.string(((function() 
              local _hx_4
              if (child.nodeType == nil) then 
              _hx_4 = "null"; else 
              _hx_4 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(child.nodeType); end
              return _hx_4
            end )()))),0);
          end;
          if (child.nodeName == "body") then 
            self:constructNodes(child:elements());
          end;
        end;
      end;
    else
      if (firstElement.nodeType ~= Xml.Element) then 
        _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element but found ") .. Std.string(((function() 
          local _hx_5
          if (firstElement.nodeType == nil) then 
          _hx_5 = "null"; else 
          _hx_5 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(firstElement.nodeType); end
          return _hx_5
        end )()))),0);
      end;
      _G.error(__haxe_Exception.thrown(Std.string("Invalid root element: ") .. Std.string(firstElement.nodeName)),0);
    end;
  end;
end
__sunaba_ui_Widget.prototype.constructNodes = function(self,nodes) 
  local node = nodes;
  while (node:hasNext()) do _hx_do_first_1 = false;
    
    local node = node:next();
    local element = self:construct(node);
    self.elementdb:push(element);
    __sunaba_core_GlobalObjectStack.getSingleton().stack:push(__sunaba_core_StackHandle.new(element));
    if ((element ~= nil) and (element:isNull() == false)) then 
      self.rootElement:addChild(element);
    else
      if (node.nodeType ~= Xml.Element) then 
        _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element but found ") .. Std.string(((function() 
          local _hx_1
          if (node.nodeType == nil) then 
          _hx_1 = "null"; else 
          _hx_1 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(node.nodeType); end
          return _hx_1
        end )()))),0);
      end;
      _G.error(__haxe_Exception.thrown(Std.string("Unknown element: ") .. Std.string(node.nodeName)),0);
    end;
  end;
end
__sunaba_ui_Widget.prototype.construct = function(self,xml) 
  if (xml.nodeType ~= Xml.Element) then 
    _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element but found ") .. Std.string(((function() 
      local _hx_1
      if (xml.nodeType == nil) then 
      _hx_1 = "null"; else 
      _hx_1 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(xml.nodeType); end
      return _hx_1
    end )()))),0);
  end;
  local className = xml.nodeName;
  className = self:camelToPascal(className);
  local classType = _G[className];
  if (classType ~= nil) then 
    _G.print(Std.string(Std.string("Constructing element of class: ") .. Std.string(className)));
    local instance = classType.new();
    if (instance ~= nil) then 
      local element = instance;
      self:setObjectValues(element, xml);
      self:constructChildren(element, xml);
      if (element.name == nil) then 
        local nameAtt = xml:get("name");
        if (nameAtt ~= nil) then 
          element.name = nameAtt;
        end;
      end;
      do return element end;
    end;
  end;
  _G.error(__haxe_Exception.thrown(Std.string("Unknown element class: ") .. Std.string(className)),0);
end
__sunaba_ui_Widget.prototype.setObjectValues = function(self,element,xml) 
  local attributes = xml:attributes();
  local attribute = attributes;
  local _hx_continue_1 = false;
  while (attribute:hasNext()) do _hx_do_first_1 = false;
    repeat 
    local attribute = attribute:next();
    local attributeName = attribute;
    local attributeValue = xml:get(attributeName);
    if (attributeName == "name") then 
      element.name = attributeValue;
    else
      local obj = element;
      local tmp;
      if (not obj[field] ~= nil) then 
        local o = obj;
        tmp = (function() 
          local _hx_1
          if ((_G.type(o) == "function") and not ((function() 
            local _hx_2
            if (_G.type(o) ~= "table") then 
            _hx_2 = false; else 
            _hx_2 = o.__name__; end
            return _hx_2
          end )() or (function() 
            local _hx_3
            if (_G.type(o) ~= "table") then 
            _hx_3 = false; else 
            _hx_3 = o.__ename__; end
            return _hx_3
          end )())) then 
          _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[attributeName] ~= nil) or (attributeName == "length"))) then 
          _hx_1 = true; elseif (o.__fields__ ~= nil) then 
          _hx_1 = o.__fields__[attributeName] ~= nil; else 
          _hx_1 = o[attributeName] ~= nil; end
          return _hx_1
        end )();
      else
        tmp = true;
      end;
      if (tmp) then 
        local currentValue = self:field(element, attributeName);
        if (__lua_Boot.__instanceof(currentValue, Bool)) then 
          local b = false;
          if (attributeValue == "true") then 
            b = true;
          else
            if (attributeValue == "false") then 
              b = false;
            else
              local c = Type.getClass(element);
              _G.error(__haxe_Exception.thrown(Std.string(Std.string(Std.string(Std.string("Invalid boolean value for field '") .. Std.string(attributeName)) .. Std.string("' in element '")) .. Std.string(c.__name__)) .. Std.string("'")),0);
            end;
          end;
          if (obj[field] ~= nil) then 
            obj[field] = value;
          else
            Reflect.setProperty(element, attributeName, b);
          end;
        else
          if (__lua_Boot.__instanceof(currentValue, Int)) then 
            local attrArr = String.prototype.split(attributeValue, ".");
            local value = attrArr[attrArr.length - 1];
            attrArr:resize(attrArr.length - 1);
            local enumName = attrArr:join(".");
            if (enumName ~= "") then 
              local enum_ = Type.resolveEnum(enumName);
              if (enum_ ~= nil) then 
                local enumValue = self:field(enum_, value);
                if (enumValue ~= nil) then 
                  if (obj[field] ~= nil) then 
                    obj[field] = value;
                  else
                    Reflect.setProperty(element, attributeName, enumValue);
                  end;
                else
                  local c = Type.getClass(element);
                  _G.error(__haxe_Exception.thrown(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string("Invalid enum value '") .. Std.string(value)) .. Std.string("' for field '")) .. Std.string(attributeName)) .. Std.string("' in element '")) .. Std.string(c.__name__)) .. Std.string("'")),0);
                end;
              else
                _G.error(__haxe_Exception.thrown(Std.string("Unknown enum: ") .. Std.string(enumName)),0);
              end;
            else
              local value = Std.parseInt(attributeValue);
              if (obj[field] ~= nil) then 
                obj[field] = value;
              else
                Reflect.setProperty(element, attributeName, value);
              end;
            end;
          else
            if (__lua_Boot.__instanceof(currentValue, Float)) then 
              local value = Std.parseFloat(attributeValue);
              if (obj[field] ~= nil) then 
                obj[field] = value;
              else
                Reflect.setProperty(element, attributeName, value);
              end;
            else
              if (__lua_Boot.__instanceof(currentValue, String)) then 
                if (obj[field] ~= nil) then 
                  obj[field] = value;
                else
                  Reflect.setProperty(element, attributeName, attributeValue);
                end;
              else
                if (__lua_Boot.__instanceof(currentValue, Vector2)) then 
                  local xy = String.prototype.split(attributeValue, ",");
                  if (xy.length == 2) then 
                    local x = Std.parseFloat(xy[0]);
                    local y = Std.parseFloat(xy[1]);
                    local value = Vector2.new(x, y);
                    if (obj[field] ~= nil) then 
                      obj[field] = value;
                    else
                      Reflect.setProperty(element, attributeName, value);
                    end;
                  else
                    local c = Type.getClass(element);
                    _G.error(__haxe_Exception.thrown(Std.string(Std.string(Std.string(Std.string("Invalid Vector2 value for field '") .. Std.string(attributeName)) .. Std.string("' in element '")) .. Std.string(c.__name__)) .. Std.string("'")),0);
                  end;
                else
                  if (__lua_Boot.__instanceof(currentValue, Vector3)) then 
                    local xyz = String.prototype.split(attributeValue, ",");
                    if (xyz.length == 3) then 
                      local x = Std.parseFloat(xyz[0]);
                      local y = Std.parseFloat(xyz[1]);
                      local z = Std.parseFloat(xyz[2]);
                      local value = Vector3.new(x, y, z);
                      if (obj[field] ~= nil) then 
                        obj[field] = value;
                      else
                        Reflect.setProperty(element, attributeName, value);
                      end;
                    else
                      local c = Type.getClass(element);
                      _G.error(__haxe_Exception.thrown(Std.string(Std.string(Std.string(Std.string("Invalid Vector3 value for field '") .. Std.string(attributeName)) .. Std.string("' in element '")) .. Std.string(c.__name__)) .. Std.string("'")),0);
                    end;
                  else
                    if (__lua_Boot.__instanceof(currentValue, Vector4)) then 
                      local xyzw = String.prototype.split(attributeValue, ",");
                      if (xyzw.length == 4) then 
                        local x = Std.parseFloat(xyzw[0]);
                        local y = Std.parseFloat(xyzw[1]);
                        local z = Std.parseFloat(xyzw[2]);
                        local w = Std.parseFloat(xyzw[3]);
                        local value = Vector4.new(x, y, z, w);
                        if (obj[field] ~= nil) then 
                          obj[field] = value;
                        else
                          Reflect.setProperty(element, attributeName, value);
                        end;
                      else
                        local c = Type.getClass(element);
                        _G.error(__haxe_Exception.thrown(Std.string(Std.string(Std.string(Std.string("Invalid Vector4 value for field '") .. Std.string(attributeName)) .. Std.string("' in element '")) .. Std.string(c.__name__)) .. Std.string("'")),0);
                      end;
                    else
                      if (__lua_Boot.__instanceof(currentValue, Vector2i)) then 
                        local xy = String.prototype.split(attributeValue, ",");
                        if (xy.length == 2) then 
                          local x = Std.parseInt(xy[0]);
                          local y = Std.parseInt(xy[1]);
                          local value = Vector2i.new(x, y);
                          if (obj[field] ~= nil) then 
                            obj[field] = value;
                          else
                            Reflect.setProperty(element, attributeName, value);
                          end;
                        else
                          local c = Type.getClass(element);
                          _G.error(__haxe_Exception.thrown(Std.string(Std.string(Std.string(Std.string("Invalid Vector2i value for field '") .. Std.string(attributeName)) .. Std.string("' in element '")) .. Std.string(c.__name__)) .. Std.string("'")),0);
                        end;
                      else
                        if (__lua_Boot.__instanceof(currentValue, Vector3i)) then 
                          local xyz = String.prototype.split(attributeValue, ",");
                          if (xyz.length == 3) then 
                            local x = Std.parseInt(xyz[0]);
                            local y = Std.parseInt(xyz[1]);
                            local z = Std.parseInt(xyz[2]);
                            local value = Vector3i.new(x, y, z);
                            if (obj[field] ~= nil) then 
                              obj[field] = value;
                            else
                              Reflect.setProperty(element, attributeName, value);
                            end;
                          else
                            local c = Type.getClass(element);
                            _G.error(__haxe_Exception.thrown(Std.string(Std.string(Std.string(Std.string("Invalid Vector3i value for field '") .. Std.string(attributeName)) .. Std.string("' in element '")) .. Std.string(c.__name__)) .. Std.string("'")),0);
                          end;
                        else
                          if (__lua_Boot.__instanceof(currentValue, Vector4i)) then 
                            local xyzw = String.prototype.split(attributeValue, ",");
                            if (xyzw.length == 4) then 
                              local x = Std.parseInt(xyzw[0]);
                              local y = Std.parseInt(xyzw[1]);
                              local z = Std.parseInt(xyzw[2]);
                              local w = Std.parseInt(xyzw[3]);
                              local value = Vector4i.new(x, y, z, w);
                              if (obj[field] ~= nil) then 
                                obj[field] = value;
                              else
                                Reflect.setProperty(element, attributeName, value);
                              end;
                            else
                              local c = Type.getClass(element);
                              _G.error(__haxe_Exception.thrown(Std.string(Std.string(Std.string(Std.string("Invalid Vector4i value for field '") .. Std.string(attributeName)) .. Std.string("' in element '")) .. Std.string(c.__name__)) .. Std.string("'")),0);
                            end;
                          else
                            if (__lua_Boot.__instanceof(currentValue, Color)) then 
                              local color = Color.html(attributeValue);
                              if (color ~= nil) then 
                                if (obj[field] ~= nil) then 
                                  obj[field] = value;
                                else
                                  Reflect.setProperty(element, attributeName, color);
                                end;
                              else
                                local c = Type.getClass(element);
                                _G.error(__haxe_Exception.thrown(Std.string(Std.string(Std.string(Std.string("Invalid Color value for field '") .. Std.string(attributeName)) .. Std.string("' in element '")) .. Std.string(c.__name__)) .. Std.string("'")),0);
                              end;
                            else
                              if (__lua_Boot.__instanceof(currentValue, Texture2D)) then 
                                local image = Image.loadFromFile(attributeValue);
                                if (image ~= nil) then 
                                  local texture = ImageTexture.createFromImage(image);
                                  if (texture ~= nil) then 
                                    if (obj[field] ~= nil) then 
                                      obj[field] = value;
                                    else
                                      Reflect.setProperty(element, attributeName, texture);
                                    end;
                                  else
                                    local c = Type.getClass(element);
                                    _G.error(__haxe_Exception.thrown(Std.string(Std.string(Std.string(Std.string("Failed to create Texture2D from image for field '") .. Std.string(attributeName)) .. Std.string("' in element '")) .. Std.string(c.__name__)) .. Std.string("'")),0);
                                  end;
                                else
                                  local c = Type.getClass(element);
                                  _G.error(__haxe_Exception.thrown(Std.string(Std.string(Std.string(Std.string("Failed to load image from file for field '") .. Std.string(attributeName)) .. Std.string("' in element '")) .. Std.string(c.__name__)) .. Std.string("'")),0);
                                end;
                              else
                                if (__lua_Boot.__instanceof(currentValue, Texture)) then 
                                  local image = Image.loadFromFile(attributeValue);
                                  if (image ~= nil) then 
                                    local texture = ImageTexture.createFromImage(image);
                                    if (texture ~= nil) then 
                                      if (obj[field] ~= nil) then 
                                        obj[field] = value;
                                      else
                                        Reflect.setProperty(element, attributeName, texture);
                                      end;
                                    else
                                      local c = Type.getClass(element);
                                      _G.error(__haxe_Exception.thrown(Std.string(Std.string(Std.string(Std.string("Failed to create Texture2D from image for field '") .. Std.string(attributeName)) .. Std.string("' in element '")) .. Std.string(c.__name__)) .. Std.string("'")),0);
                                    end;
                                  else
                                    local c = Type.getClass(element);
                                    _G.error(__haxe_Exception.thrown(Std.string(Std.string(Std.string(Std.string("Failed to load image from file for field '") .. Std.string(attributeName)) .. Std.string("' in element '")) .. Std.string(c.__name__)) .. Std.string("'")),0);
                                  end;
                                else
                                  local c = Type.getClass(element);
                                  _G.error(__haxe_Exception.thrown(Std.string(Std.string(Std.string(Std.string("Unsupported type for field '") .. Std.string(attributeName)) .. Std.string("' in element '")) .. Std.string(c.__name__)) .. Std.string("'")),0);
                                end;
                              end;
                            end;
                          end;
                        end;
                      end;
                    end;
                  end;
                end;
              end;
            end;
          end;
        end;
      else
        if (__lua_Boot.__instanceof(element, Control)) then 
          local control = element;
          local snakeCaseName = self:camelToSnake(attributeName);
          if (control:hasThemeConstantOverride(snakeCaseName)) then 
            local x = Std.parseInt(attributeValue);
            control:addThemeConstantOverride(snakeCaseName, __sunaba_core__Variant_Variant_Impl_.fromInt64(__haxe__Int64____Int64.new(__haxe__Int32_Int32_Impl_.shr(x, 31), x)));
            break;
          else
            if (control:hasThemeFontSizeOverride(snakeCaseName)) then 
              control:addThemeFontSizeOverride(snakeCaseName, Std.parseFloat(attributeValue));
              break;
            else
              if (control:hasThemeColorOverride(snakeCaseName)) then 
                local color = Color.html(attributeValue);
                if (color ~= nil) then 
                  control:addThemeColorOverride(snakeCaseName, color);
                  break;
                else
                  local c = Type.getClass(element);
                  _G.error(__haxe_Exception.thrown(Std.string(Std.string(Std.string(Std.string("Invalid Color value for field '") .. Std.string(attributeName)) .. Std.string("' in element '")) .. Std.string(c.__name__)) .. Std.string("'")),0);
                end;
              else
                if (control:hasThemeFontOverride(snakeCaseName)) then 
                  local fontFile = FontFile.new();
                  local res = fontFile:loadDynamicFont(attributeValue);
                  if (res ~= 0) then 
                    res = fontFile:loadBitmapFont(attributeValue);
                    if (res ~= 0) then 
                      local c = Type.getClass(element);
                      _G.error(__haxe_Exception.thrown(Std.string(Std.string(Std.string(Std.string("Failed to load Font for field '") .. Std.string(attributeName)) .. Std.string("' in element '")) .. Std.string(c.__name__)) .. Std.string("'")),0);
                    end;
                  end;
                  control:addThemeFontOverride(snakeCaseName, fontFile);
                  break;
                else
                  if (control:hasThemeIconOverride(snakeCaseName)) then 
                    local image = Image.loadFromFile(attributeValue);
                    if (image ~= nil) then 
                      local texture = ImageTexture.createFromImage(image);
                      if (texture ~= nil) then 
                        control:addThemeIconOverride(snakeCaseName, texture);
                        break;
                      else
                        local c = Type.getClass(element);
                        _G.error(__haxe_Exception.thrown(Std.string(Std.string(Std.string(Std.string("Failed to create Texture2D from image for field '") .. Std.string(attributeName)) .. Std.string("' in element '")) .. Std.string(c.__name__)) .. Std.string("'")),0);
                      end;
                    else
                      local c = Type.getClass(element);
                      _G.error(__haxe_Exception.thrown(Std.string(Std.string(Std.string(Std.string("Failed to load image from file for field '") .. Std.string(attributeName)) .. Std.string("' in element '")) .. Std.string(c.__name__)) .. Std.string("'")),0);
                    end;
                  end;
                end;
              end;
            end;
          end;
        end;
        local c = Type.getClass(element);
        _G.error(__haxe_Exception.thrown(Std.string(Std.string(Std.string(Std.string("Unknown field '") .. Std.string(attributeName)) .. Std.string("' in element '")) .. Std.string(c.__name__)) .. Std.string("'")),0);
      end;
    end;until true
    if _hx_continue_1 then 
    _hx_continue_1 = false;
    break;
    end;
    
  end;
end
__sunaba_ui_Widget.prototype.constructChildren = function(self,element,xml) 
  local children = xml:elements();
  local child = children;
  while (child:hasNext()) do _hx_do_first_1 = false;
    
    local child = child:next();
    local childElement = self:construct(child);
    if (childElement ~= nil) then 
      element:addChild(childElement);
    else
      if (child.nodeType ~= Xml.Element) then 
        _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element but found ") .. Std.string(((function() 
          local _hx_1
          if (child.nodeType == nil) then 
          _hx_1 = "null"; else 
          _hx_1 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(child.nodeType); end
          return _hx_1
        end )()))),0);
      end;
      _G.error(__haxe_Exception.thrown(Std.string("Unknown child element: ") .. Std.string(child.nodeName)),0);
    end;
  end;
end
__sunaba_ui_Widget.prototype.hasField = function(self,object,field) 
  local obj = object;
  if (not obj[field] ~= nil) then 
    local o = obj;
    if ((_G.type(o) == "function") and not ((function() 
      local _hx_1
      if (_G.type(o) ~= "table") then 
      _hx_1 = false; else 
      _hx_1 = o.__name__; end
      return _hx_1
    end )() or (function() 
      local _hx_2
      if (_G.type(o) ~= "table") then 
      _hx_2 = false; else 
      _hx_2 = o.__ename__; end
      return _hx_2
    end )())) then 
      do return false end;
    else
      if ((_G.type(o) == "string") and ((String.prototype[field] ~= nil) or (field == "length"))) then 
        do return true end;
      else
        if (o.__fields__ ~= nil) then 
          do return o.__fields__[field] ~= nil end;
        else
          do return o[field] ~= nil end;
        end;
      end;
    end;
  else
    do return true end;
  end;
end
__sunaba_ui_Widget.prototype.field = function(self,obj,field) 
  if (obj[field] ~= nil) then 
    do return obj[field] end;
  end;
  do return Reflect.field(obj, field) end
end
__sunaba_ui_Widget.prototype.setProperty = function(self,obj,field,value) 
  if (obj[field] ~= nil) then 
    obj[field] = value;
  else
    Reflect.setProperty(obj, field, value);
  end;
end
__sunaba_ui_Widget.prototype.isAnElementClass = function(self,classInfo) 
  local isTrue = classInfo['isElementType'] ~= nil;
  if (isTrue == true) then 
    do return true end;
  end;
  do return false end
end
__sunaba_ui_Widget.prototype.camelToPascal = function(self,str) 
  if ((str == nil) or (#str == 0)) then 
    do return str end;
  end;
  do return Std.string(_G.string.upper(_G.string.sub(str, 1, 1))) .. Std.string(String.prototype.substr(str, 1)) end
end
__sunaba_ui_Widget.prototype.camelToSnake = function(self,input) 
  local result = "";
  local _g = 0;
  local _g1 = #input;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    local c = _G.string.sub(input, i + 1, i + 1);
    if (((i > 0) and (c >= "A")) and (c <= "Z")) then 
      result = Std.string(result) .. Std.string("_");
    end;
    result = Std.string(result) .. Std.string(_G.string.lower(c));
  end;
  do return result end
end

__sunaba_ui_Widget.prototype.__class__ =  __sunaba_ui_Widget

__support_files_test5_src_ClickerCounter.new = function() 
  local self = _hx_new(__support_files_test5_src_ClickerCounter.prototype)
  __support_files_test5_src_ClickerCounter.super(self)
  return self
end
__support_files_test5_src_ClickerCounter.super = function(self) 
  __sunaba_ui_Widget.super(self);
end
__support_files_test5_src_ClickerCounter.__name__ = "support_files.test5.src.ClickerCounter"
__support_files_test5_src_ClickerCounter.prototype = _hx_e();
__support_files_test5_src_ClickerCounter.prototype.init = function(self) 
  self:load("app://assets/ClickerCounter.suml");
end

__support_files_test5_src_ClickerCounter.prototype.__class__ =  __support_files_test5_src_ClickerCounter
__support_files_test5_src_ClickerCounter.__super__ = __sunaba_ui_Widget
setmetatable(__support_files_test5_src_ClickerCounter.prototype,{__index=__sunaba_ui_Widget.prototype})

__support_files_test5_src_Main.new = function() 
  local self = _hx_new(__support_files_test5_src_Main.prototype)
  __support_files_test5_src_Main.super(self)
  return self
end
__support_files_test5_src_Main.super = function(self) 
  __sunaba_App.super(self);
end
__support_files_test5_src_Main.__name__ = "support_files.test5.src.Main"
__support_files_test5_src_Main.main = function() 
  __support_files_test5_src_Main.new();
end
__support_files_test5_src_Main.prototype = _hx_e();
__support_files_test5_src_Main.prototype.init = function(self) 
  _G.print("Hello, World!");
  local clickerCounter = __support_files_test5_src_ClickerCounter.new();
  _G.print(Std.string(Std.string("ClickerCounter.rootElement.isNull: ") .. Std.string(Std.string(clickerCounter.rootElement:isNull()))));
  self:get_rootElement():addChild(clickerCounter.rootElement);
end

__support_files_test5_src_Main.prototype.__class__ =  __support_files_test5_src_Main
__support_files_test5_src_Main.__super__ = __sunaba_App
setmetatable(__support_files_test5_src_Main.prototype,{__index=__sunaba_App.prototype})
setmetatable(__support_files_test5_src_Main.prototype.__properties__,{__index=__sunaba_App.prototype.__properties__})
local hasBit32, bit32 = pcall(require, 'bit32')
if hasBit32 then --if we are on Lua 5.1, bit32 will be the default.
  _hx_bit_raw = bit32
  _hx_bit = setmetatable({}, { __index = _hx_bit_raw })
  -- lua 5.2 weirdness
  _hx_bit.bnot = function(...) return _hx_bit_clamp(_hx_bit_raw.bnot(...)) end
  _hx_bit.bxor = function(...) return _hx_bit_clamp(_hx_bit_raw.bxor(...)) end
else
  --If we do not have bit32, fallback to 'bit'
  local hasBit, bit = pcall(require, 'bit')
  if not hasBit then
    error("Failed to load bit or bit32")
  end
  _hx_bit_raw = bit
  _hx_bit = setmetatable({}, { __index = _hx_bit_raw })
end

-- see https://github.com/HaxeFoundation/haxe/issues/8849
_hx_bit.bor = function(...) return _hx_bit_clamp(_hx_bit_raw.bor(...)) end
_hx_bit.band = function(...) return _hx_bit_clamp(_hx_bit_raw.band(...)) end
_hx_bit.arshift = function(...) return _hx_bit_clamp(_hx_bit_raw.arshift(...)) end

if _hx_bit_raw then
    _hx_bit_clamp = function(v)
    if v <= 2147483647 and v >= -2147483648 then
        if v > 0 then return _G.math.floor(v)
        else return _G.math.ceil(v)
        end
    end
    if v > 2251798999999999 then v = v*2 end;
    if (v ~= v or math.abs(v) == _G.math.huge) then return nil end
    return _hx_bit_raw.band(v, 2147483647 ) - math.abs(_hx_bit_raw.band(v, 2147483648))
    end
else
    _hx_bit_clamp = function(v)
        if v < -2147483648 then
            return -2147483648
        elseif v > 2147483647 then
            return 2147483647
        elseif v > 0 then
            return _G.math.floor(v)
        else
            return _G.math.ceil(v)
        end
    end
end;



_hx_array_mt.__index = Array.prototype

if package.loaded.luv then
  _hx_luv = _G.require("luv");
else
  _hx_luv = {
    run=function(mode) return false end,
    loop_alive=function() return false end
  }
end
local _hx_static_init = function()
  
  String.__name__ = "String";
  Array.__name__ = "Array";Xml.Element = 0;
  
  Xml.PCData = 1;
  
  Xml.CData = 2;
  
  Xml.Comment = 3;
  
  Xml.DocType = 4;
  
  Xml.ProcessingInstruction = 5;
  
  Xml.Document = 6;
  
  __haxe_ds_StringMap.tnull = ({});
  
  __haxe_xml_Parser.escapes = (function() 
    local _hx_1
    
    local h = __haxe_ds_StringMap.new();
    
    h.h.lt = "<";
    
    h.h.gt = ">";
    
    h.h.amp = "&";
    
    h.h.quot = "\"";
    
    h.h.apos = "'";
    
    _hx_1 = h;
    return _hx_1
  end )();
  
  
end

_hx_table = {}
_hx_table.pack = _G.table.pack or function(...)
    return {...}
end
_hx_table.unpack = _G.table.unpack or _G.unpack
_hx_table.maxn = _G.table.maxn or function(t)
  local maxn=0;
  for i in pairs(t) do
    maxn=type(i)=='number'and i>maxn and i or maxn
  end
  return maxn
end;

_hx_wrap_if_string_field = function(o, fld)
  if _G.type(o) == 'string' then
    if fld == 'length' then
      return _G.string.len(o)
    else
      return String.prototype[fld]
    end
  else
    return o[fld]
  end
end

function _hx_handle_error(obj)
  local message = tostring(obj)
  if _G.debug and _G.debug.traceback then
    -- level 2 to skip _hx_handle_error
    message = _G.debug.traceback(message, 2)
  end
  return setmetatable({}, { __tostring = function() return message end })
end

_hx_static_init();
local success, err = _G.xpcall(function() 
  __support_files_test5_src_Main.main();
  _hx_luv.run();
end, _hx_handle_error)
if not success then _G.error(err) end
