package sunaba.ui;

import sunaba.core.ArrayList;
import sunaba.core.Event;
import sunaba.core.Vector2;
import sunaba.core.Vector2i;
import sunaba.core.Color;
import sunaba.core.Texture2D;
import sunaba.desktop.PopupMenu;
import sunaba.core.Rect2i;

@:native("TextEdit")
extern class TextEdit extends Control {
    public var autowrapMode: Int;
    public var caretBlink: Bool;
    public var caretBlinkInterval: Float;
    public var caretDrawWhenEditableDisabled: Bool;
    public var caretMidGrapheme: Bool;
    public var caretMoveOnRightClick: Bool;
    public var caretMultiple: Bool;
    public var caretType: Int;
    public var clipContents: Bool;
    public var contextMenuEnabled: Bool;
    public var customWordSeparators: String;
    public var deselectOnFocusLost: Bool;
    public var dragAndDropSelectionEnabled: Bool;
    public var drawControlChars: Bool;
    public var drawSpaces: Bool;
    public var editable: Bool;
    public var emojuMenuEnabled: Bool;
    public var emptySelectionClipboardEnabled: Bool;
    public var highlightAllOccurrences: Bool;
    public var highlightCurrentLine: Bool;
    public var indentWrappedLines: Bool;
    public var language: String;
    public var middleMousePasteEnabled: Bool;
    public var minimapDraw: Bool;
    public var minimapWidth: Int;
    public var mouseDefaultCursorShape: Int;
    public var placeholderText: String;
    public var scrollFitContentHeight: Bool;
    public var scrollFitContentWidth: Bool;
    public var scrollHorizontal: Int;
    public var scrollPastEndOfFile: Bool;
    public var scrollSmooth: Bool;
    public var scrollVScrollSpeed: Float;
    public var scrollVertical: Float;
    public var selectingEnabled: Bool;
    public var shortcutKeysEnabled: Bool;
    public var structuredTextBidiOverride: Bool;
    public var structuredTextBidiOverrideOptions: ArrayList;
    public var syntaxHighlighter: SyntaxHighlighter;
    public var text: String;
    public var textDirection: Int;
    public var useCustomWordSeparators: Bool;
    public var useDefaultWordSeparators: Bool;
    public var virtualKeyboardEnabled: Bool;
    public var wrapMode: Int;
    public var caretChanged: Event;
    public var gutterAdded: Event;
    public var gutterClicked: Event;
    public var gutterRemoved: Event;
    public var linesEditedFrom: Event;
    public var textChanged: Event;
    public var textSet: Event;
    public function addCaret(line: Int, column: Int): Int;
    public function addCaretAtCarets(bellow: Bool): Void;
    public function addGutter(?at: Int): Void;
    public function addSelectionForNextOccurrence(): Void;
    public function adjustCaretsAfterEdit(caret: Int, fromLine: Int, fromColumn: Int, toLine: Int, toColumn: Int): Void;
    public function adjustViewportToCaret(caret: Int): Void;
    public function applyIme(): Void;
    public function backspace(?caretIndex: Int): Void;
    public function beginComplexOperation(): Void;
    public function beginMulticaretEdit(): Void;
    public function cancelIme(): Void;
    public function centerViewportToCaret(?caret: Int): Void;
    public function clear(): Void;
    public function clearUndoHistory(): Void;
    public function collapseCarets(fromLine: Int, fromColumn: Int, toLine: Int, toColumn: Int, ?inclusive: Bool): Void;
    public function copy(?caret: Int): Void;
    public function cut(?caret: Int): Void;
    public function deleteSelection(?caret: Int): Void;
    public function deselect(?caret: Int): Void;
    public function endAction(): Void;
    public function endComplexOperation(): Void;
    public function endMulticaretEdit(): Void;
    public function getCaretColumn(?caret: Int): Int;
    public function getCaretCount(): Int;
    public function getCaretDrawPos(?caret: Int): Vector2;
    public function getCaretIndexEditOrder(): Array<Int>;
    public function getCaretLine(?caret: Int): Int;
    public function getCaretWrapIndex(?caret: Int): Int;
    public function getFirstNonWhitespaceColumn(line: Int): Int;
    public function getFirstVisibleLine(): Int;
    public function getGutterCount(): Int;
    public function getGutterType(gutter: Int): Int;
    public function getGutterWidth(gutter: Int): Int;
    public function getHScrollBar(): HScrollBar;
    public function getIndentLevel(line: Int): Int;
    public function getLastFullVisibleLine(): Int;
    public function getLastFullVisibleLineWrapIndex(): Int;
    public function getLastUnhiddenLine(): Int;
    public function getLine(line: Int): String;
    public function getLineBackgroundColor(line: Int): Color;
    public function getLineColumnAtPos(pos: Vector2i, ?clampLine: Bool, ?clampColumn: Bool): Vector2i;
    public function getLineCount(): Int;
    public function getLineGutterIcon(line: Int, gutter: Int): Texture2D;
    public function getLineGutterMetadata(line: Int, gutter: Int): Variant;
    public function getLineGutterText(line: Int, gutter: Int): String;
    public function getLineHeight(): Int;
    public function getLineRangesFromCarets(?onlySelections: Bool, ?mergeAdjacent: Bool): Array<Vector2i>;
    public function getLineWidth(line: Int, ?wrapIndex: Int): Int;
    public function getLineWithIme(line: Int): String;
    public function getLineWrapCount(line: Int): Int;
    public function getLineWrapIndexAtColumn(line: Int, column: Int): Int;
    public function getLineWrappedText(line: Int): Array<String>;
    public function getLocalMousePos(): Vector2;
    public function getMenu(): PopupMenu;
    public function getMinimapLineAtPos(pos: Vector2): Int;
    public function getMinimapAtPos(pos: Vector2i): Int;
    public function getMinimapVisibleLines(): Int;
    public function getNextVisibleLineIndexOffsetFrom(line: Int, wrapIndex: Int, visibleAmount: Int): Vector2i;
    public function getNextVisibleLineOffsetFrom(line: Int, visibleAmount: Int): Int;
    public function getPosAtLineColumn(line: Int, column: Int): Vector2i;
    public function getRectAtLineColumn(line: Int, column: Int): Rect2i;
    public function getSavedVersion(): Int;
    public function getScrollPosForLine(line: Int, ?wrapIndex: Int): Float;
    public function getSelectedText(): String;
    public function getSelectionAtLineColumn(line: Int, column: Int, ?includeEdges: Bool, ?onlySelections: Bool): Int;
    public function getSelectionColumn(?caretIndex: Int): Int;
    public function getSelectionFromColumn(?caretIndex: Int): Int;
    public function getSelectionFromLine(?caretIndex: Int): Int;
    public function getSelectionLine(?caretIndex: Int): Int;
    public function getSelectionMode(): Int;
    public function getSelectionOriginColumn(?caretIndex: Int): Int;
    public function getSelectionOriginLine(?caretIndex: Int): Int;
    public function getSelectionToColumn(?caretIndex: Int): Int;
    public function getSelectionToLine(?caretIndex: Int): Int;
    public function getSortedCarets(?includeIgnoredCarets: Bool): Array<Int>;
    public function getTabSize(): Int;
    public function getTotalGutterWidth(): Int;
    public function getTotalVisibleLineCount(): Int;
    public function getVisibleLineCount(): Int;
    public function getVisibleLineCountInRange(fromLine: Int, toLine: Int): Int;
    public function getWordAtPos(pos: Vector2): String;
    public function getWordUnderCaret(?caret: Int): String;
    public function hasImeText(): Bool;
    public function hasRedo(): Bool;
    public function hasSelection(?caret: Int): Bool;
    public function hasUndo(): Bool;
    public function insertLineAt(line: Int, text: String): Void;
    public function insertText(text: String, line: Int, column: Int, ?beforeSelectionBegin: Bool, beforeSelectionEnd: Bool): Void;
    public function insertTextAtCaret(text: String, ?caretIndex: Int): Void;
}